//  This file was automatically generated and should not be edited.

#if canImport(AWSAPIPlugin)
import Foundation

public protocol GraphQLInputValue {
}

public struct GraphQLVariable {
  let name: String
  
  public init(_ name: String) {
    self.name = name
  }
}

extension GraphQLVariable: GraphQLInputValue {
}

extension JSONEncodable {
  public func evaluate(with variables: [String: JSONEncodable]?) throws -> Any {
    return jsonValue
  }
}

public typealias GraphQLMap = [String: JSONEncodable?]

extension Dictionary where Key == String, Value == JSONEncodable? {
  public var withNilValuesRemoved: Dictionary<String, JSONEncodable> {
    var filtered = Dictionary<String, JSONEncodable>(minimumCapacity: count)
    for (key, value) in self {
      if value != nil {
        filtered[key] = value
      }
    }
    return filtered
  }
}

public protocol GraphQLMapConvertible: JSONEncodable {
  var graphQLMap: GraphQLMap { get }
}

public extension GraphQLMapConvertible {
  var jsonValue: Any {
    return graphQLMap.withNilValuesRemoved.jsonValue
  }
}

public typealias GraphQLID = String

public protocol APISwiftGraphQLOperation: AnyObject {
  
  static var operationString: String { get }
  static var requestString: String { get }
  static var operationIdentifier: String? { get }
  
  var variables: GraphQLMap? { get }
  
  associatedtype Data: GraphQLSelectionSet
}

public extension APISwiftGraphQLOperation {
  static var requestString: String {
    return operationString
  }

  static var operationIdentifier: String? {
    return nil
  }

  var variables: GraphQLMap? {
    return nil
  }
}

public protocol GraphQLQuery: APISwiftGraphQLOperation {}

public protocol GraphQLMutation: APISwiftGraphQLOperation {}

public protocol GraphQLSubscription: APISwiftGraphQLOperation {}

public protocol GraphQLFragment: GraphQLSelectionSet {
  static var possibleTypes: [String] { get }
}

public typealias Snapshot = [String: Any?]

public protocol GraphQLSelectionSet: Decodable {
  static var selections: [GraphQLSelection] { get }
  
  var snapshot: Snapshot { get }
  init(snapshot: Snapshot)
}

extension GraphQLSelectionSet {
    public init(from decoder: Decoder) throws {
        if let jsonObject = try? APISwiftJSONValue(from: decoder) {
            let encoder = JSONEncoder()
            let jsonData = try encoder.encode(jsonObject)
            let decodedDictionary = try JSONSerialization.jsonObject(with: jsonData, options: []) as! [String: Any]
            let optionalDictionary = decodedDictionary.mapValues { $0 as Any? }

            self.init(snapshot: optionalDictionary)
        } else {
            self.init(snapshot: [:])
        }
    }
}

enum APISwiftJSONValue: Codable {
    case array([APISwiftJSONValue])
    case boolean(Bool)
    case number(Double)
    case object([String: APISwiftJSONValue])
    case string(String)
    case null
    
    init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        
        if let value = try? container.decode([String: APISwiftJSONValue].self) {
            self = .object(value)
        } else if let value = try? container.decode([APISwiftJSONValue].self) {
            self = .array(value)
        } else if let value = try? container.decode(Double.self) {
            self = .number(value)
        } else if let value = try? container.decode(Bool.self) {
            self = .boolean(value)
        } else if let value = try? container.decode(String.self) {
            self = .string(value)
        } else {
            self = .null
        }
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        
        switch self {
        case .array(let value):
            try container.encode(value)
        case .boolean(let value):
            try container.encode(value)
        case .number(let value):
            try container.encode(value)
        case .object(let value):
            try container.encode(value)
        case .string(let value):
            try container.encode(value)
        case .null:
            try container.encodeNil()
        }
    }
}

public protocol GraphQLSelection {
}

public struct GraphQLField: GraphQLSelection {
  let name: String
  let alias: String?
  let arguments: [String: GraphQLInputValue]?
  
  var responseKey: String {
    return alias ?? name
  }
  
  let type: GraphQLOutputType
  
  public init(_ name: String, alias: String? = nil, arguments: [String: GraphQLInputValue]? = nil, type: GraphQLOutputType) {
    self.name = name
    self.alias = alias
    
    self.arguments = arguments
    
    self.type = type
  }
}

public indirect enum GraphQLOutputType {
  case scalar(JSONDecodable.Type)
  case object([GraphQLSelection])
  case nonNull(GraphQLOutputType)
  case list(GraphQLOutputType)
  
  var namedType: GraphQLOutputType {
    switch self {
    case .nonNull(let innerType), .list(let innerType):
      return innerType.namedType
    case .scalar, .object:
      return self
    }
  }
}

public struct GraphQLBooleanCondition: GraphQLSelection {
  let variableName: String
  let inverted: Bool
  let selections: [GraphQLSelection]
  
  public init(variableName: String, inverted: Bool, selections: [GraphQLSelection]) {
    self.variableName = variableName
    self.inverted = inverted;
    self.selections = selections;
  }
}

public struct GraphQLTypeCondition: GraphQLSelection {
  let possibleTypes: [String]
  let selections: [GraphQLSelection]
  
  public init(possibleTypes: [String], selections: [GraphQLSelection]) {
    self.possibleTypes = possibleTypes
    self.selections = selections;
  }
}

public struct GraphQLFragmentSpread: GraphQLSelection {
  let fragment: GraphQLFragment.Type
  
  public init(_ fragment: GraphQLFragment.Type) {
    self.fragment = fragment
  }
}

public struct GraphQLTypeCase: GraphQLSelection {
  let variants: [String: [GraphQLSelection]]
  let `default`: [GraphQLSelection]
  
  public init(variants: [String: [GraphQLSelection]], default: [GraphQLSelection]) {
    self.variants = variants
    self.default = `default`;
  }
}

public typealias JSONObject = [String: Any]

public protocol JSONDecodable {
  init(jsonValue value: Any) throws
}

public protocol JSONEncodable: GraphQLInputValue {
  var jsonValue: Any { get }
}

public enum JSONDecodingError: Error, LocalizedError {
  case missingValue
  case nullValue
  case wrongType
  case couldNotConvert(value: Any, to: Any.Type)
  
  public var errorDescription: String? {
    switch self {
    case .missingValue:
      return "Missing value"
    case .nullValue:
      return "Unexpected null value"
    case .wrongType:
      return "Wrong type"
    case .couldNotConvert(let value, let expectedType):
      return "Could not convert \"\(value)\" to \(expectedType)"
    }
  }
}

extension String: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let string = value as? String else {
      throw JSONDecodingError.couldNotConvert(value: value, to: String.self)
    }
    self = string
  }

  public var jsonValue: Any {
    return self
  }
}

extension Int: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let number = value as? NSNumber else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Int.self)
    }
    self = number.intValue
  }

  public var jsonValue: Any {
    return self
  }
}

extension Float: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let number = value as? NSNumber else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Float.self)
    }
    self = number.floatValue
  }

  public var jsonValue: Any {
    return self
  }
}

extension Double: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let number = value as? NSNumber else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Double.self)
    }
    self = number.doubleValue
  }

  public var jsonValue: Any {
    return self
  }
}

extension Bool: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let bool = value as? Bool else {
        throw JSONDecodingError.couldNotConvert(value: value, to: Bool.self)
    }
    self = bool
  }

  public var jsonValue: Any {
    return self
  }
}

extension RawRepresentable where RawValue: JSONDecodable {
  public init(jsonValue value: Any) throws {
    let rawValue = try RawValue(jsonValue: value)
    if let tempSelf = Self(rawValue: rawValue) {
      self = tempSelf
    } else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Self.self)
    }
  }
}

extension RawRepresentable where RawValue: JSONEncodable {
  public var jsonValue: Any {
    return rawValue.jsonValue
  }
}

extension Optional where Wrapped: JSONDecodable {
  public init(jsonValue value: Any) throws {
    if value is NSNull {
      self = .none
    } else {
      self = .some(try Wrapped(jsonValue: value))
    }
  }
}

extension Optional: JSONEncodable {
  public var jsonValue: Any {
    switch self {
    case .none:
      return NSNull()
    case .some(let wrapped as JSONEncodable):
      return wrapped.jsonValue
    default:
      fatalError("Optional is only JSONEncodable if Wrapped is")
    }
  }
}

extension Dictionary: JSONEncodable {
  public var jsonValue: Any {
    return jsonObject
  }
  
  public var jsonObject: JSONObject {
    var jsonObject = JSONObject(minimumCapacity: count)
    for (key, value) in self {
      if case let (key as String, value as JSONEncodable) = (key, value) {
        jsonObject[key] = value.jsonValue
      } else {
        fatalError("Dictionary is only JSONEncodable if Value is (and if Key is String)")
      }
    }
    return jsonObject
  }
}

extension Array: JSONEncodable {
  public var jsonValue: Any {
    return map() { element -> (Any) in
      if case let element as JSONEncodable = element {
        return element.jsonValue
      } else {
        fatalError("Array is only JSONEncodable if Element is")
      }
    }
  }
}

extension URL: JSONDecodable, JSONEncodable {
  public init(jsonValue value: Any) throws {
    guard let string = value as? String else {
      throw JSONDecodingError.couldNotConvert(value: value, to: URL.self)
    }
    self.init(string: string)!
  }

  public var jsonValue: Any {
    return self.absoluteString
  }
}

extension Dictionary {
  static func += (lhs: inout Dictionary, rhs: Dictionary) {
    lhs.merge(rhs) { (_, new) in new }
  }
}

#elseif canImport(AWSAppSync)
import AWSAppSync
#endif

public struct CreateUserSavedPostInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, newuserId: GraphQLID, postId: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "newuserID": newuserId, "postID": postId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var newuserId: GraphQLID {
    get {
      return graphQLMap["newuserID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var postId: GraphQLID {
    get {
      return graphQLMap["postID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelUserSavedPostConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(newuserId: ModelIDInput? = nil, postId: ModelIDInput? = nil, and: [ModelUserSavedPostConditionInput?]? = nil, or: [ModelUserSavedPostConditionInput?]? = nil, not: ModelUserSavedPostConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["newuserID": newuserId, "postID": postId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var newuserId: ModelIDInput? {
    get {
      return graphQLMap["newuserID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var postId: ModelIDInput? {
    get {
      return graphQLMap["postID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var and: [ModelUserSavedPostConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserSavedPostConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserSavedPostConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserSavedPostConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserSavedPostConditionInput? {
    get {
      return graphQLMap["not"] as! ModelUserSavedPostConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelIDInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: GraphQLID? = nil, eq: GraphQLID? = nil, le: GraphQLID? = nil, lt: GraphQLID? = nil, ge: GraphQLID? = nil, gt: GraphQLID? = nil, contains: GraphQLID? = nil, notContains: GraphQLID? = nil, between: [GraphQLID?]? = nil, beginsWith: GraphQLID? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: GraphQLID? {
    get {
      return graphQLMap["ne"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: GraphQLID? {
    get {
      return graphQLMap["eq"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: GraphQLID? {
    get {
      return graphQLMap["le"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: GraphQLID? {
    get {
      return graphQLMap["lt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: GraphQLID? {
    get {
      return graphQLMap["ge"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: GraphQLID? {
    get {
      return graphQLMap["gt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: GraphQLID? {
    get {
      return graphQLMap["contains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: GraphQLID? {
    get {
      return graphQLMap["notContains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [GraphQLID?]? {
    get {
      return graphQLMap["between"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: GraphQLID? {
    get {
      return graphQLMap["beginsWith"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public enum ModelAttributeTypes: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case binary
  case binarySet
  case bool
  case list
  case map
  case number
  case numberSet
  case string
  case stringSet
  case null
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "binary": self = .binary
      case "binarySet": self = .binarySet
      case "bool": self = .bool
      case "list": self = .list
      case "map": self = .map
      case "number": self = .number
      case "numberSet": self = .numberSet
      case "string": self = .string
      case "stringSet": self = .stringSet
      case "_null": self = .null
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .binary: return "binary"
      case .binarySet: return "binarySet"
      case .bool: return "bool"
      case .list: return "list"
      case .map: return "map"
      case .number: return "number"
      case .numberSet: return "numberSet"
      case .string: return "string"
      case .stringSet: return "stringSet"
      case .null: return "_null"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: ModelAttributeTypes, rhs: ModelAttributeTypes) -> Bool {
    switch (lhs, rhs) {
      case (.binary, .binary): return true
      case (.binarySet, .binarySet): return true
      case (.bool, .bool): return true
      case (.list, .list): return true
      case (.map, .map): return true
      case (.number, .number): return true
      case (.numberSet, .numberSet): return true
      case (.string, .string): return true
      case (.stringSet, .stringSet): return true
      case (.null, .null): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct ModelSizeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }
}

public struct ModelBooleanInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Bool? = nil, eq: Bool? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Bool? {
    get {
      return graphQLMap["ne"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Bool? {
    get {
      return graphQLMap["eq"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public struct UpdateUserSavedPostInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, newuserId: GraphQLID? = nil, postId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "newuserID": newuserId, "postID": postId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var newuserId: GraphQLID? {
    get {
      return graphQLMap["newuserID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var postId: GraphQLID? {
    get {
      return graphQLMap["postID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteUserSavedPostInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreatePostInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, caption: String? = nil, creationDate: String, newuserId: GraphQLID, isCoachesOnly: Bool, version: Int? = nil) {
    graphQLMap = ["id": id, "caption": caption, "creationDate": creationDate, "newuserID": newuserId, "isCoachesOnly": isCoachesOnly, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var caption: String? {
    get {
      return graphQLMap["caption"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "caption")
    }
  }

  public var creationDate: String {
    get {
      return graphQLMap["creationDate"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var newuserId: GraphQLID {
    get {
      return graphQLMap["newuserID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var isCoachesOnly: Bool {
    get {
      return graphQLMap["isCoachesOnly"] as! Bool
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isCoachesOnly")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelPostConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(caption: ModelStringInput? = nil, creationDate: ModelStringInput? = nil, newuserId: ModelIDInput? = nil, isCoachesOnly: ModelBooleanInput? = nil, and: [ModelPostConditionInput?]? = nil, or: [ModelPostConditionInput?]? = nil, not: ModelPostConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["caption": caption, "creationDate": creationDate, "newuserID": newuserId, "isCoachesOnly": isCoachesOnly, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var caption: ModelStringInput? {
    get {
      return graphQLMap["caption"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "caption")
    }
  }

  public var creationDate: ModelStringInput? {
    get {
      return graphQLMap["creationDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var newuserId: ModelIDInput? {
    get {
      return graphQLMap["newuserID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var isCoachesOnly: ModelBooleanInput? {
    get {
      return graphQLMap["isCoachesOnly"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isCoachesOnly")
    }
  }

  public var and: [ModelPostConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelPostConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelPostConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelPostConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelPostConditionInput? {
    get {
      return graphQLMap["not"] as! ModelPostConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelStringInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: String? = nil, eq: String? = nil, le: String? = nil, lt: String? = nil, ge: String? = nil, gt: String? = nil, contains: String? = nil, notContains: String? = nil, between: [String?]? = nil, beginsWith: String? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: String? {
    get {
      return graphQLMap["ne"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: String? {
    get {
      return graphQLMap["eq"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: String? {
    get {
      return graphQLMap["le"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: String? {
    get {
      return graphQLMap["lt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: String? {
    get {
      return graphQLMap["ge"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: String? {
    get {
      return graphQLMap["gt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: String? {
    get {
      return graphQLMap["contains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: String? {
    get {
      return graphQLMap["notContains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [String?]? {
    get {
      return graphQLMap["between"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: String? {
    get {
      return graphQLMap["beginsWith"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public struct UpdatePostInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, caption: String? = nil, creationDate: String? = nil, newuserId: GraphQLID? = nil, isCoachesOnly: Bool? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "caption": caption, "creationDate": creationDate, "newuserID": newuserId, "isCoachesOnly": isCoachesOnly, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var caption: String? {
    get {
      return graphQLMap["caption"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "caption")
    }
  }

  public var creationDate: String? {
    get {
      return graphQLMap["creationDate"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var newuserId: GraphQLID? {
    get {
      return graphQLMap["newuserID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var isCoachesOnly: Bool? {
    get {
      return graphQLMap["isCoachesOnly"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isCoachesOnly")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeletePostInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateNewImageInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, s3key: String, uploadDate: String, postId: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var s3key: String {
    get {
      return graphQLMap["s3key"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: String {
    get {
      return graphQLMap["uploadDate"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: GraphQLID {
    get {
      return graphQLMap["postID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelNewImageConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(s3key: ModelStringInput? = nil, uploadDate: ModelStringInput? = nil, postId: ModelIDInput? = nil, and: [ModelNewImageConditionInput?]? = nil, or: [ModelNewImageConditionInput?]? = nil, not: ModelNewImageConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["s3key": s3key, "uploadDate": uploadDate, "postID": postId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var s3key: ModelStringInput? {
    get {
      return graphQLMap["s3key"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: ModelStringInput? {
    get {
      return graphQLMap["uploadDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: ModelIDInput? {
    get {
      return graphQLMap["postID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var and: [ModelNewImageConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewImageConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewImageConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewImageConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewImageConditionInput? {
    get {
      return graphQLMap["not"] as! ModelNewImageConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateNewImageInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, s3key: String? = nil, uploadDate: String? = nil, postId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var s3key: String? {
    get {
      return graphQLMap["s3key"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: String? {
    get {
      return graphQLMap["uploadDate"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: GraphQLID? {
    get {
      return graphQLMap["postID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteNewImageInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateMessageNewUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var isSender: Bool {
    get {
      return graphQLMap["isSender"] as! Bool
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isSender")
    }
  }

  public var newuserId: GraphQLID {
    get {
      return graphQLMap["newuserID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var messageId: GraphQLID {
    get {
      return graphQLMap["messageID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "messageID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelMessageNewUserConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(isSender: ModelBooleanInput? = nil, newuserId: ModelIDInput? = nil, messageId: ModelIDInput? = nil, and: [ModelMessageNewUserConditionInput?]? = nil, or: [ModelMessageNewUserConditionInput?]? = nil, not: ModelMessageNewUserConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["isSender": isSender, "newuserID": newuserId, "messageID": messageId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var isSender: ModelBooleanInput? {
    get {
      return graphQLMap["isSender"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isSender")
    }
  }

  public var newuserId: ModelIDInput? {
    get {
      return graphQLMap["newuserID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var messageId: ModelIDInput? {
    get {
      return graphQLMap["messageID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "messageID")
    }
  }

  public var and: [ModelMessageNewUserConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMessageNewUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMessageNewUserConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMessageNewUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMessageNewUserConditionInput? {
    get {
      return graphQLMap["not"] as! ModelMessageNewUserConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateMessageNewUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, isSender: Bool? = nil, newuserId: GraphQLID? = nil, messageId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var isSender: Bool? {
    get {
      return graphQLMap["isSender"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isSender")
    }
  }

  public var newuserId: GraphQLID? {
    get {
      return graphQLMap["newuserID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var messageId: GraphQLID? {
    get {
      return graphQLMap["messageID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "messageID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteMessageNewUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateNewUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], version: Int? = nil, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "_version": version, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var firstName: String {
    get {
      return graphQLMap["firstName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: String {
    get {
      return graphQLMap["lastName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var email: String {
    get {
      return graphQLMap["email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var phone: String? {
    get {
      return graphQLMap["phone"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var diveMeetsId: String? {
    get {
      return graphQLMap["diveMeetsID"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveMeetsID")
    }
  }

  public var accountType: String {
    get {
      return graphQLMap["accountType"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "accountType")
    }
  }

  public var tokens: [String] {
    get {
      return graphQLMap["tokens"] as! [String]
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }

  public var favoritesIds: [String] {
    get {
      return graphQLMap["favoritesIds"] as! [String]
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "favoritesIds")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var newUserAthleteId: GraphQLID? {
    get {
      return graphQLMap["newUserAthleteId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newUserAthleteId")
    }
  }

  public var newUserCoachId: GraphQLID? {
    get {
      return graphQLMap["newUserCoachId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newUserCoachId")
    }
  }
}

public struct ModelNewUserConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, email: ModelStringInput? = nil, phone: ModelStringInput? = nil, diveMeetsId: ModelStringInput? = nil, accountType: ModelStringInput? = nil, tokens: ModelStringInput? = nil, favoritesIds: ModelStringInput? = nil, and: [ModelNewUserConditionInput?]? = nil, or: [ModelNewUserConditionInput?]? = nil, not: ModelNewUserConditionInput? = nil, deleted: ModelBooleanInput? = nil, newUserAthleteId: ModelIDInput? = nil, newUserCoachId: ModelIDInput? = nil) {
    graphQLMap = ["firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "and": and, "or": or, "not": not, "_deleted": deleted, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId]
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["firstName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["lastName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var email: ModelStringInput? {
    get {
      return graphQLMap["email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var phone: ModelStringInput? {
    get {
      return graphQLMap["phone"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var diveMeetsId: ModelStringInput? {
    get {
      return graphQLMap["diveMeetsID"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveMeetsID")
    }
  }

  public var accountType: ModelStringInput? {
    get {
      return graphQLMap["accountType"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "accountType")
    }
  }

  public var tokens: ModelStringInput? {
    get {
      return graphQLMap["tokens"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }

  public var favoritesIds: ModelStringInput? {
    get {
      return graphQLMap["favoritesIds"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "favoritesIds")
    }
  }

  public var and: [ModelNewUserConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewUserConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewUserConditionInput? {
    get {
      return graphQLMap["not"] as! ModelNewUserConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }

  public var newUserAthleteId: ModelIDInput? {
    get {
      return graphQLMap["newUserAthleteId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newUserAthleteId")
    }
  }

  public var newUserCoachId: ModelIDInput? {
    get {
      return graphQLMap["newUserCoachId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newUserCoachId")
    }
  }
}

public struct UpdateNewUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, firstName: String? = nil, lastName: String? = nil, email: String? = nil, phone: String? = nil, diveMeetsId: String? = nil, accountType: String? = nil, tokens: [String]? = nil, favoritesIds: [String]? = nil, version: Int? = nil, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "_version": version, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var firstName: String? {
    get {
      return graphQLMap["firstName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: String? {
    get {
      return graphQLMap["lastName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var email: String? {
    get {
      return graphQLMap["email"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var phone: String? {
    get {
      return graphQLMap["phone"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var diveMeetsId: String? {
    get {
      return graphQLMap["diveMeetsID"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveMeetsID")
    }
  }

  public var accountType: String? {
    get {
      return graphQLMap["accountType"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "accountType")
    }
  }

  public var tokens: [String]? {
    get {
      return graphQLMap["tokens"] as! [String]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }

  public var favoritesIds: [String]? {
    get {
      return graphQLMap["favoritesIds"] as! [String]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "favoritesIds")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var newUserAthleteId: GraphQLID? {
    get {
      return graphQLMap["newUserAthleteId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newUserAthleteId")
    }
  }

  public var newUserCoachId: GraphQLID? {
    get {
      return graphQLMap["newUserCoachId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newUserCoachId")
    }
  }
}

public struct DeleteNewUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateNewAthleteInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, version: Int? = nil, newAthleteUserId: GraphQLID) {
    graphQLMap = ["id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "_version": version, "newAthleteUserId": newAthleteUserId]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var heightFeet: Int {
    get {
      return graphQLMap["heightFeet"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightFeet")
    }
  }

  public var heightInches: Int {
    get {
      return graphQLMap["heightInches"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightInches")
    }
  }

  public var weight: Int {
    get {
      return graphQLMap["weight"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weight")
    }
  }

  public var weightUnit: String {
    get {
      return graphQLMap["weightUnit"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weightUnit")
    }
  }

  public var gender: String {
    get {
      return graphQLMap["gender"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var age: Int {
    get {
      return graphQLMap["age"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "age")
    }
  }

  public var graduationYear: Int {
    get {
      return graphQLMap["graduationYear"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "graduationYear")
    }
  }

  public var highSchool: String {
    get {
      return graphQLMap["highSchool"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "highSchool")
    }
  }

  public var hometown: String {
    get {
      return graphQLMap["hometown"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hometown")
    }
  }

  public var springboardRating: Double? {
    get {
      return graphQLMap["springboardRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: Double? {
    get {
      return graphQLMap["platformRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: Double? {
    get {
      return graphQLMap["totalRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var collegeId: GraphQLID? {
    get {
      return graphQLMap["collegeID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collegeID")
    }
  }

  public var newteamId: GraphQLID? {
    get {
      return graphQLMap["newteamID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newteamID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var newAthleteUserId: GraphQLID {
    get {
      return graphQLMap["newAthleteUserId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newAthleteUserId")
    }
  }
}

public struct ModelNewAthleteConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(heightFeet: ModelIntInput? = nil, heightInches: ModelIntInput? = nil, weight: ModelIntInput? = nil, weightUnit: ModelStringInput? = nil, gender: ModelStringInput? = nil, age: ModelIntInput? = nil, graduationYear: ModelIntInput? = nil, highSchool: ModelStringInput? = nil, hometown: ModelStringInput? = nil, springboardRating: ModelFloatInput? = nil, platformRating: ModelFloatInput? = nil, totalRating: ModelFloatInput? = nil, collegeId: ModelIDInput? = nil, newteamId: ModelIDInput? = nil, and: [ModelNewAthleteConditionInput?]? = nil, or: [ModelNewAthleteConditionInput?]? = nil, not: ModelNewAthleteConditionInput? = nil, deleted: ModelBooleanInput? = nil, newAthleteUserId: ModelIDInput? = nil) {
    graphQLMap = ["heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "and": and, "or": or, "not": not, "_deleted": deleted, "newAthleteUserId": newAthleteUserId]
  }

  public var heightFeet: ModelIntInput? {
    get {
      return graphQLMap["heightFeet"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightFeet")
    }
  }

  public var heightInches: ModelIntInput? {
    get {
      return graphQLMap["heightInches"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightInches")
    }
  }

  public var weight: ModelIntInput? {
    get {
      return graphQLMap["weight"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weight")
    }
  }

  public var weightUnit: ModelStringInput? {
    get {
      return graphQLMap["weightUnit"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weightUnit")
    }
  }

  public var gender: ModelStringInput? {
    get {
      return graphQLMap["gender"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var age: ModelIntInput? {
    get {
      return graphQLMap["age"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "age")
    }
  }

  public var graduationYear: ModelIntInput? {
    get {
      return graphQLMap["graduationYear"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "graduationYear")
    }
  }

  public var highSchool: ModelStringInput? {
    get {
      return graphQLMap["highSchool"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "highSchool")
    }
  }

  public var hometown: ModelStringInput? {
    get {
      return graphQLMap["hometown"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hometown")
    }
  }

  public var springboardRating: ModelFloatInput? {
    get {
      return graphQLMap["springboardRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: ModelFloatInput? {
    get {
      return graphQLMap["platformRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: ModelFloatInput? {
    get {
      return graphQLMap["totalRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var collegeId: ModelIDInput? {
    get {
      return graphQLMap["collegeID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collegeID")
    }
  }

  public var newteamId: ModelIDInput? {
    get {
      return graphQLMap["newteamID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newteamID")
    }
  }

  public var and: [ModelNewAthleteConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewAthleteConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewAthleteConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewAthleteConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewAthleteConditionInput? {
    get {
      return graphQLMap["not"] as! ModelNewAthleteConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }

  public var newAthleteUserId: ModelIDInput? {
    get {
      return graphQLMap["newAthleteUserId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newAthleteUserId")
    }
  }
}

public struct ModelIntInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public struct ModelFloatInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Double? = nil, eq: Double? = nil, le: Double? = nil, lt: Double? = nil, ge: Double? = nil, gt: Double? = nil, between: [Double?]? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Double? {
    get {
      return graphQLMap["ne"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Double? {
    get {
      return graphQLMap["eq"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Double? {
    get {
      return graphQLMap["le"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Double? {
    get {
      return graphQLMap["lt"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Double? {
    get {
      return graphQLMap["ge"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Double? {
    get {
      return graphQLMap["gt"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Double?]? {
    get {
      return graphQLMap["between"] as! [Double?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public struct UpdateNewAthleteInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, heightFeet: Int? = nil, heightInches: Int? = nil, weight: Int? = nil, weightUnit: String? = nil, gender: String? = nil, age: Int? = nil, graduationYear: Int? = nil, highSchool: String? = nil, hometown: String? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, version: Int? = nil, newAthleteUserId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "_version": version, "newAthleteUserId": newAthleteUserId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var heightFeet: Int? {
    get {
      return graphQLMap["heightFeet"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightFeet")
    }
  }

  public var heightInches: Int? {
    get {
      return graphQLMap["heightInches"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightInches")
    }
  }

  public var weight: Int? {
    get {
      return graphQLMap["weight"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weight")
    }
  }

  public var weightUnit: String? {
    get {
      return graphQLMap["weightUnit"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weightUnit")
    }
  }

  public var gender: String? {
    get {
      return graphQLMap["gender"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var age: Int? {
    get {
      return graphQLMap["age"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "age")
    }
  }

  public var graduationYear: Int? {
    get {
      return graphQLMap["graduationYear"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "graduationYear")
    }
  }

  public var highSchool: String? {
    get {
      return graphQLMap["highSchool"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "highSchool")
    }
  }

  public var hometown: String? {
    get {
      return graphQLMap["hometown"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hometown")
    }
  }

  public var springboardRating: Double? {
    get {
      return graphQLMap["springboardRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: Double? {
    get {
      return graphQLMap["platformRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: Double? {
    get {
      return graphQLMap["totalRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var collegeId: GraphQLID? {
    get {
      return graphQLMap["collegeID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collegeID")
    }
  }

  public var newteamId: GraphQLID? {
    get {
      return graphQLMap["newteamID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newteamID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var newAthleteUserId: GraphQLID? {
    get {
      return graphQLMap["newAthleteUserId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newAthleteUserId")
    }
  }
}

public struct DeleteNewAthleteInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateVideoInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, s3key: String, uploadDate: String, postId: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var s3key: String {
    get {
      return graphQLMap["s3key"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: String {
    get {
      return graphQLMap["uploadDate"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: GraphQLID {
    get {
      return graphQLMap["postID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelVideoConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(s3key: ModelStringInput? = nil, uploadDate: ModelStringInput? = nil, postId: ModelIDInput? = nil, and: [ModelVideoConditionInput?]? = nil, or: [ModelVideoConditionInput?]? = nil, not: ModelVideoConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["s3key": s3key, "uploadDate": uploadDate, "postID": postId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var s3key: ModelStringInput? {
    get {
      return graphQLMap["s3key"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: ModelStringInput? {
    get {
      return graphQLMap["uploadDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: ModelIDInput? {
    get {
      return graphQLMap["postID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var and: [ModelVideoConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelVideoConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelVideoConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelVideoConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelVideoConditionInput? {
    get {
      return graphQLMap["not"] as! ModelVideoConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateVideoInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, s3key: String? = nil, uploadDate: String? = nil, postId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var s3key: String? {
    get {
      return graphQLMap["s3key"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: String? {
    get {
      return graphQLMap["uploadDate"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: GraphQLID? {
    get {
      return graphQLMap["postID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteVideoInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateCoachUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, version: Int? = nil, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "_version": version, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var coachUserUserId: GraphQLID? {
    get {
      return graphQLMap["coachUserUserId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coachUserUserId")
    }
  }

  public var coachUserTeamId: GraphQLID? {
    get {
      return graphQLMap["coachUserTeamId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coachUserTeamId")
    }
  }
}

public struct ModelCoachUserConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(and: [ModelCoachUserConditionInput?]? = nil, or: [ModelCoachUserConditionInput?]? = nil, not: ModelCoachUserConditionInput? = nil, deleted: ModelBooleanInput? = nil, coachUserUserId: ModelIDInput? = nil, coachUserTeamId: ModelIDInput? = nil) {
    graphQLMap = ["and": and, "or": or, "not": not, "_deleted": deleted, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId]
  }

  public var and: [ModelCoachUserConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelCoachUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelCoachUserConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelCoachUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelCoachUserConditionInput? {
    get {
      return graphQLMap["not"] as! ModelCoachUserConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }

  public var coachUserUserId: ModelIDInput? {
    get {
      return graphQLMap["coachUserUserId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coachUserUserId")
    }
  }

  public var coachUserTeamId: ModelIDInput? {
    get {
      return graphQLMap["coachUserTeamId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coachUserTeamId")
    }
  }
}

public struct UpdateCoachUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "_version": version, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var coachUserUserId: GraphQLID? {
    get {
      return graphQLMap["coachUserUserId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coachUserUserId")
    }
  }

  public var coachUserTeamId: GraphQLID? {
    get {
      return graphQLMap["coachUserTeamId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coachUserTeamId")
    }
  }
}

public struct DeleteCoachUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateNewTeamInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, name: String, version: Int? = nil, newTeamCoachId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "name": name, "_version": version, "newTeamCoachId": newTeamCoachId]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var newTeamCoachId: GraphQLID? {
    get {
      return graphQLMap["newTeamCoachId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newTeamCoachId")
    }
  }
}

public struct ModelNewTeamConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(name: ModelStringInput? = nil, and: [ModelNewTeamConditionInput?]? = nil, or: [ModelNewTeamConditionInput?]? = nil, not: ModelNewTeamConditionInput? = nil, deleted: ModelBooleanInput? = nil, newTeamCoachId: ModelIDInput? = nil) {
    graphQLMap = ["name": name, "and": and, "or": or, "not": not, "_deleted": deleted, "newTeamCoachId": newTeamCoachId]
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var and: [ModelNewTeamConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewTeamConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewTeamConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewTeamConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewTeamConditionInput? {
    get {
      return graphQLMap["not"] as! ModelNewTeamConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }

  public var newTeamCoachId: ModelIDInput? {
    get {
      return graphQLMap["newTeamCoachId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newTeamCoachId")
    }
  }
}

public struct UpdateNewTeamInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String? = nil, version: Int? = nil, newTeamCoachId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "name": name, "_version": version, "newTeamCoachId": newTeamCoachId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var newTeamCoachId: GraphQLID? {
    get {
      return graphQLMap["newTeamCoachId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newTeamCoachId")
    }
  }
}

public struct DeleteNewTeamInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateCollegeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, name: String, imageLink: String, version: Int? = nil) {
    graphQLMap = ["id": id, "name": name, "imageLink": imageLink, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var imageLink: String {
    get {
      return graphQLMap["imageLink"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "imageLink")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelCollegeConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(name: ModelStringInput? = nil, imageLink: ModelStringInput? = nil, and: [ModelCollegeConditionInput?]? = nil, or: [ModelCollegeConditionInput?]? = nil, not: ModelCollegeConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["name": name, "imageLink": imageLink, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var imageLink: ModelStringInput? {
    get {
      return graphQLMap["imageLink"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "imageLink")
    }
  }

  public var and: [ModelCollegeConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelCollegeConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelCollegeConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelCollegeConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelCollegeConditionInput? {
    get {
      return graphQLMap["not"] as! ModelCollegeConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateCollegeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String? = nil, imageLink: String? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "name": name, "imageLink": imageLink, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var imageLink: String? {
    get {
      return graphQLMap["imageLink"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "imageLink")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteCollegeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateNewMeetInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, version: Int? = nil) {
    graphQLMap = ["id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var meetId: Int {
    get {
      return graphQLMap["meetID"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetID")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var organization: String? {
    get {
      return graphQLMap["organization"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "organization")
    }
  }

  public var startDate: String {
    get {
      return graphQLMap["startDate"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "startDate")
    }
  }

  public var endDate: String {
    get {
      return graphQLMap["endDate"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "endDate")
    }
  }

  public var city: String {
    get {
      return graphQLMap["city"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var state: String {
    get {
      return graphQLMap["state"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var country: String {
    get {
      return graphQLMap["country"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  public var link: String {
    get {
      return graphQLMap["link"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var meetType: Int {
    get {
      return graphQLMap["meetType"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetType")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelNewMeetConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(meetId: ModelIntInput? = nil, name: ModelStringInput? = nil, organization: ModelStringInput? = nil, startDate: ModelStringInput? = nil, endDate: ModelStringInput? = nil, city: ModelStringInput? = nil, state: ModelStringInput? = nil, country: ModelStringInput? = nil, link: ModelStringInput? = nil, meetType: ModelIntInput? = nil, and: [ModelNewMeetConditionInput?]? = nil, or: [ModelNewMeetConditionInput?]? = nil, not: ModelNewMeetConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var meetId: ModelIntInput? {
    get {
      return graphQLMap["meetID"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetID")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var organization: ModelStringInput? {
    get {
      return graphQLMap["organization"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "organization")
    }
  }

  public var startDate: ModelStringInput? {
    get {
      return graphQLMap["startDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "startDate")
    }
  }

  public var endDate: ModelStringInput? {
    get {
      return graphQLMap["endDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "endDate")
    }
  }

  public var city: ModelStringInput? {
    get {
      return graphQLMap["city"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var state: ModelStringInput? {
    get {
      return graphQLMap["state"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var country: ModelStringInput? {
    get {
      return graphQLMap["country"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  public var link: ModelStringInput? {
    get {
      return graphQLMap["link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var meetType: ModelIntInput? {
    get {
      return graphQLMap["meetType"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetType")
    }
  }

  public var and: [ModelNewMeetConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewMeetConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewMeetConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewMeetConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewMeetConditionInput? {
    get {
      return graphQLMap["not"] as! ModelNewMeetConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateNewMeetInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, meetId: Int? = nil, name: String? = nil, organization: String? = nil, startDate: String? = nil, endDate: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, link: String? = nil, meetType: Int? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var meetId: Int? {
    get {
      return graphQLMap["meetID"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetID")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var organization: String? {
    get {
      return graphQLMap["organization"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "organization")
    }
  }

  public var startDate: String? {
    get {
      return graphQLMap["startDate"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "startDate")
    }
  }

  public var endDate: String? {
    get {
      return graphQLMap["endDate"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "endDate")
    }
  }

  public var city: String? {
    get {
      return graphQLMap["city"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var state: String? {
    get {
      return graphQLMap["state"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var country: String? {
    get {
      return graphQLMap["country"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  public var link: String? {
    get {
      return graphQLMap["link"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var meetType: Int? {
    get {
      return graphQLMap["meetType"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetType")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteNewMeetInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateNewEventInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var date: String {
    get {
      return graphQLMap["date"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "date")
    }
  }

  public var link: String {
    get {
      return graphQLMap["link"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var numEntries: Int {
    get {
      return graphQLMap["numEntries"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "numEntries")
    }
  }

  public var newmeetId: GraphQLID {
    get {
      return graphQLMap["newmeetID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newmeetID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelNewEventConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(name: ModelStringInput? = nil, date: ModelStringInput? = nil, link: ModelStringInput? = nil, numEntries: ModelIntInput? = nil, newmeetId: ModelIDInput? = nil, and: [ModelNewEventConditionInput?]? = nil, or: [ModelNewEventConditionInput?]? = nil, not: ModelNewEventConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var date: ModelStringInput? {
    get {
      return graphQLMap["date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "date")
    }
  }

  public var link: ModelStringInput? {
    get {
      return graphQLMap["link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var numEntries: ModelIntInput? {
    get {
      return graphQLMap["numEntries"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "numEntries")
    }
  }

  public var newmeetId: ModelIDInput? {
    get {
      return graphQLMap["newmeetID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newmeetID")
    }
  }

  public var and: [ModelNewEventConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewEventConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewEventConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewEventConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewEventConditionInput? {
    get {
      return graphQLMap["not"] as! ModelNewEventConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateNewEventInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String? = nil, date: String? = nil, link: String? = nil, numEntries: Int? = nil, newmeetId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var date: String? {
    get {
      return graphQLMap["date"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "date")
    }
  }

  public var link: String? {
    get {
      return graphQLMap["link"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var numEntries: Int? {
    get {
      return graphQLMap["numEntries"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "numEntries")
    }
  }

  public var newmeetId: GraphQLID? {
    get {
      return graphQLMap["newmeetID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newmeetID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteNewEventInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateDiveInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var number: String {
    get {
      return graphQLMap["number"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "number")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var height: Double {
    get {
      return graphQLMap["height"] as! Double
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "height")
    }
  }

  public var netScore: Double {
    get {
      return graphQLMap["netScore"] as! Double
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "netScore")
    }
  }

  public var dd: Double {
    get {
      return graphQLMap["dd"] as! Double
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "dd")
    }
  }

  public var totalScore: Double {
    get {
      return graphQLMap["totalScore"] as! Double
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalScore")
    }
  }

  public var newathleteId: GraphQLID {
    get {
      return graphQLMap["newathleteID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newathleteID")
    }
  }

  public var neweventId: GraphQLID {
    get {
      return graphQLMap["neweventID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "neweventID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelDiveConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(number: ModelStringInput? = nil, name: ModelStringInput? = nil, height: ModelFloatInput? = nil, netScore: ModelFloatInput? = nil, dd: ModelFloatInput? = nil, totalScore: ModelFloatInput? = nil, newathleteId: ModelIDInput? = nil, neweventId: ModelIDInput? = nil, and: [ModelDiveConditionInput?]? = nil, or: [ModelDiveConditionInput?]? = nil, not: ModelDiveConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var number: ModelStringInput? {
    get {
      return graphQLMap["number"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "number")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var height: ModelFloatInput? {
    get {
      return graphQLMap["height"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "height")
    }
  }

  public var netScore: ModelFloatInput? {
    get {
      return graphQLMap["netScore"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "netScore")
    }
  }

  public var dd: ModelFloatInput? {
    get {
      return graphQLMap["dd"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "dd")
    }
  }

  public var totalScore: ModelFloatInput? {
    get {
      return graphQLMap["totalScore"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalScore")
    }
  }

  public var newathleteId: ModelIDInput? {
    get {
      return graphQLMap["newathleteID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newathleteID")
    }
  }

  public var neweventId: ModelIDInput? {
    get {
      return graphQLMap["neweventID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "neweventID")
    }
  }

  public var and: [ModelDiveConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelDiveConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelDiveConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelDiveConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelDiveConditionInput? {
    get {
      return graphQLMap["not"] as! ModelDiveConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateDiveInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, number: String? = nil, name: String? = nil, height: Double? = nil, netScore: Double? = nil, dd: Double? = nil, totalScore: Double? = nil, newathleteId: GraphQLID? = nil, neweventId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var number: String? {
    get {
      return graphQLMap["number"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "number")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var height: Double? {
    get {
      return graphQLMap["height"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "height")
    }
  }

  public var netScore: Double? {
    get {
      return graphQLMap["netScore"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "netScore")
    }
  }

  public var dd: Double? {
    get {
      return graphQLMap["dd"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "dd")
    }
  }

  public var totalScore: Double? {
    get {
      return graphQLMap["totalScore"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalScore")
    }
  }

  public var newathleteId: GraphQLID? {
    get {
      return graphQLMap["newathleteID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newathleteID")
    }
  }

  public var neweventId: GraphQLID? {
    get {
      return graphQLMap["neweventID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "neweventID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteDiveInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateJudgeScoreInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, score: Double, diveId: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "score": score, "diveID": diveId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var score: Double {
    get {
      return graphQLMap["score"] as! Double
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "score")
    }
  }

  public var diveId: GraphQLID {
    get {
      return graphQLMap["diveID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelJudgeScoreConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(score: ModelFloatInput? = nil, diveId: ModelIDInput? = nil, and: [ModelJudgeScoreConditionInput?]? = nil, or: [ModelJudgeScoreConditionInput?]? = nil, not: ModelJudgeScoreConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["score": score, "diveID": diveId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var score: ModelFloatInput? {
    get {
      return graphQLMap["score"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "score")
    }
  }

  public var diveId: ModelIDInput? {
    get {
      return graphQLMap["diveID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveID")
    }
  }

  public var and: [ModelJudgeScoreConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelJudgeScoreConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelJudgeScoreConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelJudgeScoreConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelJudgeScoreConditionInput? {
    get {
      return graphQLMap["not"] as! ModelJudgeScoreConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateJudgeScoreInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, score: Double? = nil, diveId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "score": score, "diveID": diveId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var score: Double? {
    get {
      return graphQLMap["score"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "score")
    }
  }

  public var diveId: GraphQLID? {
    get {
      return graphQLMap["diveID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteJudgeScoreInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateMessageInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, body: String, creationDate: String, version: Int? = nil) {
    graphQLMap = ["id": id, "body": body, "creationDate": creationDate, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var body: String {
    get {
      return graphQLMap["body"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "body")
    }
  }

  public var creationDate: String {
    get {
      return graphQLMap["creationDate"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelMessageConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(body: ModelStringInput? = nil, creationDate: ModelStringInput? = nil, and: [ModelMessageConditionInput?]? = nil, or: [ModelMessageConditionInput?]? = nil, not: ModelMessageConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["body": body, "creationDate": creationDate, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var body: ModelStringInput? {
    get {
      return graphQLMap["body"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "body")
    }
  }

  public var creationDate: ModelStringInput? {
    get {
      return graphQLMap["creationDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var and: [ModelMessageConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMessageConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMessageConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMessageConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMessageConditionInput? {
    get {
      return graphQLMap["not"] as! ModelMessageConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateMessageInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, body: String? = nil, creationDate: String? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "body": body, "creationDate": creationDate, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var body: String? {
    get {
      return graphQLMap["body"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "body")
    }
  }

  public var creationDate: String? {
    get {
      return graphQLMap["creationDate"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteMessageInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateDiveMeetsDiverInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var firstName: String {
    get {
      return graphQLMap["firstName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: String {
    get {
      return graphQLMap["lastName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var finaAge: Int? {
    get {
      return graphQLMap["finaAge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "finaAge")
    }
  }

  public var hsGradYear: Int? {
    get {
      return graphQLMap["hsGradYear"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hsGradYear")
    }
  }

  public var springboardRating: Double? {
    get {
      return graphQLMap["springboardRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: Double? {
    get {
      return graphQLMap["platformRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: Double? {
    get {
      return graphQLMap["totalRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelDiveMeetsDiverConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, finaAge: ModelIntInput? = nil, hsGradYear: ModelIntInput? = nil, springboardRating: ModelFloatInput? = nil, platformRating: ModelFloatInput? = nil, totalRating: ModelFloatInput? = nil, and: [ModelDiveMeetsDiverConditionInput?]? = nil, or: [ModelDiveMeetsDiverConditionInput?]? = nil, not: ModelDiveMeetsDiverConditionInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["firstName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["lastName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var finaAge: ModelIntInput? {
    get {
      return graphQLMap["finaAge"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "finaAge")
    }
  }

  public var hsGradYear: ModelIntInput? {
    get {
      return graphQLMap["hsGradYear"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hsGradYear")
    }
  }

  public var springboardRating: ModelFloatInput? {
    get {
      return graphQLMap["springboardRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: ModelFloatInput? {
    get {
      return graphQLMap["platformRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: ModelFloatInput? {
    get {
      return graphQLMap["totalRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var and: [ModelDiveMeetsDiverConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelDiveMeetsDiverConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelDiveMeetsDiverConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelDiveMeetsDiverConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelDiveMeetsDiverConditionInput? {
    get {
      return graphQLMap["not"] as! ModelDiveMeetsDiverConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct UpdateDiveMeetsDiverInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, firstName: String? = nil, lastName: String? = nil, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var firstName: String? {
    get {
      return graphQLMap["firstName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: String? {
    get {
      return graphQLMap["lastName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var finaAge: Int? {
    get {
      return graphQLMap["finaAge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "finaAge")
    }
  }

  public var hsGradYear: Int? {
    get {
      return graphQLMap["hsGradYear"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hsGradYear")
    }
  }

  public var springboardRating: Double? {
    get {
      return graphQLMap["springboardRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: Double? {
    get {
      return graphQLMap["platformRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: Double? {
    get {
      return graphQLMap["totalRating"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteDiveMeetsDiverInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelUserSavedPostFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, newuserId: ModelIDInput? = nil, postId: ModelIDInput? = nil, and: [ModelUserSavedPostFilterInput?]? = nil, or: [ModelUserSavedPostFilterInput?]? = nil, not: ModelUserSavedPostFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "newuserID": newuserId, "postID": postId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var newuserId: ModelIDInput? {
    get {
      return graphQLMap["newuserID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var postId: ModelIDInput? {
    get {
      return graphQLMap["postID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var and: [ModelUserSavedPostFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserSavedPostFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserSavedPostFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserSavedPostFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserSavedPostFilterInput? {
    get {
      return graphQLMap["not"] as! ModelUserSavedPostFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public enum ModelSortDirection: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case asc
  case desc
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ASC": self = .asc
      case "DESC": self = .desc
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .asc: return "ASC"
      case .desc: return "DESC"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: ModelSortDirection, rhs: ModelSortDirection) -> Bool {
    switch (lhs, rhs) {
      case (.asc, .asc): return true
      case (.desc, .desc): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct ModelPostFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, caption: ModelStringInput? = nil, creationDate: ModelStringInput? = nil, newuserId: ModelIDInput? = nil, isCoachesOnly: ModelBooleanInput? = nil, and: [ModelPostFilterInput?]? = nil, or: [ModelPostFilterInput?]? = nil, not: ModelPostFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "caption": caption, "creationDate": creationDate, "newuserID": newuserId, "isCoachesOnly": isCoachesOnly, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var caption: ModelStringInput? {
    get {
      return graphQLMap["caption"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "caption")
    }
  }

  public var creationDate: ModelStringInput? {
    get {
      return graphQLMap["creationDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var newuserId: ModelIDInput? {
    get {
      return graphQLMap["newuserID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var isCoachesOnly: ModelBooleanInput? {
    get {
      return graphQLMap["isCoachesOnly"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isCoachesOnly")
    }
  }

  public var and: [ModelPostFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelPostFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelPostFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelPostFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelPostFilterInput? {
    get {
      return graphQLMap["not"] as! ModelPostFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelNewImageFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, s3key: ModelStringInput? = nil, uploadDate: ModelStringInput? = nil, postId: ModelIDInput? = nil, and: [ModelNewImageFilterInput?]? = nil, or: [ModelNewImageFilterInput?]? = nil, not: ModelNewImageFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var s3key: ModelStringInput? {
    get {
      return graphQLMap["s3key"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: ModelStringInput? {
    get {
      return graphQLMap["uploadDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: ModelIDInput? {
    get {
      return graphQLMap["postID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var and: [ModelNewImageFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewImageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewImageFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewImageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewImageFilterInput? {
    get {
      return graphQLMap["not"] as! ModelNewImageFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelMessageNewUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, isSender: ModelBooleanInput? = nil, newuserId: ModelIDInput? = nil, messageId: ModelIDInput? = nil, and: [ModelMessageNewUserFilterInput?]? = nil, or: [ModelMessageNewUserFilterInput?]? = nil, not: ModelMessageNewUserFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var isSender: ModelBooleanInput? {
    get {
      return graphQLMap["isSender"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isSender")
    }
  }

  public var newuserId: ModelIDInput? {
    get {
      return graphQLMap["newuserID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var messageId: ModelIDInput? {
    get {
      return graphQLMap["messageID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "messageID")
    }
  }

  public var and: [ModelMessageNewUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMessageNewUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMessageNewUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMessageNewUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMessageNewUserFilterInput? {
    get {
      return graphQLMap["not"] as! ModelMessageNewUserFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelNewUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, email: ModelStringInput? = nil, phone: ModelStringInput? = nil, diveMeetsId: ModelStringInput? = nil, accountType: ModelStringInput? = nil, tokens: ModelStringInput? = nil, favoritesIds: ModelStringInput? = nil, and: [ModelNewUserFilterInput?]? = nil, or: [ModelNewUserFilterInput?]? = nil, not: ModelNewUserFilterInput? = nil, deleted: ModelBooleanInput? = nil, newUserAthleteId: ModelIDInput? = nil, newUserCoachId: ModelIDInput? = nil) {
    graphQLMap = ["id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "and": and, "or": or, "not": not, "_deleted": deleted, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["firstName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["lastName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var email: ModelStringInput? {
    get {
      return graphQLMap["email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var phone: ModelStringInput? {
    get {
      return graphQLMap["phone"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var diveMeetsId: ModelStringInput? {
    get {
      return graphQLMap["diveMeetsID"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveMeetsID")
    }
  }

  public var accountType: ModelStringInput? {
    get {
      return graphQLMap["accountType"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "accountType")
    }
  }

  public var tokens: ModelStringInput? {
    get {
      return graphQLMap["tokens"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }

  public var favoritesIds: ModelStringInput? {
    get {
      return graphQLMap["favoritesIds"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "favoritesIds")
    }
  }

  public var and: [ModelNewUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewUserFilterInput? {
    get {
      return graphQLMap["not"] as! ModelNewUserFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }

  public var newUserAthleteId: ModelIDInput? {
    get {
      return graphQLMap["newUserAthleteId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newUserAthleteId")
    }
  }

  public var newUserCoachId: ModelIDInput? {
    get {
      return graphQLMap["newUserCoachId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newUserCoachId")
    }
  }
}

public struct ModelNewAthleteFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, heightFeet: ModelIntInput? = nil, heightInches: ModelIntInput? = nil, weight: ModelIntInput? = nil, weightUnit: ModelStringInput? = nil, gender: ModelStringInput? = nil, age: ModelIntInput? = nil, graduationYear: ModelIntInput? = nil, highSchool: ModelStringInput? = nil, hometown: ModelStringInput? = nil, springboardRating: ModelFloatInput? = nil, platformRating: ModelFloatInput? = nil, totalRating: ModelFloatInput? = nil, collegeId: ModelIDInput? = nil, newteamId: ModelIDInput? = nil, and: [ModelNewAthleteFilterInput?]? = nil, or: [ModelNewAthleteFilterInput?]? = nil, not: ModelNewAthleteFilterInput? = nil, deleted: ModelBooleanInput? = nil, newAthleteUserId: ModelIDInput? = nil) {
    graphQLMap = ["id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "and": and, "or": or, "not": not, "_deleted": deleted, "newAthleteUserId": newAthleteUserId]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var heightFeet: ModelIntInput? {
    get {
      return graphQLMap["heightFeet"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightFeet")
    }
  }

  public var heightInches: ModelIntInput? {
    get {
      return graphQLMap["heightInches"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightInches")
    }
  }

  public var weight: ModelIntInput? {
    get {
      return graphQLMap["weight"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weight")
    }
  }

  public var weightUnit: ModelStringInput? {
    get {
      return graphQLMap["weightUnit"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weightUnit")
    }
  }

  public var gender: ModelStringInput? {
    get {
      return graphQLMap["gender"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var age: ModelIntInput? {
    get {
      return graphQLMap["age"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "age")
    }
  }

  public var graduationYear: ModelIntInput? {
    get {
      return graphQLMap["graduationYear"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "graduationYear")
    }
  }

  public var highSchool: ModelStringInput? {
    get {
      return graphQLMap["highSchool"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "highSchool")
    }
  }

  public var hometown: ModelStringInput? {
    get {
      return graphQLMap["hometown"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hometown")
    }
  }

  public var springboardRating: ModelFloatInput? {
    get {
      return graphQLMap["springboardRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: ModelFloatInput? {
    get {
      return graphQLMap["platformRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: ModelFloatInput? {
    get {
      return graphQLMap["totalRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var collegeId: ModelIDInput? {
    get {
      return graphQLMap["collegeID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collegeID")
    }
  }

  public var newteamId: ModelIDInput? {
    get {
      return graphQLMap["newteamID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newteamID")
    }
  }

  public var and: [ModelNewAthleteFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewAthleteFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewAthleteFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewAthleteFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewAthleteFilterInput? {
    get {
      return graphQLMap["not"] as! ModelNewAthleteFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }

  public var newAthleteUserId: ModelIDInput? {
    get {
      return graphQLMap["newAthleteUserId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newAthleteUserId")
    }
  }
}

public struct ModelVideoFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, s3key: ModelStringInput? = nil, uploadDate: ModelStringInput? = nil, postId: ModelIDInput? = nil, and: [ModelVideoFilterInput?]? = nil, or: [ModelVideoFilterInput?]? = nil, not: ModelVideoFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var s3key: ModelStringInput? {
    get {
      return graphQLMap["s3key"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: ModelStringInput? {
    get {
      return graphQLMap["uploadDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: ModelIDInput? {
    get {
      return graphQLMap["postID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var and: [ModelVideoFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelVideoFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelVideoFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelVideoFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelVideoFilterInput? {
    get {
      return graphQLMap["not"] as! ModelVideoFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelCoachUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, and: [ModelCoachUserFilterInput?]? = nil, or: [ModelCoachUserFilterInput?]? = nil, not: ModelCoachUserFilterInput? = nil, deleted: ModelBooleanInput? = nil, coachUserUserId: ModelIDInput? = nil, coachUserTeamId: ModelIDInput? = nil) {
    graphQLMap = ["id": id, "and": and, "or": or, "not": not, "_deleted": deleted, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var and: [ModelCoachUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelCoachUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelCoachUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelCoachUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelCoachUserFilterInput? {
    get {
      return graphQLMap["not"] as! ModelCoachUserFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }

  public var coachUserUserId: ModelIDInput? {
    get {
      return graphQLMap["coachUserUserId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coachUserUserId")
    }
  }

  public var coachUserTeamId: ModelIDInput? {
    get {
      return graphQLMap["coachUserTeamId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coachUserTeamId")
    }
  }
}

public struct ModelNewTeamFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, and: [ModelNewTeamFilterInput?]? = nil, or: [ModelNewTeamFilterInput?]? = nil, not: ModelNewTeamFilterInput? = nil, deleted: ModelBooleanInput? = nil, newTeamCoachId: ModelIDInput? = nil) {
    graphQLMap = ["id": id, "name": name, "and": and, "or": or, "not": not, "_deleted": deleted, "newTeamCoachId": newTeamCoachId]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var and: [ModelNewTeamFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewTeamFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewTeamFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewTeamFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewTeamFilterInput? {
    get {
      return graphQLMap["not"] as! ModelNewTeamFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }

  public var newTeamCoachId: ModelIDInput? {
    get {
      return graphQLMap["newTeamCoachId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newTeamCoachId")
    }
  }
}

public struct ModelCollegeFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, imageLink: ModelStringInput? = nil, and: [ModelCollegeFilterInput?]? = nil, or: [ModelCollegeFilterInput?]? = nil, not: ModelCollegeFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "name": name, "imageLink": imageLink, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var imageLink: ModelStringInput? {
    get {
      return graphQLMap["imageLink"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "imageLink")
    }
  }

  public var and: [ModelCollegeFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelCollegeFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelCollegeFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelCollegeFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelCollegeFilterInput? {
    get {
      return graphQLMap["not"] as! ModelCollegeFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelNewMeetFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, meetId: ModelIntInput? = nil, name: ModelStringInput? = nil, organization: ModelStringInput? = nil, startDate: ModelStringInput? = nil, endDate: ModelStringInput? = nil, city: ModelStringInput? = nil, state: ModelStringInput? = nil, country: ModelStringInput? = nil, link: ModelStringInput? = nil, meetType: ModelIntInput? = nil, and: [ModelNewMeetFilterInput?]? = nil, or: [ModelNewMeetFilterInput?]? = nil, not: ModelNewMeetFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var meetId: ModelIntInput? {
    get {
      return graphQLMap["meetID"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetID")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var organization: ModelStringInput? {
    get {
      return graphQLMap["organization"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "organization")
    }
  }

  public var startDate: ModelStringInput? {
    get {
      return graphQLMap["startDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "startDate")
    }
  }

  public var endDate: ModelStringInput? {
    get {
      return graphQLMap["endDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "endDate")
    }
  }

  public var city: ModelStringInput? {
    get {
      return graphQLMap["city"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var state: ModelStringInput? {
    get {
      return graphQLMap["state"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var country: ModelStringInput? {
    get {
      return graphQLMap["country"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  public var link: ModelStringInput? {
    get {
      return graphQLMap["link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var meetType: ModelIntInput? {
    get {
      return graphQLMap["meetType"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetType")
    }
  }

  public var and: [ModelNewMeetFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewMeetFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewMeetFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewMeetFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewMeetFilterInput? {
    get {
      return graphQLMap["not"] as! ModelNewMeetFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelNewEventFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, date: ModelStringInput? = nil, link: ModelStringInput? = nil, numEntries: ModelIntInput? = nil, newmeetId: ModelIDInput? = nil, and: [ModelNewEventFilterInput?]? = nil, or: [ModelNewEventFilterInput?]? = nil, not: ModelNewEventFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var date: ModelStringInput? {
    get {
      return graphQLMap["date"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "date")
    }
  }

  public var link: ModelStringInput? {
    get {
      return graphQLMap["link"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var numEntries: ModelIntInput? {
    get {
      return graphQLMap["numEntries"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "numEntries")
    }
  }

  public var newmeetId: ModelIDInput? {
    get {
      return graphQLMap["newmeetID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newmeetID")
    }
  }

  public var and: [ModelNewEventFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelNewEventFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelNewEventFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelNewEventFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelNewEventFilterInput? {
    get {
      return graphQLMap["not"] as! ModelNewEventFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelDiveFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, number: ModelStringInput? = nil, name: ModelStringInput? = nil, height: ModelFloatInput? = nil, netScore: ModelFloatInput? = nil, dd: ModelFloatInput? = nil, totalScore: ModelFloatInput? = nil, newathleteId: ModelIDInput? = nil, neweventId: ModelIDInput? = nil, and: [ModelDiveFilterInput?]? = nil, or: [ModelDiveFilterInput?]? = nil, not: ModelDiveFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var number: ModelStringInput? {
    get {
      return graphQLMap["number"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "number")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var height: ModelFloatInput? {
    get {
      return graphQLMap["height"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "height")
    }
  }

  public var netScore: ModelFloatInput? {
    get {
      return graphQLMap["netScore"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "netScore")
    }
  }

  public var dd: ModelFloatInput? {
    get {
      return graphQLMap["dd"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "dd")
    }
  }

  public var totalScore: ModelFloatInput? {
    get {
      return graphQLMap["totalScore"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalScore")
    }
  }

  public var newathleteId: ModelIDInput? {
    get {
      return graphQLMap["newathleteID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newathleteID")
    }
  }

  public var neweventId: ModelIDInput? {
    get {
      return graphQLMap["neweventID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "neweventID")
    }
  }

  public var and: [ModelDiveFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelDiveFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelDiveFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelDiveFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelDiveFilterInput? {
    get {
      return graphQLMap["not"] as! ModelDiveFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelJudgeScoreFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, score: ModelFloatInput? = nil, diveId: ModelIDInput? = nil, and: [ModelJudgeScoreFilterInput?]? = nil, or: [ModelJudgeScoreFilterInput?]? = nil, not: ModelJudgeScoreFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "score": score, "diveID": diveId, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var score: ModelFloatInput? {
    get {
      return graphQLMap["score"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "score")
    }
  }

  public var diveId: ModelIDInput? {
    get {
      return graphQLMap["diveID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveID")
    }
  }

  public var and: [ModelJudgeScoreFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelJudgeScoreFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelJudgeScoreFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelJudgeScoreFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelJudgeScoreFilterInput? {
    get {
      return graphQLMap["not"] as! ModelJudgeScoreFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelMessageFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, body: ModelStringInput? = nil, creationDate: ModelStringInput? = nil, and: [ModelMessageFilterInput?]? = nil, or: [ModelMessageFilterInput?]? = nil, not: ModelMessageFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "body": body, "creationDate": creationDate, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var body: ModelStringInput? {
    get {
      return graphQLMap["body"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "body")
    }
  }

  public var creationDate: ModelStringInput? {
    get {
      return graphQLMap["creationDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var and: [ModelMessageFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMessageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMessageFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMessageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMessageFilterInput? {
    get {
      return graphQLMap["not"] as! ModelMessageFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelDiveMeetsDiverFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, finaAge: ModelIntInput? = nil, hsGradYear: ModelIntInput? = nil, springboardRating: ModelFloatInput? = nil, platformRating: ModelFloatInput? = nil, totalRating: ModelFloatInput? = nil, and: [ModelDiveMeetsDiverFilterInput?]? = nil, or: [ModelDiveMeetsDiverFilterInput?]? = nil, not: ModelDiveMeetsDiverFilterInput? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "and": and, "or": or, "not": not, "_deleted": deleted]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["firstName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["lastName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var finaAge: ModelIntInput? {
    get {
      return graphQLMap["finaAge"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "finaAge")
    }
  }

  public var hsGradYear: ModelIntInput? {
    get {
      return graphQLMap["hsGradYear"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hsGradYear")
    }
  }

  public var springboardRating: ModelFloatInput? {
    get {
      return graphQLMap["springboardRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: ModelFloatInput? {
    get {
      return graphQLMap["platformRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: ModelFloatInput? {
    get {
      return graphQLMap["totalRating"] as! ModelFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var and: [ModelDiveMeetsDiverFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelDiveMeetsDiverFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelDiveMeetsDiverFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelDiveMeetsDiverFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelDiveMeetsDiverFilterInput? {
    get {
      return graphQLMap["not"] as! ModelDiveMeetsDiverFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionUserSavedPostFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, newuserId: ModelSubscriptionIDInput? = nil, postId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionUserSavedPostFilterInput?]? = nil, or: [ModelSubscriptionUserSavedPostFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "newuserID": newuserId, "postID": postId, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var newuserId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["newuserID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var postId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["postID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var and: [ModelSubscriptionUserSavedPostFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionUserSavedPostFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionUserSavedPostFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionUserSavedPostFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionIDInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: GraphQLID? = nil, eq: GraphQLID? = nil, le: GraphQLID? = nil, lt: GraphQLID? = nil, ge: GraphQLID? = nil, gt: GraphQLID? = nil, contains: GraphQLID? = nil, notContains: GraphQLID? = nil, between: [GraphQLID?]? = nil, beginsWith: GraphQLID? = nil, `in`: [GraphQLID?]? = nil, notIn: [GraphQLID?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "in": `in`, "notIn": notIn]
  }

  public var ne: GraphQLID? {
    get {
      return graphQLMap["ne"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: GraphQLID? {
    get {
      return graphQLMap["eq"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: GraphQLID? {
    get {
      return graphQLMap["le"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: GraphQLID? {
    get {
      return graphQLMap["lt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: GraphQLID? {
    get {
      return graphQLMap["ge"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: GraphQLID? {
    get {
      return graphQLMap["gt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: GraphQLID? {
    get {
      return graphQLMap["contains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: GraphQLID? {
    get {
      return graphQLMap["notContains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [GraphQLID?]? {
    get {
      return graphQLMap["between"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: GraphQLID? {
    get {
      return graphQLMap["beginsWith"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var `in`: [GraphQLID?]? {
    get {
      return graphQLMap["in"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "in")
    }
  }

  public var notIn: [GraphQLID?]? {
    get {
      return graphQLMap["notIn"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notIn")
    }
  }
}

public struct ModelSubscriptionPostFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, caption: ModelSubscriptionStringInput? = nil, creationDate: ModelSubscriptionStringInput? = nil, newuserId: ModelSubscriptionIDInput? = nil, isCoachesOnly: ModelSubscriptionBooleanInput? = nil, and: [ModelSubscriptionPostFilterInput?]? = nil, or: [ModelSubscriptionPostFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "caption": caption, "creationDate": creationDate, "newuserID": newuserId, "isCoachesOnly": isCoachesOnly, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var caption: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["caption"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "caption")
    }
  }

  public var creationDate: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["creationDate"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var newuserId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["newuserID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var isCoachesOnly: ModelSubscriptionBooleanInput? {
    get {
      return graphQLMap["isCoachesOnly"] as! ModelSubscriptionBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isCoachesOnly")
    }
  }

  public var and: [ModelSubscriptionPostFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionPostFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionPostFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionPostFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionStringInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: String? = nil, eq: String? = nil, le: String? = nil, lt: String? = nil, ge: String? = nil, gt: String? = nil, contains: String? = nil, notContains: String? = nil, between: [String?]? = nil, beginsWith: String? = nil, `in`: [String?]? = nil, notIn: [String?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "in": `in`, "notIn": notIn]
  }

  public var ne: String? {
    get {
      return graphQLMap["ne"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: String? {
    get {
      return graphQLMap["eq"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: String? {
    get {
      return graphQLMap["le"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: String? {
    get {
      return graphQLMap["lt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: String? {
    get {
      return graphQLMap["ge"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: String? {
    get {
      return graphQLMap["gt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: String? {
    get {
      return graphQLMap["contains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: String? {
    get {
      return graphQLMap["notContains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [String?]? {
    get {
      return graphQLMap["between"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: String? {
    get {
      return graphQLMap["beginsWith"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var `in`: [String?]? {
    get {
      return graphQLMap["in"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "in")
    }
  }

  public var notIn: [String?]? {
    get {
      return graphQLMap["notIn"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notIn")
    }
  }
}

public struct ModelSubscriptionBooleanInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Bool? = nil, eq: Bool? = nil) {
    graphQLMap = ["ne": ne, "eq": eq]
  }

  public var ne: Bool? {
    get {
      return graphQLMap["ne"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Bool? {
    get {
      return graphQLMap["eq"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }
}

public struct ModelSubscriptionNewImageFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, s3key: ModelSubscriptionStringInput? = nil, uploadDate: ModelSubscriptionStringInput? = nil, postId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionNewImageFilterInput?]? = nil, or: [ModelSubscriptionNewImageFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var s3key: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["s3key"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["uploadDate"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["postID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var and: [ModelSubscriptionNewImageFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionNewImageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionNewImageFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionNewImageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionMessageNewUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, isSender: ModelSubscriptionBooleanInput? = nil, newuserId: ModelSubscriptionIDInput? = nil, messageId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionMessageNewUserFilterInput?]? = nil, or: [ModelSubscriptionMessageNewUserFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var isSender: ModelSubscriptionBooleanInput? {
    get {
      return graphQLMap["isSender"] as! ModelSubscriptionBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isSender")
    }
  }

  public var newuserId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["newuserID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newuserID")
    }
  }

  public var messageId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["messageID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "messageID")
    }
  }

  public var and: [ModelSubscriptionMessageNewUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionMessageNewUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionMessageNewUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionMessageNewUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionNewUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, firstName: ModelSubscriptionStringInput? = nil, lastName: ModelSubscriptionStringInput? = nil, email: ModelSubscriptionStringInput? = nil, phone: ModelSubscriptionStringInput? = nil, diveMeetsId: ModelSubscriptionStringInput? = nil, accountType: ModelSubscriptionStringInput? = nil, tokens: ModelSubscriptionStringInput? = nil, favoritesIds: ModelSubscriptionStringInput? = nil, and: [ModelSubscriptionNewUserFilterInput?]? = nil, or: [ModelSubscriptionNewUserFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var firstName: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["firstName"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["lastName"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var email: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["email"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var phone: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["phone"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var diveMeetsId: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["diveMeetsID"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveMeetsID")
    }
  }

  public var accountType: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["accountType"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "accountType")
    }
  }

  public var tokens: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["tokens"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokens")
    }
  }

  public var favoritesIds: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["favoritesIds"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "favoritesIds")
    }
  }

  public var and: [ModelSubscriptionNewUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionNewUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionNewUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionNewUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionNewAthleteFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, heightFeet: ModelSubscriptionIntInput? = nil, heightInches: ModelSubscriptionIntInput? = nil, weight: ModelSubscriptionIntInput? = nil, weightUnit: ModelSubscriptionStringInput? = nil, gender: ModelSubscriptionStringInput? = nil, age: ModelSubscriptionIntInput? = nil, graduationYear: ModelSubscriptionIntInput? = nil, highSchool: ModelSubscriptionStringInput? = nil, hometown: ModelSubscriptionStringInput? = nil, springboardRating: ModelSubscriptionFloatInput? = nil, platformRating: ModelSubscriptionFloatInput? = nil, totalRating: ModelSubscriptionFloatInput? = nil, collegeId: ModelSubscriptionIDInput? = nil, newteamId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionNewAthleteFilterInput?]? = nil, or: [ModelSubscriptionNewAthleteFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var heightFeet: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["heightFeet"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightFeet")
    }
  }

  public var heightInches: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["heightInches"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "heightInches")
    }
  }

  public var weight: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["weight"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weight")
    }
  }

  public var weightUnit: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["weightUnit"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "weightUnit")
    }
  }

  public var gender: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["gender"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var age: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["age"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "age")
    }
  }

  public var graduationYear: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["graduationYear"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "graduationYear")
    }
  }

  public var highSchool: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["highSchool"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "highSchool")
    }
  }

  public var hometown: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["hometown"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hometown")
    }
  }

  public var springboardRating: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["springboardRating"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["platformRating"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["totalRating"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var collegeId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["collegeID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "collegeID")
    }
  }

  public var newteamId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["newteamID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newteamID")
    }
  }

  public var and: [ModelSubscriptionNewAthleteFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionNewAthleteFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionNewAthleteFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionNewAthleteFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionIntInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil, `in`: [Int?]? = nil, notIn: [Int?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "in": `in`, "notIn": notIn]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var `in`: [Int?]? {
    get {
      return graphQLMap["in"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "in")
    }
  }

  public var notIn: [Int?]? {
    get {
      return graphQLMap["notIn"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notIn")
    }
  }
}

public struct ModelSubscriptionFloatInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Double? = nil, eq: Double? = nil, le: Double? = nil, lt: Double? = nil, ge: Double? = nil, gt: Double? = nil, between: [Double?]? = nil, `in`: [Double?]? = nil, notIn: [Double?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "in": `in`, "notIn": notIn]
  }

  public var ne: Double? {
    get {
      return graphQLMap["ne"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Double? {
    get {
      return graphQLMap["eq"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Double? {
    get {
      return graphQLMap["le"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Double? {
    get {
      return graphQLMap["lt"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Double? {
    get {
      return graphQLMap["ge"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Double? {
    get {
      return graphQLMap["gt"] as! Double?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Double?]? {
    get {
      return graphQLMap["between"] as! [Double?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var `in`: [Double?]? {
    get {
      return graphQLMap["in"] as! [Double?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "in")
    }
  }

  public var notIn: [Double?]? {
    get {
      return graphQLMap["notIn"] as! [Double?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notIn")
    }
  }
}

public struct ModelSubscriptionVideoFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, s3key: ModelSubscriptionStringInput? = nil, uploadDate: ModelSubscriptionStringInput? = nil, postId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionVideoFilterInput?]? = nil, or: [ModelSubscriptionVideoFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var s3key: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["s3key"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "s3key")
    }
  }

  public var uploadDate: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["uploadDate"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "uploadDate")
    }
  }

  public var postId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["postID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postID")
    }
  }

  public var and: [ModelSubscriptionVideoFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionVideoFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionVideoFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionVideoFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionCoachUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionCoachUserFilterInput?]? = nil, or: [ModelSubscriptionCoachUserFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var and: [ModelSubscriptionCoachUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionCoachUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionCoachUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionCoachUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionNewTeamFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, name: ModelSubscriptionStringInput? = nil, and: [ModelSubscriptionNewTeamFilterInput?]? = nil, or: [ModelSubscriptionNewTeamFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "name": name, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["name"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var and: [ModelSubscriptionNewTeamFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionNewTeamFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionNewTeamFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionNewTeamFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionCollegeFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, name: ModelSubscriptionStringInput? = nil, imageLink: ModelSubscriptionStringInput? = nil, and: [ModelSubscriptionCollegeFilterInput?]? = nil, or: [ModelSubscriptionCollegeFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "name": name, "imageLink": imageLink, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["name"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var imageLink: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["imageLink"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "imageLink")
    }
  }

  public var and: [ModelSubscriptionCollegeFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionCollegeFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionCollegeFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionCollegeFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionNewMeetFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, meetId: ModelSubscriptionIntInput? = nil, name: ModelSubscriptionStringInput? = nil, organization: ModelSubscriptionStringInput? = nil, startDate: ModelSubscriptionStringInput? = nil, endDate: ModelSubscriptionStringInput? = nil, city: ModelSubscriptionStringInput? = nil, state: ModelSubscriptionStringInput? = nil, country: ModelSubscriptionStringInput? = nil, link: ModelSubscriptionStringInput? = nil, meetType: ModelSubscriptionIntInput? = nil, and: [ModelSubscriptionNewMeetFilterInput?]? = nil, or: [ModelSubscriptionNewMeetFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var meetId: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["meetID"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetID")
    }
  }

  public var name: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["name"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var organization: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["organization"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "organization")
    }
  }

  public var startDate: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["startDate"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "startDate")
    }
  }

  public var endDate: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["endDate"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "endDate")
    }
  }

  public var city: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["city"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var state: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["state"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var country: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["country"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  public var link: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["link"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var meetType: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["meetType"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "meetType")
    }
  }

  public var and: [ModelSubscriptionNewMeetFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionNewMeetFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionNewMeetFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionNewMeetFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionNewEventFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, name: ModelSubscriptionStringInput? = nil, date: ModelSubscriptionStringInput? = nil, link: ModelSubscriptionStringInput? = nil, numEntries: ModelSubscriptionIntInput? = nil, newmeetId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionNewEventFilterInput?]? = nil, or: [ModelSubscriptionNewEventFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["name"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var date: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["date"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "date")
    }
  }

  public var link: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["link"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "link")
    }
  }

  public var numEntries: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["numEntries"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "numEntries")
    }
  }

  public var newmeetId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["newmeetID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newmeetID")
    }
  }

  public var and: [ModelSubscriptionNewEventFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionNewEventFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionNewEventFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionNewEventFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionDiveFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, number: ModelSubscriptionStringInput? = nil, name: ModelSubscriptionStringInput? = nil, height: ModelSubscriptionFloatInput? = nil, netScore: ModelSubscriptionFloatInput? = nil, dd: ModelSubscriptionFloatInput? = nil, totalScore: ModelSubscriptionFloatInput? = nil, newathleteId: ModelSubscriptionIDInput? = nil, neweventId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionDiveFilterInput?]? = nil, or: [ModelSubscriptionDiveFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var number: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["number"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "number")
    }
  }

  public var name: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["name"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var height: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["height"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "height")
    }
  }

  public var netScore: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["netScore"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "netScore")
    }
  }

  public var dd: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["dd"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "dd")
    }
  }

  public var totalScore: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["totalScore"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalScore")
    }
  }

  public var newathleteId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["newathleteID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newathleteID")
    }
  }

  public var neweventId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["neweventID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "neweventID")
    }
  }

  public var and: [ModelSubscriptionDiveFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionDiveFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionDiveFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionDiveFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionJudgeScoreFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, score: ModelSubscriptionFloatInput? = nil, diveId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionJudgeScoreFilterInput?]? = nil, or: [ModelSubscriptionJudgeScoreFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "score": score, "diveID": diveId, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var score: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["score"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "score")
    }
  }

  public var diveId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["diveID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "diveID")
    }
  }

  public var and: [ModelSubscriptionJudgeScoreFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionJudgeScoreFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionJudgeScoreFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionJudgeScoreFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionMessageFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, body: ModelSubscriptionStringInput? = nil, creationDate: ModelSubscriptionStringInput? = nil, and: [ModelSubscriptionMessageFilterInput?]? = nil, or: [ModelSubscriptionMessageFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "body": body, "creationDate": creationDate, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var body: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["body"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "body")
    }
  }

  public var creationDate: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["creationDate"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "creationDate")
    }
  }

  public var and: [ModelSubscriptionMessageFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionMessageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionMessageFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionMessageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public struct ModelSubscriptionDiveMeetsDiverFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, firstName: ModelSubscriptionStringInput? = nil, lastName: ModelSubscriptionStringInput? = nil, finaAge: ModelSubscriptionIntInput? = nil, hsGradYear: ModelSubscriptionIntInput? = nil, springboardRating: ModelSubscriptionFloatInput? = nil, platformRating: ModelSubscriptionFloatInput? = nil, totalRating: ModelSubscriptionFloatInput? = nil, and: [ModelSubscriptionDiveMeetsDiverFilterInput?]? = nil, or: [ModelSubscriptionDiveMeetsDiverFilterInput?]? = nil, deleted: ModelBooleanInput? = nil) {
    graphQLMap = ["id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "and": and, "or": or, "_deleted": deleted]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var firstName: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["firstName"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["lastName"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var finaAge: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["finaAge"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "finaAge")
    }
  }

  public var hsGradYear: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["hsGradYear"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hsGradYear")
    }
  }

  public var springboardRating: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["springboardRating"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "springboardRating")
    }
  }

  public var platformRating: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["platformRating"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "platformRating")
    }
  }

  public var totalRating: ModelSubscriptionFloatInput? {
    get {
      return graphQLMap["totalRating"] as! ModelSubscriptionFloatInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalRating")
    }
  }

  public var and: [ModelSubscriptionDiveMeetsDiverFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionDiveMeetsDiverFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionDiveMeetsDiverFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionDiveMeetsDiverFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var deleted: ModelBooleanInput? {
    get {
      return graphQLMap["_deleted"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_deleted")
    }
  }
}

public final class CreateUserSavedPostMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateUserSavedPost($input: CreateUserSavedPostInput!, $condition: ModelUserSavedPostConditionInput) {\n  createUserSavedPost(input: $input, condition: $condition) {\n    __typename\n    id\n    newuserID\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateUserSavedPostInput
  public var condition: ModelUserSavedPostConditionInput?

  public init(input: CreateUserSavedPostInput, condition: ModelUserSavedPostConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createUserSavedPost", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateUserSavedPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createUserSavedPost: CreateUserSavedPost? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createUserSavedPost": createUserSavedPost.flatMap { $0.snapshot }])
    }

    public var createUserSavedPost: CreateUserSavedPost? {
      get {
        return (snapshot["createUserSavedPost"] as? Snapshot).flatMap { CreateUserSavedPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createUserSavedPost")
      }
    }

    public struct CreateUserSavedPost: GraphQLSelectionSet {
      public static let possibleTypes = ["UserSavedPost"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class UpdateUserSavedPostMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateUserSavedPost($input: UpdateUserSavedPostInput!, $condition: ModelUserSavedPostConditionInput) {\n  updateUserSavedPost(input: $input, condition: $condition) {\n    __typename\n    id\n    newuserID\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateUserSavedPostInput
  public var condition: ModelUserSavedPostConditionInput?

  public init(input: UpdateUserSavedPostInput, condition: ModelUserSavedPostConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateUserSavedPost", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateUserSavedPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateUserSavedPost: UpdateUserSavedPost? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateUserSavedPost": updateUserSavedPost.flatMap { $0.snapshot }])
    }

    public var updateUserSavedPost: UpdateUserSavedPost? {
      get {
        return (snapshot["updateUserSavedPost"] as? Snapshot).flatMap { UpdateUserSavedPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateUserSavedPost")
      }
    }

    public struct UpdateUserSavedPost: GraphQLSelectionSet {
      public static let possibleTypes = ["UserSavedPost"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class DeleteUserSavedPostMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteUserSavedPost($input: DeleteUserSavedPostInput!, $condition: ModelUserSavedPostConditionInput) {\n  deleteUserSavedPost(input: $input, condition: $condition) {\n    __typename\n    id\n    newuserID\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteUserSavedPostInput
  public var condition: ModelUserSavedPostConditionInput?

  public init(input: DeleteUserSavedPostInput, condition: ModelUserSavedPostConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteUserSavedPost", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteUserSavedPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteUserSavedPost: DeleteUserSavedPost? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteUserSavedPost": deleteUserSavedPost.flatMap { $0.snapshot }])
    }

    public var deleteUserSavedPost: DeleteUserSavedPost? {
      get {
        return (snapshot["deleteUserSavedPost"] as? Snapshot).flatMap { DeleteUserSavedPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteUserSavedPost")
      }
    }

    public struct DeleteUserSavedPost: GraphQLSelectionSet {
      public static let possibleTypes = ["UserSavedPost"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class CreatePostMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreatePost($input: CreatePostInput!, $condition: ModelPostConditionInput) {\n  createPost(input: $input, condition: $condition) {\n    __typename\n    id\n    caption\n    creationDate\n    images {\n      __typename\n      nextToken\n      startedAt\n    }\n    videos {\n      __typename\n      nextToken\n      startedAt\n    }\n    newuserID\n    usersSaving {\n      __typename\n      nextToken\n      startedAt\n    }\n    isCoachesOnly\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreatePostInput
  public var condition: ModelPostConditionInput?

  public init(input: CreatePostInput, condition: ModelPostConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createPost", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreatePost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createPost: CreatePost? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createPost": createPost.flatMap { $0.snapshot }])
    }

    public var createPost: CreatePost? {
      get {
        return (snapshot["createPost"] as? Snapshot).flatMap { CreatePost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createPost")
      }
    }

    public struct CreatePost: GraphQLSelectionSet {
      public static let possibleTypes = ["Post"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("caption", type: .scalar(String.self)),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("images", type: .object(Image.selections)),
        GraphQLField("videos", type: .object(Video.selections)),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("usersSaving", type: .object(UsersSaving.selections)),
        GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, caption: String? = nil, creationDate: String, images: Image? = nil, videos: Video? = nil, newuserId: GraphQLID, usersSaving: UsersSaving? = nil, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "images": images.flatMap { $0.snapshot }, "videos": videos.flatMap { $0.snapshot }, "newuserID": newuserId, "usersSaving": usersSaving.flatMap { $0.snapshot }, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var caption: String? {
        get {
          return snapshot["caption"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "caption")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var images: Image? {
        get {
          return (snapshot["images"] as? Snapshot).flatMap { Image(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "images")
        }
      }

      public var videos: Video? {
        get {
          return (snapshot["videos"] as? Snapshot).flatMap { Video(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "videos")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var usersSaving: UsersSaving? {
        get {
          return (snapshot["usersSaving"] as? Snapshot).flatMap { UsersSaving(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "usersSaving")
        }
      }

      public var isCoachesOnly: Bool {
        get {
          return snapshot["isCoachesOnly"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCoachesOnly")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewImageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewImageConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVideoConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVideoConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct UsersSaving: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class UpdatePostMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdatePost($input: UpdatePostInput!, $condition: ModelPostConditionInput) {\n  updatePost(input: $input, condition: $condition) {\n    __typename\n    id\n    caption\n    creationDate\n    images {\n      __typename\n      nextToken\n      startedAt\n    }\n    videos {\n      __typename\n      nextToken\n      startedAt\n    }\n    newuserID\n    usersSaving {\n      __typename\n      nextToken\n      startedAt\n    }\n    isCoachesOnly\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdatePostInput
  public var condition: ModelPostConditionInput?

  public init(input: UpdatePostInput, condition: ModelPostConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updatePost", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdatePost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updatePost: UpdatePost? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updatePost": updatePost.flatMap { $0.snapshot }])
    }

    public var updatePost: UpdatePost? {
      get {
        return (snapshot["updatePost"] as? Snapshot).flatMap { UpdatePost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updatePost")
      }
    }

    public struct UpdatePost: GraphQLSelectionSet {
      public static let possibleTypes = ["Post"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("caption", type: .scalar(String.self)),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("images", type: .object(Image.selections)),
        GraphQLField("videos", type: .object(Video.selections)),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("usersSaving", type: .object(UsersSaving.selections)),
        GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, caption: String? = nil, creationDate: String, images: Image? = nil, videos: Video? = nil, newuserId: GraphQLID, usersSaving: UsersSaving? = nil, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "images": images.flatMap { $0.snapshot }, "videos": videos.flatMap { $0.snapshot }, "newuserID": newuserId, "usersSaving": usersSaving.flatMap { $0.snapshot }, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var caption: String? {
        get {
          return snapshot["caption"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "caption")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var images: Image? {
        get {
          return (snapshot["images"] as? Snapshot).flatMap { Image(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "images")
        }
      }

      public var videos: Video? {
        get {
          return (snapshot["videos"] as? Snapshot).flatMap { Video(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "videos")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var usersSaving: UsersSaving? {
        get {
          return (snapshot["usersSaving"] as? Snapshot).flatMap { UsersSaving(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "usersSaving")
        }
      }

      public var isCoachesOnly: Bool {
        get {
          return snapshot["isCoachesOnly"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCoachesOnly")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewImageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewImageConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVideoConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVideoConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct UsersSaving: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class DeletePostMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeletePost($input: DeletePostInput!, $condition: ModelPostConditionInput) {\n  deletePost(input: $input, condition: $condition) {\n    __typename\n    id\n    caption\n    creationDate\n    images {\n      __typename\n      nextToken\n      startedAt\n    }\n    videos {\n      __typename\n      nextToken\n      startedAt\n    }\n    newuserID\n    usersSaving {\n      __typename\n      nextToken\n      startedAt\n    }\n    isCoachesOnly\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeletePostInput
  public var condition: ModelPostConditionInput?

  public init(input: DeletePostInput, condition: ModelPostConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deletePost", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeletePost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deletePost: DeletePost? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deletePost": deletePost.flatMap { $0.snapshot }])
    }

    public var deletePost: DeletePost? {
      get {
        return (snapshot["deletePost"] as? Snapshot).flatMap { DeletePost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deletePost")
      }
    }

    public struct DeletePost: GraphQLSelectionSet {
      public static let possibleTypes = ["Post"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("caption", type: .scalar(String.self)),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("images", type: .object(Image.selections)),
        GraphQLField("videos", type: .object(Video.selections)),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("usersSaving", type: .object(UsersSaving.selections)),
        GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, caption: String? = nil, creationDate: String, images: Image? = nil, videos: Video? = nil, newuserId: GraphQLID, usersSaving: UsersSaving? = nil, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "images": images.flatMap { $0.snapshot }, "videos": videos.flatMap { $0.snapshot }, "newuserID": newuserId, "usersSaving": usersSaving.flatMap { $0.snapshot }, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var caption: String? {
        get {
          return snapshot["caption"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "caption")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var images: Image? {
        get {
          return (snapshot["images"] as? Snapshot).flatMap { Image(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "images")
        }
      }

      public var videos: Video? {
        get {
          return (snapshot["videos"] as? Snapshot).flatMap { Video(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "videos")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var usersSaving: UsersSaving? {
        get {
          return (snapshot["usersSaving"] as? Snapshot).flatMap { UsersSaving(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "usersSaving")
        }
      }

      public var isCoachesOnly: Bool {
        get {
          return snapshot["isCoachesOnly"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCoachesOnly")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewImageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewImageConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVideoConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVideoConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct UsersSaving: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class CreateNewImageMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateNewImage($input: CreateNewImageInput!, $condition: ModelNewImageConditionInput) {\n  createNewImage(input: $input, condition: $condition) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateNewImageInput
  public var condition: ModelNewImageConditionInput?

  public init(input: CreateNewImageInput, condition: ModelNewImageConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createNewImage", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateNewImage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createNewImage: CreateNewImage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createNewImage": createNewImage.flatMap { $0.snapshot }])
    }

    public var createNewImage: CreateNewImage? {
      get {
        return (snapshot["createNewImage"] as? Snapshot).flatMap { CreateNewImage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createNewImage")
      }
    }

    public struct CreateNewImage: GraphQLSelectionSet {
      public static let possibleTypes = ["NewImage"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class UpdateNewImageMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateNewImage($input: UpdateNewImageInput!, $condition: ModelNewImageConditionInput) {\n  updateNewImage(input: $input, condition: $condition) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateNewImageInput
  public var condition: ModelNewImageConditionInput?

  public init(input: UpdateNewImageInput, condition: ModelNewImageConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateNewImage", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateNewImage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateNewImage: UpdateNewImage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateNewImage": updateNewImage.flatMap { $0.snapshot }])
    }

    public var updateNewImage: UpdateNewImage? {
      get {
        return (snapshot["updateNewImage"] as? Snapshot).flatMap { UpdateNewImage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateNewImage")
      }
    }

    public struct UpdateNewImage: GraphQLSelectionSet {
      public static let possibleTypes = ["NewImage"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class DeleteNewImageMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteNewImage($input: DeleteNewImageInput!, $condition: ModelNewImageConditionInput) {\n  deleteNewImage(input: $input, condition: $condition) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteNewImageInput
  public var condition: ModelNewImageConditionInput?

  public init(input: DeleteNewImageInput, condition: ModelNewImageConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteNewImage", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteNewImage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteNewImage: DeleteNewImage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteNewImage": deleteNewImage.flatMap { $0.snapshot }])
    }

    public var deleteNewImage: DeleteNewImage? {
      get {
        return (snapshot["deleteNewImage"] as? Snapshot).flatMap { DeleteNewImage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteNewImage")
      }
    }

    public struct DeleteNewImage: GraphQLSelectionSet {
      public static let possibleTypes = ["NewImage"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class CreateMessageNewUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateMessageNewUser($input: CreateMessageNewUserInput!, $condition: ModelMessageNewUserConditionInput) {\n  createMessageNewUser(input: $input, condition: $condition) {\n    __typename\n    id\n    isSender\n    newuserID\n    messageID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateMessageNewUserInput
  public var condition: ModelMessageNewUserConditionInput?

  public init(input: CreateMessageNewUserInput, condition: ModelMessageNewUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createMessageNewUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateMessageNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createMessageNewUser: CreateMessageNewUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createMessageNewUser": createMessageNewUser.flatMap { $0.snapshot }])
    }

    public var createMessageNewUser: CreateMessageNewUser? {
      get {
        return (snapshot["createMessageNewUser"] as? Snapshot).flatMap { CreateMessageNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createMessageNewUser")
      }
    }

    public struct CreateMessageNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["MessageNewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var isSender: Bool {
        get {
          return snapshot["isSender"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSender")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var messageId: GraphQLID {
        get {
          return snapshot["messageID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "messageID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class UpdateMessageNewUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateMessageNewUser($input: UpdateMessageNewUserInput!, $condition: ModelMessageNewUserConditionInput) {\n  updateMessageNewUser(input: $input, condition: $condition) {\n    __typename\n    id\n    isSender\n    newuserID\n    messageID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateMessageNewUserInput
  public var condition: ModelMessageNewUserConditionInput?

  public init(input: UpdateMessageNewUserInput, condition: ModelMessageNewUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateMessageNewUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateMessageNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateMessageNewUser: UpdateMessageNewUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateMessageNewUser": updateMessageNewUser.flatMap { $0.snapshot }])
    }

    public var updateMessageNewUser: UpdateMessageNewUser? {
      get {
        return (snapshot["updateMessageNewUser"] as? Snapshot).flatMap { UpdateMessageNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateMessageNewUser")
      }
    }

    public struct UpdateMessageNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["MessageNewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var isSender: Bool {
        get {
          return snapshot["isSender"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSender")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var messageId: GraphQLID {
        get {
          return snapshot["messageID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "messageID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class DeleteMessageNewUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteMessageNewUser($input: DeleteMessageNewUserInput!, $condition: ModelMessageNewUserConditionInput) {\n  deleteMessageNewUser(input: $input, condition: $condition) {\n    __typename\n    id\n    isSender\n    newuserID\n    messageID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteMessageNewUserInput
  public var condition: ModelMessageNewUserConditionInput?

  public init(input: DeleteMessageNewUserInput, condition: ModelMessageNewUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteMessageNewUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteMessageNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteMessageNewUser: DeleteMessageNewUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteMessageNewUser": deleteMessageNewUser.flatMap { $0.snapshot }])
    }

    public var deleteMessageNewUser: DeleteMessageNewUser? {
      get {
        return (snapshot["deleteMessageNewUser"] as? Snapshot).flatMap { DeleteMessageNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteMessageNewUser")
      }
    }

    public struct DeleteMessageNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["MessageNewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var isSender: Bool {
        get {
          return snapshot["isSender"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSender")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var messageId: GraphQLID {
        get {
          return snapshot["messageID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "messageID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class CreateNewUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateNewUser($input: CreateNewUserInput!, $condition: ModelNewUserConditionInput) {\n  createNewUser(input: $input, condition: $condition) {\n    __typename\n    id\n    firstName\n    lastName\n    email\n    phone\n    diveMeetsID\n    accountType\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    posts {\n      __typename\n      nextToken\n      startedAt\n    }\n    tokens\n    savedPosts {\n      __typename\n      nextToken\n      startedAt\n    }\n    favoritesIds\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newUserAthleteId\n    newUserCoachId\n  }\n}"

  public var input: CreateNewUserInput
  public var condition: ModelNewUserConditionInput?

  public init(input: CreateNewUserInput, condition: ModelNewUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createNewUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createNewUser: CreateNewUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createNewUser": createNewUser.flatMap { $0.snapshot }])
    }

    public var createNewUser: CreateNewUser? {
      get {
        return (snapshot["createNewUser"] as? Snapshot).flatMap { CreateNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createNewUser")
      }
    }

    public struct CreateNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["NewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("diveMeetsID", type: .scalar(String.self)),
        GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
        GraphQLField("athlete", type: .object(Athlete.selections)),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("posts", type: .object(Post.selections)),
        GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("savedPosts", type: .object(SavedPost.selections)),
        GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
        GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, athlete: Athlete? = nil, coach: Coach? = nil, posts: Post? = nil, tokens: [String], savedPosts: SavedPost? = nil, favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "athlete": athlete.flatMap { $0.snapshot }, "coach": coach.flatMap { $0.snapshot }, "posts": posts.flatMap { $0.snapshot }, "tokens": tokens, "savedPosts": savedPosts.flatMap { $0.snapshot }, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var diveMeetsId: String? {
        get {
          return snapshot["diveMeetsID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveMeetsID")
        }
      }

      public var accountType: String {
        get {
          return snapshot["accountType"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "accountType")
        }
      }

      public var athlete: Athlete? {
        get {
          return (snapshot["athlete"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athlete")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var posts: Post? {
        get {
          return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "posts")
        }
      }

      public var tokens: [String] {
        get {
          return snapshot["tokens"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "tokens")
        }
      }

      public var savedPosts: SavedPost? {
        get {
          return (snapshot["savedPosts"] as? Snapshot).flatMap { SavedPost(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "savedPosts")
        }
      }

      public var favoritesIds: [String] {
        get {
          return snapshot["favoritesIds"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "favoritesIds")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newUserAthleteId: GraphQLID? {
        get {
          return snapshot["newUserAthleteId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserAthleteId")
        }
      }

      public var newUserCoachId: GraphQLID? {
        get {
          return snapshot["newUserCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserCoachId")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Post: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct SavedPost: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class UpdateNewUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateNewUser($input: UpdateNewUserInput!, $condition: ModelNewUserConditionInput) {\n  updateNewUser(input: $input, condition: $condition) {\n    __typename\n    id\n    firstName\n    lastName\n    email\n    phone\n    diveMeetsID\n    accountType\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    posts {\n      __typename\n      nextToken\n      startedAt\n    }\n    tokens\n    savedPosts {\n      __typename\n      nextToken\n      startedAt\n    }\n    favoritesIds\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newUserAthleteId\n    newUserCoachId\n  }\n}"

  public var input: UpdateNewUserInput
  public var condition: ModelNewUserConditionInput?

  public init(input: UpdateNewUserInput, condition: ModelNewUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateNewUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateNewUser: UpdateNewUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateNewUser": updateNewUser.flatMap { $0.snapshot }])
    }

    public var updateNewUser: UpdateNewUser? {
      get {
        return (snapshot["updateNewUser"] as? Snapshot).flatMap { UpdateNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateNewUser")
      }
    }

    public struct UpdateNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["NewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("diveMeetsID", type: .scalar(String.self)),
        GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
        GraphQLField("athlete", type: .object(Athlete.selections)),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("posts", type: .object(Post.selections)),
        GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("savedPosts", type: .object(SavedPost.selections)),
        GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
        GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, athlete: Athlete? = nil, coach: Coach? = nil, posts: Post? = nil, tokens: [String], savedPosts: SavedPost? = nil, favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "athlete": athlete.flatMap { $0.snapshot }, "coach": coach.flatMap { $0.snapshot }, "posts": posts.flatMap { $0.snapshot }, "tokens": tokens, "savedPosts": savedPosts.flatMap { $0.snapshot }, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var diveMeetsId: String? {
        get {
          return snapshot["diveMeetsID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveMeetsID")
        }
      }

      public var accountType: String {
        get {
          return snapshot["accountType"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "accountType")
        }
      }

      public var athlete: Athlete? {
        get {
          return (snapshot["athlete"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athlete")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var posts: Post? {
        get {
          return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "posts")
        }
      }

      public var tokens: [String] {
        get {
          return snapshot["tokens"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "tokens")
        }
      }

      public var savedPosts: SavedPost? {
        get {
          return (snapshot["savedPosts"] as? Snapshot).flatMap { SavedPost(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "savedPosts")
        }
      }

      public var favoritesIds: [String] {
        get {
          return snapshot["favoritesIds"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "favoritesIds")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newUserAthleteId: GraphQLID? {
        get {
          return snapshot["newUserAthleteId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserAthleteId")
        }
      }

      public var newUserCoachId: GraphQLID? {
        get {
          return snapshot["newUserCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserCoachId")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Post: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct SavedPost: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class DeleteNewUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteNewUser($input: DeleteNewUserInput!, $condition: ModelNewUserConditionInput) {\n  deleteNewUser(input: $input, condition: $condition) {\n    __typename\n    id\n    firstName\n    lastName\n    email\n    phone\n    diveMeetsID\n    accountType\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    posts {\n      __typename\n      nextToken\n      startedAt\n    }\n    tokens\n    savedPosts {\n      __typename\n      nextToken\n      startedAt\n    }\n    favoritesIds\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newUserAthleteId\n    newUserCoachId\n  }\n}"

  public var input: DeleteNewUserInput
  public var condition: ModelNewUserConditionInput?

  public init(input: DeleteNewUserInput, condition: ModelNewUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteNewUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteNewUser: DeleteNewUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteNewUser": deleteNewUser.flatMap { $0.snapshot }])
    }

    public var deleteNewUser: DeleteNewUser? {
      get {
        return (snapshot["deleteNewUser"] as? Snapshot).flatMap { DeleteNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteNewUser")
      }
    }

    public struct DeleteNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["NewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("diveMeetsID", type: .scalar(String.self)),
        GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
        GraphQLField("athlete", type: .object(Athlete.selections)),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("posts", type: .object(Post.selections)),
        GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("savedPosts", type: .object(SavedPost.selections)),
        GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
        GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, athlete: Athlete? = nil, coach: Coach? = nil, posts: Post? = nil, tokens: [String], savedPosts: SavedPost? = nil, favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "athlete": athlete.flatMap { $0.snapshot }, "coach": coach.flatMap { $0.snapshot }, "posts": posts.flatMap { $0.snapshot }, "tokens": tokens, "savedPosts": savedPosts.flatMap { $0.snapshot }, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var diveMeetsId: String? {
        get {
          return snapshot["diveMeetsID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveMeetsID")
        }
      }

      public var accountType: String {
        get {
          return snapshot["accountType"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "accountType")
        }
      }

      public var athlete: Athlete? {
        get {
          return (snapshot["athlete"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athlete")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var posts: Post? {
        get {
          return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "posts")
        }
      }

      public var tokens: [String] {
        get {
          return snapshot["tokens"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "tokens")
        }
      }

      public var savedPosts: SavedPost? {
        get {
          return (snapshot["savedPosts"] as? Snapshot).flatMap { SavedPost(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "savedPosts")
        }
      }

      public var favoritesIds: [String] {
        get {
          return snapshot["favoritesIds"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "favoritesIds")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newUserAthleteId: GraphQLID? {
        get {
          return snapshot["newUserAthleteId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserAthleteId")
        }
      }

      public var newUserCoachId: GraphQLID? {
        get {
          return snapshot["newUserCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserCoachId")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Post: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct SavedPost: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class CreateNewAthleteMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateNewAthlete($input: CreateNewAthleteInput!, $condition: ModelNewAthleteConditionInput) {\n  createNewAthlete(input: $input, condition: $condition) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    college {\n      __typename\n      id\n      name\n      imageLink\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    heightFeet\n    heightInches\n    weight\n    weightUnit\n    gender\n    age\n    graduationYear\n    highSchool\n    hometown\n    springboardRating\n    platformRating\n    totalRating\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    collegeID\n    newteamID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newAthleteUserId\n  }\n}"

  public var input: CreateNewAthleteInput
  public var condition: ModelNewAthleteConditionInput?

  public init(input: CreateNewAthleteInput, condition: ModelNewAthleteConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createNewAthlete", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateNewAthlete.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createNewAthlete: CreateNewAthlete? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createNewAthlete": createNewAthlete.flatMap { $0.snapshot }])
    }

    public var createNewAthlete: CreateNewAthlete? {
      get {
        return (snapshot["createNewAthlete"] as? Snapshot).flatMap { CreateNewAthlete(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createNewAthlete")
      }
    }

    public struct CreateNewAthlete: GraphQLSelectionSet {
      public static let possibleTypes = ["NewAthlete"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("college", type: .object(College.selections)),
        GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
        GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
        GraphQLField("gender", type: .nonNull(.scalar(String.self))),
        GraphQLField("age", type: .nonNull(.scalar(Int.self))),
        GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
        GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
        GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
        GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User, team: Team? = nil, college: College? = nil, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, dives: Dife? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
        self.init(snapshot: ["__typename": "NewAthlete", "id": id, "user": user.snapshot, "team": team.flatMap { $0.snapshot }, "college": college.flatMap { $0.snapshot }, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "dives": dives.flatMap { $0.snapshot }, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var college: College? {
        get {
          return (snapshot["college"] as? Snapshot).flatMap { College(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "college")
        }
      }

      public var heightFeet: Int {
        get {
          return snapshot["heightFeet"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightFeet")
        }
      }

      public var heightInches: Int {
        get {
          return snapshot["heightInches"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightInches")
        }
      }

      public var weight: Int {
        get {
          return snapshot["weight"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "weight")
        }
      }

      public var weightUnit: String {
        get {
          return snapshot["weightUnit"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "weightUnit")
        }
      }

      public var gender: String {
        get {
          return snapshot["gender"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var age: Int {
        get {
          return snapshot["age"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "age")
        }
      }

      public var graduationYear: Int {
        get {
          return snapshot["graduationYear"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "graduationYear")
        }
      }

      public var highSchool: String {
        get {
          return snapshot["highSchool"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "highSchool")
        }
      }

      public var hometown: String {
        get {
          return snapshot["hometown"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hometown")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var collegeId: GraphQLID? {
        get {
          return snapshot["collegeID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collegeID")
        }
      }

      public var newteamId: GraphQLID? {
        get {
          return snapshot["newteamID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newteamID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newAthleteUserId: GraphQLID {
        get {
          return snapshot["newAthleteUserId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newAthleteUserId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }

      public struct College: GraphQLSelectionSet {
        public static let possibleTypes = ["College"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, imageLink: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var imageLink: String {
          get {
            return snapshot["imageLink"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "imageLink")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class UpdateNewAthleteMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateNewAthlete($input: UpdateNewAthleteInput!, $condition: ModelNewAthleteConditionInput) {\n  updateNewAthlete(input: $input, condition: $condition) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    college {\n      __typename\n      id\n      name\n      imageLink\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    heightFeet\n    heightInches\n    weight\n    weightUnit\n    gender\n    age\n    graduationYear\n    highSchool\n    hometown\n    springboardRating\n    platformRating\n    totalRating\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    collegeID\n    newteamID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newAthleteUserId\n  }\n}"

  public var input: UpdateNewAthleteInput
  public var condition: ModelNewAthleteConditionInput?

  public init(input: UpdateNewAthleteInput, condition: ModelNewAthleteConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateNewAthlete", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateNewAthlete.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateNewAthlete: UpdateNewAthlete? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateNewAthlete": updateNewAthlete.flatMap { $0.snapshot }])
    }

    public var updateNewAthlete: UpdateNewAthlete? {
      get {
        return (snapshot["updateNewAthlete"] as? Snapshot).flatMap { UpdateNewAthlete(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateNewAthlete")
      }
    }

    public struct UpdateNewAthlete: GraphQLSelectionSet {
      public static let possibleTypes = ["NewAthlete"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("college", type: .object(College.selections)),
        GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
        GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
        GraphQLField("gender", type: .nonNull(.scalar(String.self))),
        GraphQLField("age", type: .nonNull(.scalar(Int.self))),
        GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
        GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
        GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
        GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User, team: Team? = nil, college: College? = nil, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, dives: Dife? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
        self.init(snapshot: ["__typename": "NewAthlete", "id": id, "user": user.snapshot, "team": team.flatMap { $0.snapshot }, "college": college.flatMap { $0.snapshot }, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "dives": dives.flatMap { $0.snapshot }, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var college: College? {
        get {
          return (snapshot["college"] as? Snapshot).flatMap { College(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "college")
        }
      }

      public var heightFeet: Int {
        get {
          return snapshot["heightFeet"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightFeet")
        }
      }

      public var heightInches: Int {
        get {
          return snapshot["heightInches"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightInches")
        }
      }

      public var weight: Int {
        get {
          return snapshot["weight"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "weight")
        }
      }

      public var weightUnit: String {
        get {
          return snapshot["weightUnit"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "weightUnit")
        }
      }

      public var gender: String {
        get {
          return snapshot["gender"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var age: Int {
        get {
          return snapshot["age"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "age")
        }
      }

      public var graduationYear: Int {
        get {
          return snapshot["graduationYear"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "graduationYear")
        }
      }

      public var highSchool: String {
        get {
          return snapshot["highSchool"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "highSchool")
        }
      }

      public var hometown: String {
        get {
          return snapshot["hometown"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hometown")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var collegeId: GraphQLID? {
        get {
          return snapshot["collegeID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collegeID")
        }
      }

      public var newteamId: GraphQLID? {
        get {
          return snapshot["newteamID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newteamID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newAthleteUserId: GraphQLID {
        get {
          return snapshot["newAthleteUserId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newAthleteUserId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }

      public struct College: GraphQLSelectionSet {
        public static let possibleTypes = ["College"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, imageLink: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var imageLink: String {
          get {
            return snapshot["imageLink"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "imageLink")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class DeleteNewAthleteMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteNewAthlete($input: DeleteNewAthleteInput!, $condition: ModelNewAthleteConditionInput) {\n  deleteNewAthlete(input: $input, condition: $condition) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    college {\n      __typename\n      id\n      name\n      imageLink\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    heightFeet\n    heightInches\n    weight\n    weightUnit\n    gender\n    age\n    graduationYear\n    highSchool\n    hometown\n    springboardRating\n    platformRating\n    totalRating\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    collegeID\n    newteamID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newAthleteUserId\n  }\n}"

  public var input: DeleteNewAthleteInput
  public var condition: ModelNewAthleteConditionInput?

  public init(input: DeleteNewAthleteInput, condition: ModelNewAthleteConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteNewAthlete", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteNewAthlete.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteNewAthlete: DeleteNewAthlete? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteNewAthlete": deleteNewAthlete.flatMap { $0.snapshot }])
    }

    public var deleteNewAthlete: DeleteNewAthlete? {
      get {
        return (snapshot["deleteNewAthlete"] as? Snapshot).flatMap { DeleteNewAthlete(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteNewAthlete")
      }
    }

    public struct DeleteNewAthlete: GraphQLSelectionSet {
      public static let possibleTypes = ["NewAthlete"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("college", type: .object(College.selections)),
        GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
        GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
        GraphQLField("gender", type: .nonNull(.scalar(String.self))),
        GraphQLField("age", type: .nonNull(.scalar(Int.self))),
        GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
        GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
        GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
        GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User, team: Team? = nil, college: College? = nil, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, dives: Dife? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
        self.init(snapshot: ["__typename": "NewAthlete", "id": id, "user": user.snapshot, "team": team.flatMap { $0.snapshot }, "college": college.flatMap { $0.snapshot }, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "dives": dives.flatMap { $0.snapshot }, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var college: College? {
        get {
          return (snapshot["college"] as? Snapshot).flatMap { College(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "college")
        }
      }

      public var heightFeet: Int {
        get {
          return snapshot["heightFeet"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightFeet")
        }
      }

      public var heightInches: Int {
        get {
          return snapshot["heightInches"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightInches")
        }
      }

      public var weight: Int {
        get {
          return snapshot["weight"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "weight")
        }
      }

      public var weightUnit: String {
        get {
          return snapshot["weightUnit"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "weightUnit")
        }
      }

      public var gender: String {
        get {
          return snapshot["gender"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var age: Int {
        get {
          return snapshot["age"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "age")
        }
      }

      public var graduationYear: Int {
        get {
          return snapshot["graduationYear"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "graduationYear")
        }
      }

      public var highSchool: String {
        get {
          return snapshot["highSchool"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "highSchool")
        }
      }

      public var hometown: String {
        get {
          return snapshot["hometown"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hometown")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var collegeId: GraphQLID? {
        get {
          return snapshot["collegeID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collegeID")
        }
      }

      public var newteamId: GraphQLID? {
        get {
          return snapshot["newteamID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newteamID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newAthleteUserId: GraphQLID {
        get {
          return snapshot["newAthleteUserId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newAthleteUserId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }

      public struct College: GraphQLSelectionSet {
        public static let possibleTypes = ["College"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, imageLink: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var imageLink: String {
          get {
            return snapshot["imageLink"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "imageLink")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class CreateVideoMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateVideo($input: CreateVideoInput!, $condition: ModelVideoConditionInput) {\n  createVideo(input: $input, condition: $condition) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateVideoInput
  public var condition: ModelVideoConditionInput?

  public init(input: CreateVideoInput, condition: ModelVideoConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createVideo", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createVideo: CreateVideo? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createVideo": createVideo.flatMap { $0.snapshot }])
    }

    public var createVideo: CreateVideo? {
      get {
        return (snapshot["createVideo"] as? Snapshot).flatMap { CreateVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createVideo")
      }
    }

    public struct CreateVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["Video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class UpdateVideoMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateVideo($input: UpdateVideoInput!, $condition: ModelVideoConditionInput) {\n  updateVideo(input: $input, condition: $condition) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateVideoInput
  public var condition: ModelVideoConditionInput?

  public init(input: UpdateVideoInput, condition: ModelVideoConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateVideo", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateVideo: UpdateVideo? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateVideo": updateVideo.flatMap { $0.snapshot }])
    }

    public var updateVideo: UpdateVideo? {
      get {
        return (snapshot["updateVideo"] as? Snapshot).flatMap { UpdateVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateVideo")
      }
    }

    public struct UpdateVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["Video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class DeleteVideoMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteVideo($input: DeleteVideoInput!, $condition: ModelVideoConditionInput) {\n  deleteVideo(input: $input, condition: $condition) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteVideoInput
  public var condition: ModelVideoConditionInput?

  public init(input: DeleteVideoInput, condition: ModelVideoConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteVideo", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteVideo: DeleteVideo? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteVideo": deleteVideo.flatMap { $0.snapshot }])
    }

    public var deleteVideo: DeleteVideo? {
      get {
        return (snapshot["deleteVideo"] as? Snapshot).flatMap { DeleteVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteVideo")
      }
    }

    public struct DeleteVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["Video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class CreateCoachUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateCoachUser($input: CreateCoachUserInput!, $condition: ModelCoachUserConditionInput) {\n  createCoachUser(input: $input, condition: $condition) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    coachUserUserId\n    coachUserTeamId\n  }\n}"

  public var input: CreateCoachUserInput
  public var condition: ModelCoachUserConditionInput?

  public init(input: CreateCoachUserInput, condition: ModelCoachUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createCoachUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateCoachUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createCoachUser: CreateCoachUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createCoachUser": createCoachUser.flatMap { $0.snapshot }])
    }

    public var createCoachUser: CreateCoachUser? {
      get {
        return (snapshot["createCoachUser"] as? Snapshot).flatMap { CreateCoachUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createCoachUser")
      }
    }

    public struct CreateCoachUser: GraphQLSelectionSet {
      public static let possibleTypes = ["CoachUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
        GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User? = nil, team: Team? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "CoachUser", "id": id, "user": user.flatMap { $0.snapshot }, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var coachUserUserId: GraphQLID? {
        get {
          return snapshot["coachUserUserId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserUserId")
        }
      }

      public var coachUserTeamId: GraphQLID? {
        get {
          return snapshot["coachUserTeamId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserTeamId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }
    }
  }
}

public final class UpdateCoachUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateCoachUser($input: UpdateCoachUserInput!, $condition: ModelCoachUserConditionInput) {\n  updateCoachUser(input: $input, condition: $condition) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    coachUserUserId\n    coachUserTeamId\n  }\n}"

  public var input: UpdateCoachUserInput
  public var condition: ModelCoachUserConditionInput?

  public init(input: UpdateCoachUserInput, condition: ModelCoachUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateCoachUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateCoachUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateCoachUser: UpdateCoachUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateCoachUser": updateCoachUser.flatMap { $0.snapshot }])
    }

    public var updateCoachUser: UpdateCoachUser? {
      get {
        return (snapshot["updateCoachUser"] as? Snapshot).flatMap { UpdateCoachUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateCoachUser")
      }
    }

    public struct UpdateCoachUser: GraphQLSelectionSet {
      public static let possibleTypes = ["CoachUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
        GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User? = nil, team: Team? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "CoachUser", "id": id, "user": user.flatMap { $0.snapshot }, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var coachUserUserId: GraphQLID? {
        get {
          return snapshot["coachUserUserId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserUserId")
        }
      }

      public var coachUserTeamId: GraphQLID? {
        get {
          return snapshot["coachUserTeamId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserTeamId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }
    }
  }
}

public final class DeleteCoachUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteCoachUser($input: DeleteCoachUserInput!, $condition: ModelCoachUserConditionInput) {\n  deleteCoachUser(input: $input, condition: $condition) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    coachUserUserId\n    coachUserTeamId\n  }\n}"

  public var input: DeleteCoachUserInput
  public var condition: ModelCoachUserConditionInput?

  public init(input: DeleteCoachUserInput, condition: ModelCoachUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteCoachUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteCoachUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteCoachUser: DeleteCoachUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteCoachUser": deleteCoachUser.flatMap { $0.snapshot }])
    }

    public var deleteCoachUser: DeleteCoachUser? {
      get {
        return (snapshot["deleteCoachUser"] as? Snapshot).flatMap { DeleteCoachUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteCoachUser")
      }
    }

    public struct DeleteCoachUser: GraphQLSelectionSet {
      public static let possibleTypes = ["CoachUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
        GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User? = nil, team: Team? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "CoachUser", "id": id, "user": user.flatMap { $0.snapshot }, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var coachUserUserId: GraphQLID? {
        get {
          return snapshot["coachUserUserId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserUserId")
        }
      }

      public var coachUserTeamId: GraphQLID? {
        get {
          return snapshot["coachUserTeamId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserTeamId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }
    }
  }
}

public final class CreateNewTeamMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateNewTeam($input: CreateNewTeamInput!, $condition: ModelNewTeamConditionInput) {\n  createNewTeam(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newTeamCoachId\n  }\n}"

  public var input: CreateNewTeamInput
  public var condition: ModelNewTeamConditionInput?

  public init(input: CreateNewTeamInput, condition: ModelNewTeamConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createNewTeam", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateNewTeam.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createNewTeam: CreateNewTeam? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createNewTeam": createNewTeam.flatMap { $0.snapshot }])
    }

    public var createNewTeam: CreateNewTeam? {
      get {
        return (snapshot["createNewTeam"] as? Snapshot).flatMap { CreateNewTeam(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createNewTeam")
      }
    }

    public struct CreateNewTeam: GraphQLSelectionSet {
      public static let possibleTypes = ["NewTeam"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, coach: Coach? = nil, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "coach": coach.flatMap { $0.snapshot }, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newTeamCoachId: GraphQLID? {
        get {
          return snapshot["newTeamCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newTeamCoachId")
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class UpdateNewTeamMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateNewTeam($input: UpdateNewTeamInput!, $condition: ModelNewTeamConditionInput) {\n  updateNewTeam(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newTeamCoachId\n  }\n}"

  public var input: UpdateNewTeamInput
  public var condition: ModelNewTeamConditionInput?

  public init(input: UpdateNewTeamInput, condition: ModelNewTeamConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateNewTeam", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateNewTeam.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateNewTeam: UpdateNewTeam? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateNewTeam": updateNewTeam.flatMap { $0.snapshot }])
    }

    public var updateNewTeam: UpdateNewTeam? {
      get {
        return (snapshot["updateNewTeam"] as? Snapshot).flatMap { UpdateNewTeam(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateNewTeam")
      }
    }

    public struct UpdateNewTeam: GraphQLSelectionSet {
      public static let possibleTypes = ["NewTeam"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, coach: Coach? = nil, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "coach": coach.flatMap { $0.snapshot }, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newTeamCoachId: GraphQLID? {
        get {
          return snapshot["newTeamCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newTeamCoachId")
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class DeleteNewTeamMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteNewTeam($input: DeleteNewTeamInput!, $condition: ModelNewTeamConditionInput) {\n  deleteNewTeam(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newTeamCoachId\n  }\n}"

  public var input: DeleteNewTeamInput
  public var condition: ModelNewTeamConditionInput?

  public init(input: DeleteNewTeamInput, condition: ModelNewTeamConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteNewTeam", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteNewTeam.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteNewTeam: DeleteNewTeam? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteNewTeam": deleteNewTeam.flatMap { $0.snapshot }])
    }

    public var deleteNewTeam: DeleteNewTeam? {
      get {
        return (snapshot["deleteNewTeam"] as? Snapshot).flatMap { DeleteNewTeam(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteNewTeam")
      }
    }

    public struct DeleteNewTeam: GraphQLSelectionSet {
      public static let possibleTypes = ["NewTeam"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, coach: Coach? = nil, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "coach": coach.flatMap { $0.snapshot }, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newTeamCoachId: GraphQLID? {
        get {
          return snapshot["newTeamCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newTeamCoachId")
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class CreateCollegeMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateCollege($input: CreateCollegeInput!, $condition: ModelCollegeConditionInput) {\n  createCollege(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    imageLink\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateCollegeInput
  public var condition: ModelCollegeConditionInput?

  public init(input: CreateCollegeInput, condition: ModelCollegeConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createCollege", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateCollege.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createCollege: CreateCollege? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createCollege": createCollege.flatMap { $0.snapshot }])
    }

    public var createCollege: CreateCollege? {
      get {
        return (snapshot["createCollege"] as? Snapshot).flatMap { CreateCollege(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createCollege")
      }
    }

    public struct CreateCollege: GraphQLSelectionSet {
      public static let possibleTypes = ["College"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, imageLink: String, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var imageLink: String {
        get {
          return snapshot["imageLink"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "imageLink")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class UpdateCollegeMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateCollege($input: UpdateCollegeInput!, $condition: ModelCollegeConditionInput) {\n  updateCollege(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    imageLink\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateCollegeInput
  public var condition: ModelCollegeConditionInput?

  public init(input: UpdateCollegeInput, condition: ModelCollegeConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateCollege", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateCollege.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateCollege: UpdateCollege? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateCollege": updateCollege.flatMap { $0.snapshot }])
    }

    public var updateCollege: UpdateCollege? {
      get {
        return (snapshot["updateCollege"] as? Snapshot).flatMap { UpdateCollege(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateCollege")
      }
    }

    public struct UpdateCollege: GraphQLSelectionSet {
      public static let possibleTypes = ["College"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, imageLink: String, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var imageLink: String {
        get {
          return snapshot["imageLink"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "imageLink")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class DeleteCollegeMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteCollege($input: DeleteCollegeInput!, $condition: ModelCollegeConditionInput) {\n  deleteCollege(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    imageLink\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteCollegeInput
  public var condition: ModelCollegeConditionInput?

  public init(input: DeleteCollegeInput, condition: ModelCollegeConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteCollege", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteCollege.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteCollege: DeleteCollege? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteCollege": deleteCollege.flatMap { $0.snapshot }])
    }

    public var deleteCollege: DeleteCollege? {
      get {
        return (snapshot["deleteCollege"] as? Snapshot).flatMap { DeleteCollege(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteCollege")
      }
    }

    public struct DeleteCollege: GraphQLSelectionSet {
      public static let possibleTypes = ["College"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, imageLink: String, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var imageLink: String {
        get {
          return snapshot["imageLink"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "imageLink")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class CreateNewMeetMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateNewMeet($input: CreateNewMeetInput!, $condition: ModelNewMeetConditionInput) {\n  createNewMeet(input: $input, condition: $condition) {\n    __typename\n    id\n    meetID\n    name\n    organization\n    startDate\n    endDate\n    city\n    state\n    country\n    link\n    meetType\n    events {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateNewMeetInput
  public var condition: ModelNewMeetConditionInput?

  public init(input: CreateNewMeetInput, condition: ModelNewMeetConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createNewMeet", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateNewMeet.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createNewMeet: CreateNewMeet? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createNewMeet": createNewMeet.flatMap { $0.snapshot }])
    }

    public var createNewMeet: CreateNewMeet? {
      get {
        return (snapshot["createNewMeet"] as? Snapshot).flatMap { CreateNewMeet(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createNewMeet")
      }
    }

    public struct CreateNewMeet: GraphQLSelectionSet {
      public static let possibleTypes = ["NewMeet"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("organization", type: .scalar(String.self)),
        GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("state", type: .nonNull(.scalar(String.self))),
        GraphQLField("country", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
        GraphQLField("events", type: .object(Event.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, events: Event? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "events": events.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meetId: Int {
        get {
          return snapshot["meetID"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var organization: String? {
        get {
          return snapshot["organization"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "organization")
        }
      }

      public var startDate: String {
        get {
          return snapshot["startDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "startDate")
        }
      }

      public var endDate: String {
        get {
          return snapshot["endDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "endDate")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var state: String {
        get {
          return snapshot["state"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var country: String {
        get {
          return snapshot["country"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "country")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var meetType: Int {
        get {
          return snapshot["meetType"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetType")
        }
      }

      public var events: Event? {
        get {
          return (snapshot["events"] as? Snapshot).flatMap { Event(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "events")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewEventConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewEventConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class UpdateNewMeetMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateNewMeet($input: UpdateNewMeetInput!, $condition: ModelNewMeetConditionInput) {\n  updateNewMeet(input: $input, condition: $condition) {\n    __typename\n    id\n    meetID\n    name\n    organization\n    startDate\n    endDate\n    city\n    state\n    country\n    link\n    meetType\n    events {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateNewMeetInput
  public var condition: ModelNewMeetConditionInput?

  public init(input: UpdateNewMeetInput, condition: ModelNewMeetConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateNewMeet", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateNewMeet.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateNewMeet: UpdateNewMeet? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateNewMeet": updateNewMeet.flatMap { $0.snapshot }])
    }

    public var updateNewMeet: UpdateNewMeet? {
      get {
        return (snapshot["updateNewMeet"] as? Snapshot).flatMap { UpdateNewMeet(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateNewMeet")
      }
    }

    public struct UpdateNewMeet: GraphQLSelectionSet {
      public static let possibleTypes = ["NewMeet"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("organization", type: .scalar(String.self)),
        GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("state", type: .nonNull(.scalar(String.self))),
        GraphQLField("country", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
        GraphQLField("events", type: .object(Event.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, events: Event? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "events": events.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meetId: Int {
        get {
          return snapshot["meetID"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var organization: String? {
        get {
          return snapshot["organization"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "organization")
        }
      }

      public var startDate: String {
        get {
          return snapshot["startDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "startDate")
        }
      }

      public var endDate: String {
        get {
          return snapshot["endDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "endDate")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var state: String {
        get {
          return snapshot["state"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var country: String {
        get {
          return snapshot["country"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "country")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var meetType: Int {
        get {
          return snapshot["meetType"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetType")
        }
      }

      public var events: Event? {
        get {
          return (snapshot["events"] as? Snapshot).flatMap { Event(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "events")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewEventConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewEventConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class DeleteNewMeetMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteNewMeet($input: DeleteNewMeetInput!, $condition: ModelNewMeetConditionInput) {\n  deleteNewMeet(input: $input, condition: $condition) {\n    __typename\n    id\n    meetID\n    name\n    organization\n    startDate\n    endDate\n    city\n    state\n    country\n    link\n    meetType\n    events {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteNewMeetInput
  public var condition: ModelNewMeetConditionInput?

  public init(input: DeleteNewMeetInput, condition: ModelNewMeetConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteNewMeet", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteNewMeet.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteNewMeet: DeleteNewMeet? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteNewMeet": deleteNewMeet.flatMap { $0.snapshot }])
    }

    public var deleteNewMeet: DeleteNewMeet? {
      get {
        return (snapshot["deleteNewMeet"] as? Snapshot).flatMap { DeleteNewMeet(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteNewMeet")
      }
    }

    public struct DeleteNewMeet: GraphQLSelectionSet {
      public static let possibleTypes = ["NewMeet"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("organization", type: .scalar(String.self)),
        GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("state", type: .nonNull(.scalar(String.self))),
        GraphQLField("country", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
        GraphQLField("events", type: .object(Event.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, events: Event? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "events": events.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meetId: Int {
        get {
          return snapshot["meetID"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var organization: String? {
        get {
          return snapshot["organization"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "organization")
        }
      }

      public var startDate: String {
        get {
          return snapshot["startDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "startDate")
        }
      }

      public var endDate: String {
        get {
          return snapshot["endDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "endDate")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var state: String {
        get {
          return snapshot["state"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var country: String {
        get {
          return snapshot["country"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "country")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var meetType: Int {
        get {
          return snapshot["meetType"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetType")
        }
      }

      public var events: Event? {
        get {
          return (snapshot["events"] as? Snapshot).flatMap { Event(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "events")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewEventConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewEventConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class CreateNewEventMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateNewEvent($input: CreateNewEventInput!, $condition: ModelNewEventConditionInput) {\n  createNewEvent(input: $input, condition: $condition) {\n    __typename\n    id\n    meet {\n      __typename\n      id\n      meetID\n      name\n      organization\n      startDate\n      endDate\n      city\n      state\n      country\n      link\n      meetType\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    name\n    date\n    link\n    numEntries\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    newmeetID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateNewEventInput
  public var condition: ModelNewEventConditionInput?

  public init(input: CreateNewEventInput, condition: ModelNewEventConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createNewEvent", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateNewEvent.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createNewEvent: CreateNewEvent? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createNewEvent": createNewEvent.flatMap { $0.snapshot }])
    }

    public var createNewEvent: CreateNewEvent? {
      get {
        return (snapshot["createNewEvent"] as? Snapshot).flatMap { CreateNewEvent(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createNewEvent")
      }
    }

    public struct CreateNewEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["NewEvent"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meet", type: .nonNull(.object(Meet.selections))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("date", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meet: Meet, name: String, date: String, link: String, numEntries: Int, dives: Dife? = nil, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewEvent", "id": id, "meet": meet.snapshot, "name": name, "date": date, "link": link, "numEntries": numEntries, "dives": dives.flatMap { $0.snapshot }, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meet: Meet {
        get {
          return Meet(snapshot: snapshot["meet"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "meet")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var date: String {
        get {
          return snapshot["date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "date")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var numEntries: Int {
        get {
          return snapshot["numEntries"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "numEntries")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var newmeetId: GraphQLID {
        get {
          return snapshot["newmeetID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newmeetID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Meet: GraphQLSelectionSet {
        public static let possibleTypes = ["NewMeet"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("organization", type: .scalar(String.self)),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var meetId: Int {
          get {
            return snapshot["meetID"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var organization: String? {
          get {
            return snapshot["organization"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "organization")
          }
        }

        public var startDate: String {
          get {
            return snapshot["startDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "startDate")
          }
        }

        public var endDate: String {
          get {
            return snapshot["endDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "endDate")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return snapshot["state"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return snapshot["country"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "country")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var meetType: Int {
          get {
            return snapshot["meetType"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetType")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class UpdateNewEventMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateNewEvent($input: UpdateNewEventInput!, $condition: ModelNewEventConditionInput) {\n  updateNewEvent(input: $input, condition: $condition) {\n    __typename\n    id\n    meet {\n      __typename\n      id\n      meetID\n      name\n      organization\n      startDate\n      endDate\n      city\n      state\n      country\n      link\n      meetType\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    name\n    date\n    link\n    numEntries\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    newmeetID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateNewEventInput
  public var condition: ModelNewEventConditionInput?

  public init(input: UpdateNewEventInput, condition: ModelNewEventConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateNewEvent", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateNewEvent.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateNewEvent: UpdateNewEvent? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateNewEvent": updateNewEvent.flatMap { $0.snapshot }])
    }

    public var updateNewEvent: UpdateNewEvent? {
      get {
        return (snapshot["updateNewEvent"] as? Snapshot).flatMap { UpdateNewEvent(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateNewEvent")
      }
    }

    public struct UpdateNewEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["NewEvent"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meet", type: .nonNull(.object(Meet.selections))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("date", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meet: Meet, name: String, date: String, link: String, numEntries: Int, dives: Dife? = nil, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewEvent", "id": id, "meet": meet.snapshot, "name": name, "date": date, "link": link, "numEntries": numEntries, "dives": dives.flatMap { $0.snapshot }, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meet: Meet {
        get {
          return Meet(snapshot: snapshot["meet"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "meet")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var date: String {
        get {
          return snapshot["date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "date")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var numEntries: Int {
        get {
          return snapshot["numEntries"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "numEntries")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var newmeetId: GraphQLID {
        get {
          return snapshot["newmeetID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newmeetID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Meet: GraphQLSelectionSet {
        public static let possibleTypes = ["NewMeet"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("organization", type: .scalar(String.self)),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var meetId: Int {
          get {
            return snapshot["meetID"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var organization: String? {
          get {
            return snapshot["organization"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "organization")
          }
        }

        public var startDate: String {
          get {
            return snapshot["startDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "startDate")
          }
        }

        public var endDate: String {
          get {
            return snapshot["endDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "endDate")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return snapshot["state"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return snapshot["country"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "country")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var meetType: Int {
          get {
            return snapshot["meetType"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetType")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class DeleteNewEventMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteNewEvent($input: DeleteNewEventInput!, $condition: ModelNewEventConditionInput) {\n  deleteNewEvent(input: $input, condition: $condition) {\n    __typename\n    id\n    meet {\n      __typename\n      id\n      meetID\n      name\n      organization\n      startDate\n      endDate\n      city\n      state\n      country\n      link\n      meetType\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    name\n    date\n    link\n    numEntries\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    newmeetID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteNewEventInput
  public var condition: ModelNewEventConditionInput?

  public init(input: DeleteNewEventInput, condition: ModelNewEventConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteNewEvent", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteNewEvent.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteNewEvent: DeleteNewEvent? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteNewEvent": deleteNewEvent.flatMap { $0.snapshot }])
    }

    public var deleteNewEvent: DeleteNewEvent? {
      get {
        return (snapshot["deleteNewEvent"] as? Snapshot).flatMap { DeleteNewEvent(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteNewEvent")
      }
    }

    public struct DeleteNewEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["NewEvent"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meet", type: .nonNull(.object(Meet.selections))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("date", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meet: Meet, name: String, date: String, link: String, numEntries: Int, dives: Dife? = nil, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewEvent", "id": id, "meet": meet.snapshot, "name": name, "date": date, "link": link, "numEntries": numEntries, "dives": dives.flatMap { $0.snapshot }, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meet: Meet {
        get {
          return Meet(snapshot: snapshot["meet"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "meet")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var date: String {
        get {
          return snapshot["date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "date")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var numEntries: Int {
        get {
          return snapshot["numEntries"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "numEntries")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var newmeetId: GraphQLID {
        get {
          return snapshot["newmeetID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newmeetID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Meet: GraphQLSelectionSet {
        public static let possibleTypes = ["NewMeet"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("organization", type: .scalar(String.self)),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var meetId: Int {
          get {
            return snapshot["meetID"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var organization: String? {
          get {
            return snapshot["organization"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "organization")
          }
        }

        public var startDate: String {
          get {
            return snapshot["startDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "startDate")
          }
        }

        public var endDate: String {
          get {
            return snapshot["endDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "endDate")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return snapshot["state"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return snapshot["country"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "country")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var meetType: Int {
          get {
            return snapshot["meetType"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetType")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class CreateDiveMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateDive($input: CreateDiveInput!, $condition: ModelDiveConditionInput) {\n  createDive(input: $input, condition: $condition) {\n    __typename\n    id\n    event {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    number\n    name\n    height\n    netScore\n    dd\n    totalScore\n    scores {\n      __typename\n      nextToken\n      startedAt\n    }\n    newathleteID\n    neweventID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateDiveInput
  public var condition: ModelDiveConditionInput?

  public init(input: CreateDiveInput, condition: ModelDiveConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createDive", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateDive.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createDive: CreateDive? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createDive": createDive.flatMap { $0.snapshot }])
    }

    public var createDive: CreateDive? {
      get {
        return (snapshot["createDive"] as? Snapshot).flatMap { CreateDive(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createDive")
      }
    }

    public struct CreateDive: GraphQLSelectionSet {
      public static let possibleTypes = ["Dive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("event", type: .nonNull(.object(Event.selections))),
        GraphQLField("athlete", type: .nonNull(.object(Athlete.selections))),
        GraphQLField("number", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("height", type: .nonNull(.scalar(Double.self))),
        GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
        GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("scores", type: .object(Score.selections)),
        GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, event: Event, athlete: Athlete, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, scores: Score? = nil, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Dive", "id": id, "event": event.snapshot, "athlete": athlete.snapshot, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "scores": scores.flatMap { $0.snapshot }, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var event: Event {
        get {
          return Event(snapshot: snapshot["event"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "event")
        }
      }

      public var athlete: Athlete {
        get {
          return Athlete(snapshot: snapshot["athlete"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "athlete")
        }
      }

      public var number: String {
        get {
          return snapshot["number"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "number")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var height: Double {
        get {
          return snapshot["height"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "height")
        }
      }

      public var netScore: Double {
        get {
          return snapshot["netScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "netScore")
        }
      }

      public var dd: Double {
        get {
          return snapshot["dd"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "dd")
        }
      }

      public var totalScore: Double {
        get {
          return snapshot["totalScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalScore")
        }
      }

      public var scores: Score? {
        get {
          return (snapshot["scores"] as? Snapshot).flatMap { Score(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "scores")
        }
      }

      public var newathleteId: GraphQLID {
        get {
          return snapshot["newathleteID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newathleteID")
        }
      }

      public var neweventId: GraphQLID {
        get {
          return snapshot["neweventID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "neweventID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Score: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelJudgeScoreConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class UpdateDiveMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateDive($input: UpdateDiveInput!, $condition: ModelDiveConditionInput) {\n  updateDive(input: $input, condition: $condition) {\n    __typename\n    id\n    event {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    number\n    name\n    height\n    netScore\n    dd\n    totalScore\n    scores {\n      __typename\n      nextToken\n      startedAt\n    }\n    newathleteID\n    neweventID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateDiveInput
  public var condition: ModelDiveConditionInput?

  public init(input: UpdateDiveInput, condition: ModelDiveConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateDive", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateDive.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateDive: UpdateDive? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateDive": updateDive.flatMap { $0.snapshot }])
    }

    public var updateDive: UpdateDive? {
      get {
        return (snapshot["updateDive"] as? Snapshot).flatMap { UpdateDive(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateDive")
      }
    }

    public struct UpdateDive: GraphQLSelectionSet {
      public static let possibleTypes = ["Dive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("event", type: .nonNull(.object(Event.selections))),
        GraphQLField("athlete", type: .nonNull(.object(Athlete.selections))),
        GraphQLField("number", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("height", type: .nonNull(.scalar(Double.self))),
        GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
        GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("scores", type: .object(Score.selections)),
        GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, event: Event, athlete: Athlete, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, scores: Score? = nil, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Dive", "id": id, "event": event.snapshot, "athlete": athlete.snapshot, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "scores": scores.flatMap { $0.snapshot }, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var event: Event {
        get {
          return Event(snapshot: snapshot["event"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "event")
        }
      }

      public var athlete: Athlete {
        get {
          return Athlete(snapshot: snapshot["athlete"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "athlete")
        }
      }

      public var number: String {
        get {
          return snapshot["number"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "number")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var height: Double {
        get {
          return snapshot["height"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "height")
        }
      }

      public var netScore: Double {
        get {
          return snapshot["netScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "netScore")
        }
      }

      public var dd: Double {
        get {
          return snapshot["dd"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "dd")
        }
      }

      public var totalScore: Double {
        get {
          return snapshot["totalScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalScore")
        }
      }

      public var scores: Score? {
        get {
          return (snapshot["scores"] as? Snapshot).flatMap { Score(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "scores")
        }
      }

      public var newathleteId: GraphQLID {
        get {
          return snapshot["newathleteID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newathleteID")
        }
      }

      public var neweventId: GraphQLID {
        get {
          return snapshot["neweventID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "neweventID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Score: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelJudgeScoreConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class DeleteDiveMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteDive($input: DeleteDiveInput!, $condition: ModelDiveConditionInput) {\n  deleteDive(input: $input, condition: $condition) {\n    __typename\n    id\n    event {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    number\n    name\n    height\n    netScore\n    dd\n    totalScore\n    scores {\n      __typename\n      nextToken\n      startedAt\n    }\n    newathleteID\n    neweventID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteDiveInput
  public var condition: ModelDiveConditionInput?

  public init(input: DeleteDiveInput, condition: ModelDiveConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteDive", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteDive.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteDive: DeleteDive? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteDive": deleteDive.flatMap { $0.snapshot }])
    }

    public var deleteDive: DeleteDive? {
      get {
        return (snapshot["deleteDive"] as? Snapshot).flatMap { DeleteDive(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteDive")
      }
    }

    public struct DeleteDive: GraphQLSelectionSet {
      public static let possibleTypes = ["Dive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("event", type: .nonNull(.object(Event.selections))),
        GraphQLField("athlete", type: .nonNull(.object(Athlete.selections))),
        GraphQLField("number", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("height", type: .nonNull(.scalar(Double.self))),
        GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
        GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("scores", type: .object(Score.selections)),
        GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, event: Event, athlete: Athlete, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, scores: Score? = nil, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Dive", "id": id, "event": event.snapshot, "athlete": athlete.snapshot, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "scores": scores.flatMap { $0.snapshot }, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var event: Event {
        get {
          return Event(snapshot: snapshot["event"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "event")
        }
      }

      public var athlete: Athlete {
        get {
          return Athlete(snapshot: snapshot["athlete"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "athlete")
        }
      }

      public var number: String {
        get {
          return snapshot["number"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "number")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var height: Double {
        get {
          return snapshot["height"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "height")
        }
      }

      public var netScore: Double {
        get {
          return snapshot["netScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "netScore")
        }
      }

      public var dd: Double {
        get {
          return snapshot["dd"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "dd")
        }
      }

      public var totalScore: Double {
        get {
          return snapshot["totalScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalScore")
        }
      }

      public var scores: Score? {
        get {
          return (snapshot["scores"] as? Snapshot).flatMap { Score(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "scores")
        }
      }

      public var newathleteId: GraphQLID {
        get {
          return snapshot["newathleteID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newathleteID")
        }
      }

      public var neweventId: GraphQLID {
        get {
          return snapshot["neweventID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "neweventID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Score: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelJudgeScoreConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class CreateJudgeScoreMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateJudgeScore($input: CreateJudgeScoreInput!, $condition: ModelJudgeScoreConditionInput) {\n  createJudgeScore(input: $input, condition: $condition) {\n    __typename\n    id\n    dive {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    score\n    diveID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateJudgeScoreInput
  public var condition: ModelJudgeScoreConditionInput?

  public init(input: CreateJudgeScoreInput, condition: ModelJudgeScoreConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createJudgeScore", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateJudgeScore.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createJudgeScore: CreateJudgeScore? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createJudgeScore": createJudgeScore.flatMap { $0.snapshot }])
    }

    public var createJudgeScore: CreateJudgeScore? {
      get {
        return (snapshot["createJudgeScore"] as? Snapshot).flatMap { CreateJudgeScore(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createJudgeScore")
      }
    }

    public struct CreateJudgeScore: GraphQLSelectionSet {
      public static let possibleTypes = ["JudgeScore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("dive", type: .nonNull(.object(Dive.selections))),
        GraphQLField("score", type: .nonNull(.scalar(Double.self))),
        GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, dive: Dive, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "JudgeScore", "id": id, "dive": dive.snapshot, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var dive: Dive {
        get {
          return Dive(snapshot: snapshot["dive"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "dive")
        }
      }

      public var score: Double {
        get {
          return snapshot["score"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "score")
        }
      }

      public var diveId: GraphQLID {
        get {
          return snapshot["diveID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Dive: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class UpdateJudgeScoreMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateJudgeScore($input: UpdateJudgeScoreInput!, $condition: ModelJudgeScoreConditionInput) {\n  updateJudgeScore(input: $input, condition: $condition) {\n    __typename\n    id\n    dive {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    score\n    diveID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateJudgeScoreInput
  public var condition: ModelJudgeScoreConditionInput?

  public init(input: UpdateJudgeScoreInput, condition: ModelJudgeScoreConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateJudgeScore", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateJudgeScore.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateJudgeScore: UpdateJudgeScore? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateJudgeScore": updateJudgeScore.flatMap { $0.snapshot }])
    }

    public var updateJudgeScore: UpdateJudgeScore? {
      get {
        return (snapshot["updateJudgeScore"] as? Snapshot).flatMap { UpdateJudgeScore(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateJudgeScore")
      }
    }

    public struct UpdateJudgeScore: GraphQLSelectionSet {
      public static let possibleTypes = ["JudgeScore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("dive", type: .nonNull(.object(Dive.selections))),
        GraphQLField("score", type: .nonNull(.scalar(Double.self))),
        GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, dive: Dive, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "JudgeScore", "id": id, "dive": dive.snapshot, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var dive: Dive {
        get {
          return Dive(snapshot: snapshot["dive"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "dive")
        }
      }

      public var score: Double {
        get {
          return snapshot["score"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "score")
        }
      }

      public var diveId: GraphQLID {
        get {
          return snapshot["diveID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Dive: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class DeleteJudgeScoreMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteJudgeScore($input: DeleteJudgeScoreInput!, $condition: ModelJudgeScoreConditionInput) {\n  deleteJudgeScore(input: $input, condition: $condition) {\n    __typename\n    id\n    dive {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    score\n    diveID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteJudgeScoreInput
  public var condition: ModelJudgeScoreConditionInput?

  public init(input: DeleteJudgeScoreInput, condition: ModelJudgeScoreConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteJudgeScore", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteJudgeScore.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteJudgeScore: DeleteJudgeScore? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteJudgeScore": deleteJudgeScore.flatMap { $0.snapshot }])
    }

    public var deleteJudgeScore: DeleteJudgeScore? {
      get {
        return (snapshot["deleteJudgeScore"] as? Snapshot).flatMap { DeleteJudgeScore(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteJudgeScore")
      }
    }

    public struct DeleteJudgeScore: GraphQLSelectionSet {
      public static let possibleTypes = ["JudgeScore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("dive", type: .nonNull(.object(Dive.selections))),
        GraphQLField("score", type: .nonNull(.scalar(Double.self))),
        GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, dive: Dive, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "JudgeScore", "id": id, "dive": dive.snapshot, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var dive: Dive {
        get {
          return Dive(snapshot: snapshot["dive"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "dive")
        }
      }

      public var score: Double {
        get {
          return snapshot["score"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "score")
        }
      }

      public var diveId: GraphQLID {
        get {
          return snapshot["diveID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Dive: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class CreateMessageMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateMessage($input: CreateMessageInput!, $condition: ModelMessageConditionInput) {\n  createMessage(input: $input, condition: $condition) {\n    __typename\n    id\n    body\n    creationDate\n    MessageNewUsers {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateMessageInput
  public var condition: ModelMessageConditionInput?

  public init(input: CreateMessageInput, condition: ModelMessageConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createMessage", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createMessage: CreateMessage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createMessage": createMessage.flatMap { $0.snapshot }])
    }

    public var createMessage: CreateMessage? {
      get {
        return (snapshot["createMessage"] as? Snapshot).flatMap { CreateMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createMessage")
      }
    }

    public struct CreateMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("body", type: .nonNull(.scalar(String.self))),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("MessageNewUsers", type: .object(MessageNewUser.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, body: String, creationDate: String, messageNewUsers: MessageNewUser? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "body": body, "creationDate": creationDate, "MessageNewUsers": messageNewUsers.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var body: String {
        get {
          return snapshot["body"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "body")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var messageNewUsers: MessageNewUser? {
        get {
          return (snapshot["MessageNewUsers"] as? Snapshot).flatMap { MessageNewUser(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MessageNewUsers")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct MessageNewUser: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageNewUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class UpdateMessageMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateMessage($input: UpdateMessageInput!, $condition: ModelMessageConditionInput) {\n  updateMessage(input: $input, condition: $condition) {\n    __typename\n    id\n    body\n    creationDate\n    MessageNewUsers {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateMessageInput
  public var condition: ModelMessageConditionInput?

  public init(input: UpdateMessageInput, condition: ModelMessageConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateMessage", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateMessage: UpdateMessage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateMessage": updateMessage.flatMap { $0.snapshot }])
    }

    public var updateMessage: UpdateMessage? {
      get {
        return (snapshot["updateMessage"] as? Snapshot).flatMap { UpdateMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateMessage")
      }
    }

    public struct UpdateMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("body", type: .nonNull(.scalar(String.self))),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("MessageNewUsers", type: .object(MessageNewUser.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, body: String, creationDate: String, messageNewUsers: MessageNewUser? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "body": body, "creationDate": creationDate, "MessageNewUsers": messageNewUsers.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var body: String {
        get {
          return snapshot["body"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "body")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var messageNewUsers: MessageNewUser? {
        get {
          return (snapshot["MessageNewUsers"] as? Snapshot).flatMap { MessageNewUser(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MessageNewUsers")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct MessageNewUser: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageNewUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class DeleteMessageMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteMessage($input: DeleteMessageInput!, $condition: ModelMessageConditionInput) {\n  deleteMessage(input: $input, condition: $condition) {\n    __typename\n    id\n    body\n    creationDate\n    MessageNewUsers {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteMessageInput
  public var condition: ModelMessageConditionInput?

  public init(input: DeleteMessageInput, condition: ModelMessageConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteMessage", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteMessage: DeleteMessage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteMessage": deleteMessage.flatMap { $0.snapshot }])
    }

    public var deleteMessage: DeleteMessage? {
      get {
        return (snapshot["deleteMessage"] as? Snapshot).flatMap { DeleteMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteMessage")
      }
    }

    public struct DeleteMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("body", type: .nonNull(.scalar(String.self))),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("MessageNewUsers", type: .object(MessageNewUser.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, body: String, creationDate: String, messageNewUsers: MessageNewUser? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "body": body, "creationDate": creationDate, "MessageNewUsers": messageNewUsers.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var body: String {
        get {
          return snapshot["body"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "body")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var messageNewUsers: MessageNewUser? {
        get {
          return (snapshot["MessageNewUsers"] as? Snapshot).flatMap { MessageNewUser(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MessageNewUsers")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct MessageNewUser: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageNewUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class CreateDiveMeetsDiverMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateDiveMeetsDiver($input: CreateDiveMeetsDiverInput!, $condition: ModelDiveMeetsDiverConditionInput) {\n  createDiveMeetsDiver(input: $input, condition: $condition) {\n    __typename\n    id\n    firstName\n    lastName\n    finaAge\n    hsGradYear\n    springboardRating\n    platformRating\n    totalRating\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateDiveMeetsDiverInput
  public var condition: ModelDiveMeetsDiverConditionInput?

  public init(input: CreateDiveMeetsDiverInput, condition: ModelDiveMeetsDiverConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createDiveMeetsDiver", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateDiveMeetsDiver.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createDiveMeetsDiver: CreateDiveMeetsDiver? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createDiveMeetsDiver": createDiveMeetsDiver.flatMap { $0.snapshot }])
    }

    public var createDiveMeetsDiver: CreateDiveMeetsDiver? {
      get {
        return (snapshot["createDiveMeetsDiver"] as? Snapshot).flatMap { CreateDiveMeetsDiver(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createDiveMeetsDiver")
      }
    }

    public struct CreateDiveMeetsDiver: GraphQLSelectionSet {
      public static let possibleTypes = ["DiveMeetsDiver"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("finaAge", type: .scalar(Int.self)),
        GraphQLField("hsGradYear", type: .scalar(Int.self)),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "DiveMeetsDiver", "id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var finaAge: Int? {
        get {
          return snapshot["finaAge"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "finaAge")
        }
      }

      public var hsGradYear: Int? {
        get {
          return snapshot["hsGradYear"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "hsGradYear")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class UpdateDiveMeetsDiverMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateDiveMeetsDiver($input: UpdateDiveMeetsDiverInput!, $condition: ModelDiveMeetsDiverConditionInput) {\n  updateDiveMeetsDiver(input: $input, condition: $condition) {\n    __typename\n    id\n    firstName\n    lastName\n    finaAge\n    hsGradYear\n    springboardRating\n    platformRating\n    totalRating\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateDiveMeetsDiverInput
  public var condition: ModelDiveMeetsDiverConditionInput?

  public init(input: UpdateDiveMeetsDiverInput, condition: ModelDiveMeetsDiverConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateDiveMeetsDiver", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateDiveMeetsDiver.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateDiveMeetsDiver: UpdateDiveMeetsDiver? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateDiveMeetsDiver": updateDiveMeetsDiver.flatMap { $0.snapshot }])
    }

    public var updateDiveMeetsDiver: UpdateDiveMeetsDiver? {
      get {
        return (snapshot["updateDiveMeetsDiver"] as? Snapshot).flatMap { UpdateDiveMeetsDiver(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateDiveMeetsDiver")
      }
    }

    public struct UpdateDiveMeetsDiver: GraphQLSelectionSet {
      public static let possibleTypes = ["DiveMeetsDiver"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("finaAge", type: .scalar(Int.self)),
        GraphQLField("hsGradYear", type: .scalar(Int.self)),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "DiveMeetsDiver", "id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var finaAge: Int? {
        get {
          return snapshot["finaAge"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "finaAge")
        }
      }

      public var hsGradYear: Int? {
        get {
          return snapshot["hsGradYear"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "hsGradYear")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class DeleteDiveMeetsDiverMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteDiveMeetsDiver($input: DeleteDiveMeetsDiverInput!, $condition: ModelDiveMeetsDiverConditionInput) {\n  deleteDiveMeetsDiver(input: $input, condition: $condition) {\n    __typename\n    id\n    firstName\n    lastName\n    finaAge\n    hsGradYear\n    springboardRating\n    platformRating\n    totalRating\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteDiveMeetsDiverInput
  public var condition: ModelDiveMeetsDiverConditionInput?

  public init(input: DeleteDiveMeetsDiverInput, condition: ModelDiveMeetsDiverConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteDiveMeetsDiver", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteDiveMeetsDiver.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteDiveMeetsDiver: DeleteDiveMeetsDiver? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteDiveMeetsDiver": deleteDiveMeetsDiver.flatMap { $0.snapshot }])
    }

    public var deleteDiveMeetsDiver: DeleteDiveMeetsDiver? {
      get {
        return (snapshot["deleteDiveMeetsDiver"] as? Snapshot).flatMap { DeleteDiveMeetsDiver(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteDiveMeetsDiver")
      }
    }

    public struct DeleteDiveMeetsDiver: GraphQLSelectionSet {
      public static let possibleTypes = ["DiveMeetsDiver"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("finaAge", type: .scalar(Int.self)),
        GraphQLField("hsGradYear", type: .scalar(Int.self)),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "DiveMeetsDiver", "id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var finaAge: Int? {
        get {
          return snapshot["finaAge"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "finaAge")
        }
      }

      public var hsGradYear: Int? {
        get {
          return snapshot["hsGradYear"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "hsGradYear")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class GetUserSavedPostQuery: GraphQLQuery {
  public static let operationString =
    "query GetUserSavedPost($id: ID!) {\n  getUserSavedPost(id: $id) {\n    __typename\n    id\n    newuserID\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getUserSavedPost", arguments: ["id": GraphQLVariable("id")], type: .object(GetUserSavedPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getUserSavedPost: GetUserSavedPost? = nil) {
      self.init(snapshot: ["__typename": "Query", "getUserSavedPost": getUserSavedPost.flatMap { $0.snapshot }])
    }

    public var getUserSavedPost: GetUserSavedPost? {
      get {
        return (snapshot["getUserSavedPost"] as? Snapshot).flatMap { GetUserSavedPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getUserSavedPost")
      }
    }

    public struct GetUserSavedPost: GraphQLSelectionSet {
      public static let possibleTypes = ["UserSavedPost"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class ListUserSavedPostsQuery: GraphQLQuery {
  public static let operationString =
    "query ListUserSavedPosts($filter: ModelUserSavedPostFilterInput, $limit: Int, $nextToken: String) {\n  listUserSavedPosts(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      newuserID\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelUserSavedPostFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelUserSavedPostFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listUserSavedPosts", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListUserSavedPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listUserSavedPosts: ListUserSavedPost? = nil) {
      self.init(snapshot: ["__typename": "Query", "listUserSavedPosts": listUserSavedPosts.flatMap { $0.snapshot }])
    }

    public var listUserSavedPosts: ListUserSavedPost? {
      get {
        return (snapshot["listUserSavedPosts"] as? Snapshot).flatMap { ListUserSavedPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listUserSavedPosts")
      }
    }

    public struct ListUserSavedPost: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserSavedPostConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["UserSavedPost"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncUserSavedPostsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncUserSavedPosts($filter: ModelUserSavedPostFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncUserSavedPosts(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      newuserID\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelUserSavedPostFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelUserSavedPostFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncUserSavedPosts", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncUserSavedPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncUserSavedPosts: SyncUserSavedPost? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncUserSavedPosts": syncUserSavedPosts.flatMap { $0.snapshot }])
    }

    public var syncUserSavedPosts: SyncUserSavedPost? {
      get {
        return (snapshot["syncUserSavedPosts"] as? Snapshot).flatMap { SyncUserSavedPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncUserSavedPosts")
      }
    }

    public struct SyncUserSavedPost: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserSavedPostConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["UserSavedPost"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class UserSavedPostsByNewuserIdQuery: GraphQLQuery {
  public static let operationString =
    "query UserSavedPostsByNewuserID($newuserID: ID!, $sortDirection: ModelSortDirection, $filter: ModelUserSavedPostFilterInput, $limit: Int, $nextToken: String) {\n  userSavedPostsByNewuserID(\n    newuserID: $newuserID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      newuserID\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var newuserID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelUserSavedPostFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(newuserID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelUserSavedPostFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.newuserID = newuserID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["newuserID": newuserID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("userSavedPostsByNewuserID", arguments: ["newuserID": GraphQLVariable("newuserID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(UserSavedPostsByNewuserId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(userSavedPostsByNewuserId: UserSavedPostsByNewuserId? = nil) {
      self.init(snapshot: ["__typename": "Query", "userSavedPostsByNewuserID": userSavedPostsByNewuserId.flatMap { $0.snapshot }])
    }

    public var userSavedPostsByNewuserId: UserSavedPostsByNewuserId? {
      get {
        return (snapshot["userSavedPostsByNewuserID"] as? Snapshot).flatMap { UserSavedPostsByNewuserId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "userSavedPostsByNewuserID")
      }
    }

    public struct UserSavedPostsByNewuserId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserSavedPostConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["UserSavedPost"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class UserSavedPostsByPostIdQuery: GraphQLQuery {
  public static let operationString =
    "query UserSavedPostsByPostID($postID: ID!, $sortDirection: ModelSortDirection, $filter: ModelUserSavedPostFilterInput, $limit: Int, $nextToken: String) {\n  userSavedPostsByPostID(\n    postID: $postID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      newuserID\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var postID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelUserSavedPostFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(postID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelUserSavedPostFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.postID = postID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["postID": postID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("userSavedPostsByPostID", arguments: ["postID": GraphQLVariable("postID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(UserSavedPostsByPostId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(userSavedPostsByPostId: UserSavedPostsByPostId? = nil) {
      self.init(snapshot: ["__typename": "Query", "userSavedPostsByPostID": userSavedPostsByPostId.flatMap { $0.snapshot }])
    }

    public var userSavedPostsByPostId: UserSavedPostsByPostId? {
      get {
        return (snapshot["userSavedPostsByPostID"] as? Snapshot).flatMap { UserSavedPostsByPostId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "userSavedPostsByPostID")
      }
    }

    public struct UserSavedPostsByPostId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserSavedPostConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["UserSavedPost"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetPostQuery: GraphQLQuery {
  public static let operationString =
    "query GetPost($id: ID!) {\n  getPost(id: $id) {\n    __typename\n    id\n    caption\n    creationDate\n    images {\n      __typename\n      nextToken\n      startedAt\n    }\n    videos {\n      __typename\n      nextToken\n      startedAt\n    }\n    newuserID\n    usersSaving {\n      __typename\n      nextToken\n      startedAt\n    }\n    isCoachesOnly\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getPost", arguments: ["id": GraphQLVariable("id")], type: .object(GetPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getPost: GetPost? = nil) {
      self.init(snapshot: ["__typename": "Query", "getPost": getPost.flatMap { $0.snapshot }])
    }

    public var getPost: GetPost? {
      get {
        return (snapshot["getPost"] as? Snapshot).flatMap { GetPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getPost")
      }
    }

    public struct GetPost: GraphQLSelectionSet {
      public static let possibleTypes = ["Post"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("caption", type: .scalar(String.self)),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("images", type: .object(Image.selections)),
        GraphQLField("videos", type: .object(Video.selections)),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("usersSaving", type: .object(UsersSaving.selections)),
        GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, caption: String? = nil, creationDate: String, images: Image? = nil, videos: Video? = nil, newuserId: GraphQLID, usersSaving: UsersSaving? = nil, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "images": images.flatMap { $0.snapshot }, "videos": videos.flatMap { $0.snapshot }, "newuserID": newuserId, "usersSaving": usersSaving.flatMap { $0.snapshot }, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var caption: String? {
        get {
          return snapshot["caption"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "caption")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var images: Image? {
        get {
          return (snapshot["images"] as? Snapshot).flatMap { Image(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "images")
        }
      }

      public var videos: Video? {
        get {
          return (snapshot["videos"] as? Snapshot).flatMap { Video(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "videos")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var usersSaving: UsersSaving? {
        get {
          return (snapshot["usersSaving"] as? Snapshot).flatMap { UsersSaving(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "usersSaving")
        }
      }

      public var isCoachesOnly: Bool {
        get {
          return snapshot["isCoachesOnly"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCoachesOnly")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewImageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewImageConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVideoConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVideoConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct UsersSaving: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class ListPostsQuery: GraphQLQuery {
  public static let operationString =
    "query ListPosts($filter: ModelPostFilterInput, $limit: Int, $nextToken: String) {\n  listPosts(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      caption\n      creationDate\n      newuserID\n      isCoachesOnly\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelPostFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelPostFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listPosts", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listPosts: ListPost? = nil) {
      self.init(snapshot: ["__typename": "Query", "listPosts": listPosts.flatMap { $0.snapshot }])
    }

    public var listPosts: ListPost? {
      get {
        return (snapshot["listPosts"] as? Snapshot).flatMap { ListPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listPosts")
      }
    }

    public struct ListPost: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelPostConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelPostConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Post"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("caption", type: .scalar(String.self)),
          GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, caption: String? = nil, creationDate: String, newuserId: GraphQLID, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "newuserID": newuserId, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var caption: String? {
          get {
            return snapshot["caption"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "caption")
          }
        }

        public var creationDate: String {
          get {
            return snapshot["creationDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "creationDate")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var isCoachesOnly: Bool {
          get {
            return snapshot["isCoachesOnly"]! as! Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isCoachesOnly")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncPostsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncPosts($filter: ModelPostFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncPosts(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      caption\n      creationDate\n      newuserID\n      isCoachesOnly\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelPostFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelPostFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncPosts", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncPosts: SyncPost? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncPosts": syncPosts.flatMap { $0.snapshot }])
    }

    public var syncPosts: SyncPost? {
      get {
        return (snapshot["syncPosts"] as? Snapshot).flatMap { SyncPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncPosts")
      }
    }

    public struct SyncPost: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelPostConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelPostConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Post"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("caption", type: .scalar(String.self)),
          GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, caption: String? = nil, creationDate: String, newuserId: GraphQLID, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "newuserID": newuserId, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var caption: String? {
          get {
            return snapshot["caption"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "caption")
          }
        }

        public var creationDate: String {
          get {
            return snapshot["creationDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "creationDate")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var isCoachesOnly: Bool {
          get {
            return snapshot["isCoachesOnly"]! as! Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isCoachesOnly")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class PostsByNewuserIdQuery: GraphQLQuery {
  public static let operationString =
    "query PostsByNewuserID($newuserID: ID!, $sortDirection: ModelSortDirection, $filter: ModelPostFilterInput, $limit: Int, $nextToken: String) {\n  postsByNewuserID(\n    newuserID: $newuserID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      caption\n      creationDate\n      newuserID\n      isCoachesOnly\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var newuserID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelPostFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(newuserID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelPostFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.newuserID = newuserID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["newuserID": newuserID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("postsByNewuserID", arguments: ["newuserID": GraphQLVariable("newuserID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(PostsByNewuserId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(postsByNewuserId: PostsByNewuserId? = nil) {
      self.init(snapshot: ["__typename": "Query", "postsByNewuserID": postsByNewuserId.flatMap { $0.snapshot }])
    }

    public var postsByNewuserId: PostsByNewuserId? {
      get {
        return (snapshot["postsByNewuserID"] as? Snapshot).flatMap { PostsByNewuserId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "postsByNewuserID")
      }
    }

    public struct PostsByNewuserId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelPostConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelPostConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Post"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("caption", type: .scalar(String.self)),
          GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, caption: String? = nil, creationDate: String, newuserId: GraphQLID, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "newuserID": newuserId, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var caption: String? {
          get {
            return snapshot["caption"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "caption")
          }
        }

        public var creationDate: String {
          get {
            return snapshot["creationDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "creationDate")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var isCoachesOnly: Bool {
          get {
            return snapshot["isCoachesOnly"]! as! Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isCoachesOnly")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetNewImageQuery: GraphQLQuery {
  public static let operationString =
    "query GetNewImage($id: ID!) {\n  getNewImage(id: $id) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getNewImage", arguments: ["id": GraphQLVariable("id")], type: .object(GetNewImage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getNewImage: GetNewImage? = nil) {
      self.init(snapshot: ["__typename": "Query", "getNewImage": getNewImage.flatMap { $0.snapshot }])
    }

    public var getNewImage: GetNewImage? {
      get {
        return (snapshot["getNewImage"] as? Snapshot).flatMap { GetNewImage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getNewImage")
      }
    }

    public struct GetNewImage: GraphQLSelectionSet {
      public static let possibleTypes = ["NewImage"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class ListNewImagesQuery: GraphQLQuery {
  public static let operationString =
    "query ListNewImages($filter: ModelNewImageFilterInput, $limit: Int, $nextToken: String) {\n  listNewImages(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      s3key\n      uploadDate\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewImageFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelNewImageFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listNewImages", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListNewImage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listNewImages: ListNewImage? = nil) {
      self.init(snapshot: ["__typename": "Query", "listNewImages": listNewImages.flatMap { $0.snapshot }])
    }

    public var listNewImages: ListNewImage? {
      get {
        return (snapshot["listNewImages"] as? Snapshot).flatMap { ListNewImage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listNewImages")
      }
    }

    public struct ListNewImage: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewImageConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewImageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewImage"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
          GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var s3key: String {
          get {
            return snapshot["s3key"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3key")
          }
        }

        public var uploadDate: String {
          get {
            return snapshot["uploadDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploadDate")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncNewImagesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncNewImages($filter: ModelNewImageFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncNewImages(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      s3key\n      uploadDate\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewImageFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelNewImageFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncNewImages", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncNewImage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncNewImages: SyncNewImage? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncNewImages": syncNewImages.flatMap { $0.snapshot }])
    }

    public var syncNewImages: SyncNewImage? {
      get {
        return (snapshot["syncNewImages"] as? Snapshot).flatMap { SyncNewImage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncNewImages")
      }
    }

    public struct SyncNewImage: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewImageConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewImageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewImage"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
          GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var s3key: String {
          get {
            return snapshot["s3key"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3key")
          }
        }

        public var uploadDate: String {
          get {
            return snapshot["uploadDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploadDate")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class NewImagesByPostIdQuery: GraphQLQuery {
  public static let operationString =
    "query NewImagesByPostID($postID: ID!, $sortDirection: ModelSortDirection, $filter: ModelNewImageFilterInput, $limit: Int, $nextToken: String) {\n  newImagesByPostID(\n    postID: $postID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      s3key\n      uploadDate\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var postID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelNewImageFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(postID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelNewImageFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.postID = postID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["postID": postID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("newImagesByPostID", arguments: ["postID": GraphQLVariable("postID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(NewImagesByPostId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(newImagesByPostId: NewImagesByPostId? = nil) {
      self.init(snapshot: ["__typename": "Query", "newImagesByPostID": newImagesByPostId.flatMap { $0.snapshot }])
    }

    public var newImagesByPostId: NewImagesByPostId? {
      get {
        return (snapshot["newImagesByPostID"] as? Snapshot).flatMap { NewImagesByPostId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "newImagesByPostID")
      }
    }

    public struct NewImagesByPostId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewImageConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewImageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewImage"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
          GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var s3key: String {
          get {
            return snapshot["s3key"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3key")
          }
        }

        public var uploadDate: String {
          get {
            return snapshot["uploadDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploadDate")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetMessageNewUserQuery: GraphQLQuery {
  public static let operationString =
    "query GetMessageNewUser($id: ID!) {\n  getMessageNewUser(id: $id) {\n    __typename\n    id\n    isSender\n    newuserID\n    messageID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getMessageNewUser", arguments: ["id": GraphQLVariable("id")], type: .object(GetMessageNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getMessageNewUser: GetMessageNewUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "getMessageNewUser": getMessageNewUser.flatMap { $0.snapshot }])
    }

    public var getMessageNewUser: GetMessageNewUser? {
      get {
        return (snapshot["getMessageNewUser"] as? Snapshot).flatMap { GetMessageNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getMessageNewUser")
      }
    }

    public struct GetMessageNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["MessageNewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var isSender: Bool {
        get {
          return snapshot["isSender"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSender")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var messageId: GraphQLID {
        get {
          return snapshot["messageID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "messageID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class ListMessageNewUsersQuery: GraphQLQuery {
  public static let operationString =
    "query ListMessageNewUsers($filter: ModelMessageNewUserFilterInput, $limit: Int, $nextToken: String) {\n  listMessageNewUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      isSender\n      newuserID\n      messageID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelMessageNewUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelMessageNewUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listMessageNewUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListMessageNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listMessageNewUsers: ListMessageNewUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "listMessageNewUsers": listMessageNewUsers.flatMap { $0.snapshot }])
    }

    public var listMessageNewUsers: ListMessageNewUser? {
      get {
        return (snapshot["listMessageNewUsers"] as? Snapshot).flatMap { ListMessageNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listMessageNewUsers")
      }
    }

    public struct ListMessageNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMessageNewUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageNewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var isSender: Bool {
          get {
            return snapshot["isSender"]! as! Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSender")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var messageId: GraphQLID {
          get {
            return snapshot["messageID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "messageID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncMessageNewUsersQuery: GraphQLQuery {
  public static let operationString =
    "query SyncMessageNewUsers($filter: ModelMessageNewUserFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncMessageNewUsers(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      isSender\n      newuserID\n      messageID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelMessageNewUserFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelMessageNewUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncMessageNewUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncMessageNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncMessageNewUsers: SyncMessageNewUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncMessageNewUsers": syncMessageNewUsers.flatMap { $0.snapshot }])
    }

    public var syncMessageNewUsers: SyncMessageNewUser? {
      get {
        return (snapshot["syncMessageNewUsers"] as? Snapshot).flatMap { SyncMessageNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncMessageNewUsers")
      }
    }

    public struct SyncMessageNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMessageNewUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageNewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var isSender: Bool {
          get {
            return snapshot["isSender"]! as! Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSender")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var messageId: GraphQLID {
          get {
            return snapshot["messageID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "messageID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class MessageNewUsersByNewuserIdQuery: GraphQLQuery {
  public static let operationString =
    "query MessageNewUsersByNewuserID($newuserID: ID!, $sortDirection: ModelSortDirection, $filter: ModelMessageNewUserFilterInput, $limit: Int, $nextToken: String) {\n  messageNewUsersByNewuserID(\n    newuserID: $newuserID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      isSender\n      newuserID\n      messageID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var newuserID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelMessageNewUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(newuserID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelMessageNewUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.newuserID = newuserID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["newuserID": newuserID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("messageNewUsersByNewuserID", arguments: ["newuserID": GraphQLVariable("newuserID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(MessageNewUsersByNewuserId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(messageNewUsersByNewuserId: MessageNewUsersByNewuserId? = nil) {
      self.init(snapshot: ["__typename": "Query", "messageNewUsersByNewuserID": messageNewUsersByNewuserId.flatMap { $0.snapshot }])
    }

    public var messageNewUsersByNewuserId: MessageNewUsersByNewuserId? {
      get {
        return (snapshot["messageNewUsersByNewuserID"] as? Snapshot).flatMap { MessageNewUsersByNewuserId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "messageNewUsersByNewuserID")
      }
    }

    public struct MessageNewUsersByNewuserId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMessageNewUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageNewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var isSender: Bool {
          get {
            return snapshot["isSender"]! as! Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSender")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var messageId: GraphQLID {
          get {
            return snapshot["messageID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "messageID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class MessageNewUsersByMessageIdQuery: GraphQLQuery {
  public static let operationString =
    "query MessageNewUsersByMessageID($messageID: ID!, $sortDirection: ModelSortDirection, $filter: ModelMessageNewUserFilterInput, $limit: Int, $nextToken: String) {\n  messageNewUsersByMessageID(\n    messageID: $messageID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      isSender\n      newuserID\n      messageID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var messageID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelMessageNewUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(messageID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelMessageNewUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.messageID = messageID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["messageID": messageID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("messageNewUsersByMessageID", arguments: ["messageID": GraphQLVariable("messageID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(MessageNewUsersByMessageId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(messageNewUsersByMessageId: MessageNewUsersByMessageId? = nil) {
      self.init(snapshot: ["__typename": "Query", "messageNewUsersByMessageID": messageNewUsersByMessageId.flatMap { $0.snapshot }])
    }

    public var messageNewUsersByMessageId: MessageNewUsersByMessageId? {
      get {
        return (snapshot["messageNewUsersByMessageID"] as? Snapshot).flatMap { MessageNewUsersByMessageId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "messageNewUsersByMessageID")
      }
    }

    public struct MessageNewUsersByMessageId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMessageNewUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageNewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var isSender: Bool {
          get {
            return snapshot["isSender"]! as! Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSender")
          }
        }

        public var newuserId: GraphQLID {
          get {
            return snapshot["newuserID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newuserID")
          }
        }

        public var messageId: GraphQLID {
          get {
            return snapshot["messageID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "messageID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetNewUserQuery: GraphQLQuery {
  public static let operationString =
    "query GetNewUser($id: ID!) {\n  getNewUser(id: $id) {\n    __typename\n    id\n    firstName\n    lastName\n    email\n    phone\n    diveMeetsID\n    accountType\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    posts {\n      __typename\n      nextToken\n      startedAt\n    }\n    tokens\n    savedPosts {\n      __typename\n      nextToken\n      startedAt\n    }\n    favoritesIds\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newUserAthleteId\n    newUserCoachId\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getNewUser", arguments: ["id": GraphQLVariable("id")], type: .object(GetNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getNewUser: GetNewUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "getNewUser": getNewUser.flatMap { $0.snapshot }])
    }

    public var getNewUser: GetNewUser? {
      get {
        return (snapshot["getNewUser"] as? Snapshot).flatMap { GetNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getNewUser")
      }
    }

    public struct GetNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["NewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("diveMeetsID", type: .scalar(String.self)),
        GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
        GraphQLField("athlete", type: .object(Athlete.selections)),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("posts", type: .object(Post.selections)),
        GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("savedPosts", type: .object(SavedPost.selections)),
        GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
        GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, athlete: Athlete? = nil, coach: Coach? = nil, posts: Post? = nil, tokens: [String], savedPosts: SavedPost? = nil, favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "athlete": athlete.flatMap { $0.snapshot }, "coach": coach.flatMap { $0.snapshot }, "posts": posts.flatMap { $0.snapshot }, "tokens": tokens, "savedPosts": savedPosts.flatMap { $0.snapshot }, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var diveMeetsId: String? {
        get {
          return snapshot["diveMeetsID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveMeetsID")
        }
      }

      public var accountType: String {
        get {
          return snapshot["accountType"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "accountType")
        }
      }

      public var athlete: Athlete? {
        get {
          return (snapshot["athlete"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athlete")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var posts: Post? {
        get {
          return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "posts")
        }
      }

      public var tokens: [String] {
        get {
          return snapshot["tokens"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "tokens")
        }
      }

      public var savedPosts: SavedPost? {
        get {
          return (snapshot["savedPosts"] as? Snapshot).flatMap { SavedPost(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "savedPosts")
        }
      }

      public var favoritesIds: [String] {
        get {
          return snapshot["favoritesIds"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "favoritesIds")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newUserAthleteId: GraphQLID? {
        get {
          return snapshot["newUserAthleteId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserAthleteId")
        }
      }

      public var newUserCoachId: GraphQLID? {
        get {
          return snapshot["newUserCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserCoachId")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Post: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct SavedPost: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class ListNewUsersQuery: GraphQLQuery {
  public static let operationString =
    "query ListNewUsers($filter: ModelNewUserFilterInput, $limit: Int, $nextToken: String) {\n  listNewUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelNewUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listNewUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listNewUsers: ListNewUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "listNewUsers": listNewUsers.flatMap { $0.snapshot }])
    }

    public var listNewUsers: ListNewUser? {
      get {
        return (snapshot["listNewUsers"] as? Snapshot).flatMap { ListNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listNewUsers")
      }
    }

    public struct ListNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }
    }
  }
}

public final class SyncNewUsersQuery: GraphQLQuery {
  public static let operationString =
    "query SyncNewUsers($filter: ModelNewUserFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncNewUsers(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewUserFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelNewUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncNewUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncNewUsers: SyncNewUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncNewUsers": syncNewUsers.flatMap { $0.snapshot }])
    }

    public var syncNewUsers: SyncNewUser? {
      get {
        return (snapshot["syncNewUsers"] as? Snapshot).flatMap { SyncNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncNewUsers")
      }
    }

    public struct SyncNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }
    }
  }
}

public final class GetNewAthleteQuery: GraphQLQuery {
  public static let operationString =
    "query GetNewAthlete($id: ID!) {\n  getNewAthlete(id: $id) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    college {\n      __typename\n      id\n      name\n      imageLink\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    heightFeet\n    heightInches\n    weight\n    weightUnit\n    gender\n    age\n    graduationYear\n    highSchool\n    hometown\n    springboardRating\n    platformRating\n    totalRating\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    collegeID\n    newteamID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newAthleteUserId\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getNewAthlete", arguments: ["id": GraphQLVariable("id")], type: .object(GetNewAthlete.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getNewAthlete: GetNewAthlete? = nil) {
      self.init(snapshot: ["__typename": "Query", "getNewAthlete": getNewAthlete.flatMap { $0.snapshot }])
    }

    public var getNewAthlete: GetNewAthlete? {
      get {
        return (snapshot["getNewAthlete"] as? Snapshot).flatMap { GetNewAthlete(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getNewAthlete")
      }
    }

    public struct GetNewAthlete: GraphQLSelectionSet {
      public static let possibleTypes = ["NewAthlete"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("college", type: .object(College.selections)),
        GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
        GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
        GraphQLField("gender", type: .nonNull(.scalar(String.self))),
        GraphQLField("age", type: .nonNull(.scalar(Int.self))),
        GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
        GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
        GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
        GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User, team: Team? = nil, college: College? = nil, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, dives: Dife? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
        self.init(snapshot: ["__typename": "NewAthlete", "id": id, "user": user.snapshot, "team": team.flatMap { $0.snapshot }, "college": college.flatMap { $0.snapshot }, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "dives": dives.flatMap { $0.snapshot }, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var college: College? {
        get {
          return (snapshot["college"] as? Snapshot).flatMap { College(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "college")
        }
      }

      public var heightFeet: Int {
        get {
          return snapshot["heightFeet"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightFeet")
        }
      }

      public var heightInches: Int {
        get {
          return snapshot["heightInches"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightInches")
        }
      }

      public var weight: Int {
        get {
          return snapshot["weight"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "weight")
        }
      }

      public var weightUnit: String {
        get {
          return snapshot["weightUnit"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "weightUnit")
        }
      }

      public var gender: String {
        get {
          return snapshot["gender"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var age: Int {
        get {
          return snapshot["age"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "age")
        }
      }

      public var graduationYear: Int {
        get {
          return snapshot["graduationYear"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "graduationYear")
        }
      }

      public var highSchool: String {
        get {
          return snapshot["highSchool"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "highSchool")
        }
      }

      public var hometown: String {
        get {
          return snapshot["hometown"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hometown")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var collegeId: GraphQLID? {
        get {
          return snapshot["collegeID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collegeID")
        }
      }

      public var newteamId: GraphQLID? {
        get {
          return snapshot["newteamID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newteamID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newAthleteUserId: GraphQLID {
        get {
          return snapshot["newAthleteUserId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newAthleteUserId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }

      public struct College: GraphQLSelectionSet {
        public static let possibleTypes = ["College"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, imageLink: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var imageLink: String {
          get {
            return snapshot["imageLink"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "imageLink")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class ListNewAthletesQuery: GraphQLQuery {
  public static let operationString =
    "query ListNewAthletes($filter: ModelNewAthleteFilterInput, $limit: Int, $nextToken: String) {\n  listNewAthletes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewAthleteFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelNewAthleteFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listNewAthletes", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListNewAthlete.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listNewAthletes: ListNewAthlete? = nil) {
      self.init(snapshot: ["__typename": "Query", "listNewAthletes": listNewAthletes.flatMap { $0.snapshot }])
    }

    public var listNewAthletes: ListNewAthlete? {
      get {
        return (snapshot["listNewAthletes"] as? Snapshot).flatMap { ListNewAthlete(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listNewAthletes")
      }
    }

    public struct ListNewAthlete: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewAthleteConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }
    }
  }
}

public final class SyncNewAthletesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncNewAthletes($filter: ModelNewAthleteFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncNewAthletes(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewAthleteFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelNewAthleteFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncNewAthletes", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncNewAthlete.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncNewAthletes: SyncNewAthlete? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncNewAthletes": syncNewAthletes.flatMap { $0.snapshot }])
    }

    public var syncNewAthletes: SyncNewAthlete? {
      get {
        return (snapshot["syncNewAthletes"] as? Snapshot).flatMap { SyncNewAthlete(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncNewAthletes")
      }
    }

    public struct SyncNewAthlete: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewAthleteConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }
    }
  }
}

public final class NewAthletesByCollegeIdQuery: GraphQLQuery {
  public static let operationString =
    "query NewAthletesByCollegeID($collegeID: ID!, $sortDirection: ModelSortDirection, $filter: ModelNewAthleteFilterInput, $limit: Int, $nextToken: String) {\n  newAthletesByCollegeID(\n    collegeID: $collegeID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var collegeID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelNewAthleteFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(collegeID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelNewAthleteFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.collegeID = collegeID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["collegeID": collegeID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("newAthletesByCollegeID", arguments: ["collegeID": GraphQLVariable("collegeID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(NewAthletesByCollegeId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(newAthletesByCollegeId: NewAthletesByCollegeId? = nil) {
      self.init(snapshot: ["__typename": "Query", "newAthletesByCollegeID": newAthletesByCollegeId.flatMap { $0.snapshot }])
    }

    public var newAthletesByCollegeId: NewAthletesByCollegeId? {
      get {
        return (snapshot["newAthletesByCollegeID"] as? Snapshot).flatMap { NewAthletesByCollegeId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "newAthletesByCollegeID")
      }
    }

    public struct NewAthletesByCollegeId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewAthleteConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }
    }
  }
}

public final class NewAthletesByNewteamIdQuery: GraphQLQuery {
  public static let operationString =
    "query NewAthletesByNewteamID($newteamID: ID!, $sortDirection: ModelSortDirection, $filter: ModelNewAthleteFilterInput, $limit: Int, $nextToken: String) {\n  newAthletesByNewteamID(\n    newteamID: $newteamID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var newteamID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelNewAthleteFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(newteamID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelNewAthleteFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.newteamID = newteamID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["newteamID": newteamID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("newAthletesByNewteamID", arguments: ["newteamID": GraphQLVariable("newteamID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(NewAthletesByNewteamId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(newAthletesByNewteamId: NewAthletesByNewteamId? = nil) {
      self.init(snapshot: ["__typename": "Query", "newAthletesByNewteamID": newAthletesByNewteamId.flatMap { $0.snapshot }])
    }

    public var newAthletesByNewteamId: NewAthletesByNewteamId? {
      get {
        return (snapshot["newAthletesByNewteamID"] as? Snapshot).flatMap { NewAthletesByNewteamId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "newAthletesByNewteamID")
      }
    }

    public struct NewAthletesByNewteamId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewAthleteConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }
    }
  }
}

public final class GetVideoQuery: GraphQLQuery {
  public static let operationString =
    "query GetVideo($id: ID!) {\n  getVideo(id: $id) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getVideo", arguments: ["id": GraphQLVariable("id")], type: .object(GetVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getVideo: GetVideo? = nil) {
      self.init(snapshot: ["__typename": "Query", "getVideo": getVideo.flatMap { $0.snapshot }])
    }

    public var getVideo: GetVideo? {
      get {
        return (snapshot["getVideo"] as? Snapshot).flatMap { GetVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getVideo")
      }
    }

    public struct GetVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["Video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class ListVideosQuery: GraphQLQuery {
  public static let operationString =
    "query ListVideos($filter: ModelVideoFilterInput, $limit: Int, $nextToken: String) {\n  listVideos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      s3key\n      uploadDate\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelVideoFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelVideoFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listVideos", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listVideos: ListVideo? = nil) {
      self.init(snapshot: ["__typename": "Query", "listVideos": listVideos.flatMap { $0.snapshot }])
    }

    public var listVideos: ListVideo? {
      get {
        return (snapshot["listVideos"] as? Snapshot).flatMap { ListVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listVideos")
      }
    }

    public struct ListVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelVideoConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelVideoConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Video"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
          GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var s3key: String {
          get {
            return snapshot["s3key"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3key")
          }
        }

        public var uploadDate: String {
          get {
            return snapshot["uploadDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploadDate")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncVideosQuery: GraphQLQuery {
  public static let operationString =
    "query SyncVideos($filter: ModelVideoFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncVideos(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      s3key\n      uploadDate\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelVideoFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelVideoFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncVideos", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncVideos: SyncVideo? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncVideos": syncVideos.flatMap { $0.snapshot }])
    }

    public var syncVideos: SyncVideo? {
      get {
        return (snapshot["syncVideos"] as? Snapshot).flatMap { SyncVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncVideos")
      }
    }

    public struct SyncVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelVideoConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelVideoConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Video"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
          GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var s3key: String {
          get {
            return snapshot["s3key"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3key")
          }
        }

        public var uploadDate: String {
          get {
            return snapshot["uploadDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploadDate")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class VideosByPostIdQuery: GraphQLQuery {
  public static let operationString =
    "query VideosByPostID($postID: ID!, $sortDirection: ModelSortDirection, $filter: ModelVideoFilterInput, $limit: Int, $nextToken: String) {\n  videosByPostID(\n    postID: $postID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      s3key\n      uploadDate\n      postID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var postID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelVideoFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(postID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelVideoFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.postID = postID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["postID": postID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("videosByPostID", arguments: ["postID": GraphQLVariable("postID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(VideosByPostId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(videosByPostId: VideosByPostId? = nil) {
      self.init(snapshot: ["__typename": "Query", "videosByPostID": videosByPostId.flatMap { $0.snapshot }])
    }

    public var videosByPostId: VideosByPostId? {
      get {
        return (snapshot["videosByPostID"] as? Snapshot).flatMap { VideosByPostId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "videosByPostID")
      }
    }

    public struct VideosByPostId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelVideoConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelVideoConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Video"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
          GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var s3key: String {
          get {
            return snapshot["s3key"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "s3key")
          }
        }

        public var uploadDate: String {
          get {
            return snapshot["uploadDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "uploadDate")
          }
        }

        public var postId: GraphQLID {
          get {
            return snapshot["postID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "postID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetCoachUserQuery: GraphQLQuery {
  public static let operationString =
    "query GetCoachUser($id: ID!) {\n  getCoachUser(id: $id) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    coachUserUserId\n    coachUserTeamId\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getCoachUser", arguments: ["id": GraphQLVariable("id")], type: .object(GetCoachUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getCoachUser: GetCoachUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "getCoachUser": getCoachUser.flatMap { $0.snapshot }])
    }

    public var getCoachUser: GetCoachUser? {
      get {
        return (snapshot["getCoachUser"] as? Snapshot).flatMap { GetCoachUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getCoachUser")
      }
    }

    public struct GetCoachUser: GraphQLSelectionSet {
      public static let possibleTypes = ["CoachUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
        GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User? = nil, team: Team? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "CoachUser", "id": id, "user": user.flatMap { $0.snapshot }, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var coachUserUserId: GraphQLID? {
        get {
          return snapshot["coachUserUserId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserUserId")
        }
      }

      public var coachUserTeamId: GraphQLID? {
        get {
          return snapshot["coachUserTeamId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserTeamId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }
    }
  }
}

public final class ListCoachUsersQuery: GraphQLQuery {
  public static let operationString =
    "query ListCoachUsers($filter: ModelCoachUserFilterInput, $limit: Int, $nextToken: String) {\n  listCoachUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelCoachUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelCoachUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listCoachUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListCoachUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listCoachUsers: ListCoachUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "listCoachUsers": listCoachUsers.flatMap { $0.snapshot }])
    }

    public var listCoachUsers: ListCoachUser? {
      get {
        return (snapshot["listCoachUsers"] as? Snapshot).flatMap { ListCoachUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listCoachUsers")
      }
    }

    public struct ListCoachUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelCoachUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelCoachUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }
    }
  }
}

public final class SyncCoachUsersQuery: GraphQLQuery {
  public static let operationString =
    "query SyncCoachUsers($filter: ModelCoachUserFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncCoachUsers(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelCoachUserFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelCoachUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncCoachUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncCoachUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncCoachUsers: SyncCoachUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncCoachUsers": syncCoachUsers.flatMap { $0.snapshot }])
    }

    public var syncCoachUsers: SyncCoachUser? {
      get {
        return (snapshot["syncCoachUsers"] as? Snapshot).flatMap { SyncCoachUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncCoachUsers")
      }
    }

    public struct SyncCoachUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelCoachUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelCoachUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }
    }
  }
}

public final class GetNewTeamQuery: GraphQLQuery {
  public static let operationString =
    "query GetNewTeam($id: ID!) {\n  getNewTeam(id: $id) {\n    __typename\n    id\n    name\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newTeamCoachId\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getNewTeam", arguments: ["id": GraphQLVariable("id")], type: .object(GetNewTeam.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getNewTeam: GetNewTeam? = nil) {
      self.init(snapshot: ["__typename": "Query", "getNewTeam": getNewTeam.flatMap { $0.snapshot }])
    }

    public var getNewTeam: GetNewTeam? {
      get {
        return (snapshot["getNewTeam"] as? Snapshot).flatMap { GetNewTeam(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getNewTeam")
      }
    }

    public struct GetNewTeam: GraphQLSelectionSet {
      public static let possibleTypes = ["NewTeam"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, coach: Coach? = nil, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "coach": coach.flatMap { $0.snapshot }, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newTeamCoachId: GraphQLID? {
        get {
          return snapshot["newTeamCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newTeamCoachId")
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class ListNewTeamsQuery: GraphQLQuery {
  public static let operationString =
    "query ListNewTeams($filter: ModelNewTeamFilterInput, $limit: Int, $nextToken: String) {\n  listNewTeams(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewTeamFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelNewTeamFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listNewTeams", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListNewTeam.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listNewTeams: ListNewTeam? = nil) {
      self.init(snapshot: ["__typename": "Query", "listNewTeams": listNewTeams.flatMap { $0.snapshot }])
    }

    public var listNewTeams: ListNewTeam? {
      get {
        return (snapshot["listNewTeams"] as? Snapshot).flatMap { ListNewTeam(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listNewTeams")
      }
    }

    public struct ListNewTeam: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewTeamConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewTeamConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }
    }
  }
}

public final class SyncNewTeamsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncNewTeams($filter: ModelNewTeamFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncNewTeams(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewTeamFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelNewTeamFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncNewTeams", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncNewTeam.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncNewTeams: SyncNewTeam? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncNewTeams": syncNewTeams.flatMap { $0.snapshot }])
    }

    public var syncNewTeams: SyncNewTeam? {
      get {
        return (snapshot["syncNewTeams"] as? Snapshot).flatMap { SyncNewTeam(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncNewTeams")
      }
    }

    public struct SyncNewTeam: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewTeamConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewTeamConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }
    }
  }
}

public final class GetCollegeQuery: GraphQLQuery {
  public static let operationString =
    "query GetCollege($id: ID!) {\n  getCollege(id: $id) {\n    __typename\n    id\n    name\n    imageLink\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getCollege", arguments: ["id": GraphQLVariable("id")], type: .object(GetCollege.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getCollege: GetCollege? = nil) {
      self.init(snapshot: ["__typename": "Query", "getCollege": getCollege.flatMap { $0.snapshot }])
    }

    public var getCollege: GetCollege? {
      get {
        return (snapshot["getCollege"] as? Snapshot).flatMap { GetCollege(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getCollege")
      }
    }

    public struct GetCollege: GraphQLSelectionSet {
      public static let possibleTypes = ["College"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, imageLink: String, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var imageLink: String {
        get {
          return snapshot["imageLink"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "imageLink")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class ListCollegesQuery: GraphQLQuery {
  public static let operationString =
    "query ListColleges($filter: ModelCollegeFilterInput, $limit: Int, $nextToken: String) {\n  listColleges(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      imageLink\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelCollegeFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelCollegeFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listColleges", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListCollege.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listColleges: ListCollege? = nil) {
      self.init(snapshot: ["__typename": "Query", "listColleges": listColleges.flatMap { $0.snapshot }])
    }

    public var listColleges: ListCollege? {
      get {
        return (snapshot["listColleges"] as? Snapshot).flatMap { ListCollege(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listColleges")
      }
    }

    public struct ListCollege: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelCollegeConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelCollegeConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["College"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, imageLink: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var imageLink: String {
          get {
            return snapshot["imageLink"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "imageLink")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncCollegesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncColleges($filter: ModelCollegeFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncColleges(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      imageLink\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelCollegeFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelCollegeFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncColleges", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncCollege.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncColleges: SyncCollege? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncColleges": syncColleges.flatMap { $0.snapshot }])
    }

    public var syncColleges: SyncCollege? {
      get {
        return (snapshot["syncColleges"] as? Snapshot).flatMap { SyncCollege(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncColleges")
      }
    }

    public struct SyncCollege: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelCollegeConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelCollegeConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["College"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, imageLink: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var imageLink: String {
          get {
            return snapshot["imageLink"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "imageLink")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetNewMeetQuery: GraphQLQuery {
  public static let operationString =
    "query GetNewMeet($id: ID!) {\n  getNewMeet(id: $id) {\n    __typename\n    id\n    meetID\n    name\n    organization\n    startDate\n    endDate\n    city\n    state\n    country\n    link\n    meetType\n    events {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getNewMeet", arguments: ["id": GraphQLVariable("id")], type: .object(GetNewMeet.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getNewMeet: GetNewMeet? = nil) {
      self.init(snapshot: ["__typename": "Query", "getNewMeet": getNewMeet.flatMap { $0.snapshot }])
    }

    public var getNewMeet: GetNewMeet? {
      get {
        return (snapshot["getNewMeet"] as? Snapshot).flatMap { GetNewMeet(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getNewMeet")
      }
    }

    public struct GetNewMeet: GraphQLSelectionSet {
      public static let possibleTypes = ["NewMeet"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("organization", type: .scalar(String.self)),
        GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("state", type: .nonNull(.scalar(String.self))),
        GraphQLField("country", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
        GraphQLField("events", type: .object(Event.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, events: Event? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "events": events.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meetId: Int {
        get {
          return snapshot["meetID"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var organization: String? {
        get {
          return snapshot["organization"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "organization")
        }
      }

      public var startDate: String {
        get {
          return snapshot["startDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "startDate")
        }
      }

      public var endDate: String {
        get {
          return snapshot["endDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "endDate")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var state: String {
        get {
          return snapshot["state"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var country: String {
        get {
          return snapshot["country"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "country")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var meetType: Int {
        get {
          return snapshot["meetType"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetType")
        }
      }

      public var events: Event? {
        get {
          return (snapshot["events"] as? Snapshot).flatMap { Event(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "events")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewEventConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewEventConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class ListNewMeetsQuery: GraphQLQuery {
  public static let operationString =
    "query ListNewMeets($filter: ModelNewMeetFilterInput, $limit: Int, $nextToken: String) {\n  listNewMeets(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      meetID\n      name\n      organization\n      startDate\n      endDate\n      city\n      state\n      country\n      link\n      meetType\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewMeetFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelNewMeetFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listNewMeets", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListNewMeet.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listNewMeets: ListNewMeet? = nil) {
      self.init(snapshot: ["__typename": "Query", "listNewMeets": listNewMeets.flatMap { $0.snapshot }])
    }

    public var listNewMeets: ListNewMeet? {
      get {
        return (snapshot["listNewMeets"] as? Snapshot).flatMap { ListNewMeet(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listNewMeets")
      }
    }

    public struct ListNewMeet: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewMeetConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewMeetConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewMeet"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("organization", type: .scalar(String.self)),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var meetId: Int {
          get {
            return snapshot["meetID"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var organization: String? {
          get {
            return snapshot["organization"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "organization")
          }
        }

        public var startDate: String {
          get {
            return snapshot["startDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "startDate")
          }
        }

        public var endDate: String {
          get {
            return snapshot["endDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "endDate")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return snapshot["state"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return snapshot["country"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "country")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var meetType: Int {
          get {
            return snapshot["meetType"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetType")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncNewMeetsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncNewMeets($filter: ModelNewMeetFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncNewMeets(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      meetID\n      name\n      organization\n      startDate\n      endDate\n      city\n      state\n      country\n      link\n      meetType\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewMeetFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelNewMeetFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncNewMeets", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncNewMeet.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncNewMeets: SyncNewMeet? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncNewMeets": syncNewMeets.flatMap { $0.snapshot }])
    }

    public var syncNewMeets: SyncNewMeet? {
      get {
        return (snapshot["syncNewMeets"] as? Snapshot).flatMap { SyncNewMeet(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncNewMeets")
      }
    }

    public struct SyncNewMeet: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewMeetConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewMeetConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewMeet"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("organization", type: .scalar(String.self)),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var meetId: Int {
          get {
            return snapshot["meetID"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var organization: String? {
          get {
            return snapshot["organization"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "organization")
          }
        }

        public var startDate: String {
          get {
            return snapshot["startDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "startDate")
          }
        }

        public var endDate: String {
          get {
            return snapshot["endDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "endDate")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return snapshot["state"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return snapshot["country"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "country")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var meetType: Int {
          get {
            return snapshot["meetType"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetType")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetNewEventQuery: GraphQLQuery {
  public static let operationString =
    "query GetNewEvent($id: ID!) {\n  getNewEvent(id: $id) {\n    __typename\n    id\n    meet {\n      __typename\n      id\n      meetID\n      name\n      organization\n      startDate\n      endDate\n      city\n      state\n      country\n      link\n      meetType\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    name\n    date\n    link\n    numEntries\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    newmeetID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getNewEvent", arguments: ["id": GraphQLVariable("id")], type: .object(GetNewEvent.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getNewEvent: GetNewEvent? = nil) {
      self.init(snapshot: ["__typename": "Query", "getNewEvent": getNewEvent.flatMap { $0.snapshot }])
    }

    public var getNewEvent: GetNewEvent? {
      get {
        return (snapshot["getNewEvent"] as? Snapshot).flatMap { GetNewEvent(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getNewEvent")
      }
    }

    public struct GetNewEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["NewEvent"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meet", type: .nonNull(.object(Meet.selections))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("date", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meet: Meet, name: String, date: String, link: String, numEntries: Int, dives: Dife? = nil, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewEvent", "id": id, "meet": meet.snapshot, "name": name, "date": date, "link": link, "numEntries": numEntries, "dives": dives.flatMap { $0.snapshot }, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meet: Meet {
        get {
          return Meet(snapshot: snapshot["meet"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "meet")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var date: String {
        get {
          return snapshot["date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "date")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var numEntries: Int {
        get {
          return snapshot["numEntries"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "numEntries")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var newmeetId: GraphQLID {
        get {
          return snapshot["newmeetID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newmeetID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Meet: GraphQLSelectionSet {
        public static let possibleTypes = ["NewMeet"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("organization", type: .scalar(String.self)),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var meetId: Int {
          get {
            return snapshot["meetID"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var organization: String? {
          get {
            return snapshot["organization"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "organization")
          }
        }

        public var startDate: String {
          get {
            return snapshot["startDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "startDate")
          }
        }

        public var endDate: String {
          get {
            return snapshot["endDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "endDate")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return snapshot["state"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return snapshot["country"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "country")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var meetType: Int {
          get {
            return snapshot["meetType"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetType")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class ListNewEventsQuery: GraphQLQuery {
  public static let operationString =
    "query ListNewEvents($filter: ModelNewEventFilterInput, $limit: Int, $nextToken: String) {\n  listNewEvents(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewEventFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelNewEventFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listNewEvents", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListNewEvent.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listNewEvents: ListNewEvent? = nil) {
      self.init(snapshot: ["__typename": "Query", "listNewEvents": listNewEvents.flatMap { $0.snapshot }])
    }

    public var listNewEvents: ListNewEvent? {
      get {
        return (snapshot["listNewEvents"] as? Snapshot).flatMap { ListNewEvent(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listNewEvents")
      }
    }

    public struct ListNewEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewEventConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewEventConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncNewEventsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncNewEvents($filter: ModelNewEventFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncNewEvents(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelNewEventFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelNewEventFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncNewEvents", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncNewEvent.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncNewEvents: SyncNewEvent? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncNewEvents": syncNewEvents.flatMap { $0.snapshot }])
    }

    public var syncNewEvents: SyncNewEvent? {
      get {
        return (snapshot["syncNewEvents"] as? Snapshot).flatMap { SyncNewEvent(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncNewEvents")
      }
    }

    public struct SyncNewEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewEventConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewEventConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class NewEventsByNewmeetIdQuery: GraphQLQuery {
  public static let operationString =
    "query NewEventsByNewmeetID($newmeetID: ID!, $sortDirection: ModelSortDirection, $filter: ModelNewEventFilterInput, $limit: Int, $nextToken: String) {\n  newEventsByNewmeetID(\n    newmeetID: $newmeetID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var newmeetID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelNewEventFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(newmeetID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelNewEventFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.newmeetID = newmeetID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["newmeetID": newmeetID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("newEventsByNewmeetID", arguments: ["newmeetID": GraphQLVariable("newmeetID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(NewEventsByNewmeetId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(newEventsByNewmeetId: NewEventsByNewmeetId? = nil) {
      self.init(snapshot: ["__typename": "Query", "newEventsByNewmeetID": newEventsByNewmeetId.flatMap { $0.snapshot }])
    }

    public var newEventsByNewmeetId: NewEventsByNewmeetId? {
      get {
        return (snapshot["newEventsByNewmeetID"] as? Snapshot).flatMap { NewEventsByNewmeetId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "newEventsByNewmeetID")
      }
    }

    public struct NewEventsByNewmeetId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelNewEventConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelNewEventConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetDiveQuery: GraphQLQuery {
  public static let operationString =
    "query GetDive($id: ID!) {\n  getDive(id: $id) {\n    __typename\n    id\n    event {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    number\n    name\n    height\n    netScore\n    dd\n    totalScore\n    scores {\n      __typename\n      nextToken\n      startedAt\n    }\n    newathleteID\n    neweventID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getDive", arguments: ["id": GraphQLVariable("id")], type: .object(GetDive.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getDive: GetDive? = nil) {
      self.init(snapshot: ["__typename": "Query", "getDive": getDive.flatMap { $0.snapshot }])
    }

    public var getDive: GetDive? {
      get {
        return (snapshot["getDive"] as? Snapshot).flatMap { GetDive(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getDive")
      }
    }

    public struct GetDive: GraphQLSelectionSet {
      public static let possibleTypes = ["Dive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("event", type: .nonNull(.object(Event.selections))),
        GraphQLField("athlete", type: .nonNull(.object(Athlete.selections))),
        GraphQLField("number", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("height", type: .nonNull(.scalar(Double.self))),
        GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
        GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("scores", type: .object(Score.selections)),
        GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, event: Event, athlete: Athlete, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, scores: Score? = nil, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Dive", "id": id, "event": event.snapshot, "athlete": athlete.snapshot, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "scores": scores.flatMap { $0.snapshot }, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var event: Event {
        get {
          return Event(snapshot: snapshot["event"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "event")
        }
      }

      public var athlete: Athlete {
        get {
          return Athlete(snapshot: snapshot["athlete"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "athlete")
        }
      }

      public var number: String {
        get {
          return snapshot["number"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "number")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var height: Double {
        get {
          return snapshot["height"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "height")
        }
      }

      public var netScore: Double {
        get {
          return snapshot["netScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "netScore")
        }
      }

      public var dd: Double {
        get {
          return snapshot["dd"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "dd")
        }
      }

      public var totalScore: Double {
        get {
          return snapshot["totalScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalScore")
        }
      }

      public var scores: Score? {
        get {
          return (snapshot["scores"] as? Snapshot).flatMap { Score(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "scores")
        }
      }

      public var newathleteId: GraphQLID {
        get {
          return snapshot["newathleteID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newathleteID")
        }
      }

      public var neweventId: GraphQLID {
        get {
          return snapshot["neweventID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "neweventID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Score: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelJudgeScoreConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class ListDivesQuery: GraphQLQuery {
  public static let operationString =
    "query ListDives($filter: ModelDiveFilterInput, $limit: Int, $nextToken: String) {\n  listDives(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelDiveFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelDiveFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listDives", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListDife.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listDives: ListDife? = nil) {
      self.init(snapshot: ["__typename": "Query", "listDives": listDives.flatMap { $0.snapshot }])
    }

    public var listDives: ListDife? {
      get {
        return (snapshot["listDives"] as? Snapshot).flatMap { ListDife(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listDives")
      }
    }

    public struct ListDife: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelDiveConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelDiveConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncDivesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncDives($filter: ModelDiveFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncDives(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelDiveFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelDiveFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncDives", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncDife.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncDives: SyncDife? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncDives": syncDives.flatMap { $0.snapshot }])
    }

    public var syncDives: SyncDife? {
      get {
        return (snapshot["syncDives"] as? Snapshot).flatMap { SyncDife(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncDives")
      }
    }

    public struct SyncDife: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelDiveConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelDiveConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class DivesByNewathleteIdQuery: GraphQLQuery {
  public static let operationString =
    "query DivesByNewathleteID($newathleteID: ID!, $sortDirection: ModelSortDirection, $filter: ModelDiveFilterInput, $limit: Int, $nextToken: String) {\n  divesByNewathleteID(\n    newathleteID: $newathleteID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var newathleteID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelDiveFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(newathleteID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelDiveFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.newathleteID = newathleteID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["newathleteID": newathleteID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("divesByNewathleteID", arguments: ["newathleteID": GraphQLVariable("newathleteID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(DivesByNewathleteId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(divesByNewathleteId: DivesByNewathleteId? = nil) {
      self.init(snapshot: ["__typename": "Query", "divesByNewathleteID": divesByNewathleteId.flatMap { $0.snapshot }])
    }

    public var divesByNewathleteId: DivesByNewathleteId? {
      get {
        return (snapshot["divesByNewathleteID"] as? Snapshot).flatMap { DivesByNewathleteId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "divesByNewathleteID")
      }
    }

    public struct DivesByNewathleteId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelDiveConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelDiveConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class DivesByNeweventIdQuery: GraphQLQuery {
  public static let operationString =
    "query DivesByNeweventID($neweventID: ID!, $sortDirection: ModelSortDirection, $filter: ModelDiveFilterInput, $limit: Int, $nextToken: String) {\n  divesByNeweventID(\n    neweventID: $neweventID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var neweventID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelDiveFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(neweventID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelDiveFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.neweventID = neweventID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["neweventID": neweventID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("divesByNeweventID", arguments: ["neweventID": GraphQLVariable("neweventID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(DivesByNeweventId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(divesByNeweventId: DivesByNeweventId? = nil) {
      self.init(snapshot: ["__typename": "Query", "divesByNeweventID": divesByNeweventId.flatMap { $0.snapshot }])
    }

    public var divesByNeweventId: DivesByNeweventId? {
      get {
        return (snapshot["divesByNeweventID"] as? Snapshot).flatMap { DivesByNeweventId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "divesByNeweventID")
      }
    }

    public struct DivesByNeweventId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelDiveConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelDiveConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetJudgeScoreQuery: GraphQLQuery {
  public static let operationString =
    "query GetJudgeScore($id: ID!) {\n  getJudgeScore(id: $id) {\n    __typename\n    id\n    dive {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    score\n    diveID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getJudgeScore", arguments: ["id": GraphQLVariable("id")], type: .object(GetJudgeScore.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getJudgeScore: GetJudgeScore? = nil) {
      self.init(snapshot: ["__typename": "Query", "getJudgeScore": getJudgeScore.flatMap { $0.snapshot }])
    }

    public var getJudgeScore: GetJudgeScore? {
      get {
        return (snapshot["getJudgeScore"] as? Snapshot).flatMap { GetJudgeScore(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getJudgeScore")
      }
    }

    public struct GetJudgeScore: GraphQLSelectionSet {
      public static let possibleTypes = ["JudgeScore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("dive", type: .nonNull(.object(Dive.selections))),
        GraphQLField("score", type: .nonNull(.scalar(Double.self))),
        GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, dive: Dive, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "JudgeScore", "id": id, "dive": dive.snapshot, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var dive: Dive {
        get {
          return Dive(snapshot: snapshot["dive"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "dive")
        }
      }

      public var score: Double {
        get {
          return snapshot["score"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "score")
        }
      }

      public var diveId: GraphQLID {
        get {
          return snapshot["diveID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Dive: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class ListJudgeScoresQuery: GraphQLQuery {
  public static let operationString =
    "query ListJudgeScores($filter: ModelJudgeScoreFilterInput, $limit: Int, $nextToken: String) {\n  listJudgeScores(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      score\n      diveID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelJudgeScoreFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelJudgeScoreFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listJudgeScores", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListJudgeScore.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listJudgeScores: ListJudgeScore? = nil) {
      self.init(snapshot: ["__typename": "Query", "listJudgeScores": listJudgeScores.flatMap { $0.snapshot }])
    }

    public var listJudgeScores: ListJudgeScore? {
      get {
        return (snapshot["listJudgeScores"] as? Snapshot).flatMap { ListJudgeScore(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listJudgeScores")
      }
    }

    public struct ListJudgeScore: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelJudgeScoreConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["JudgeScore"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("score", type: .nonNull(.scalar(Double.self))),
          GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "JudgeScore", "id": id, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var score: Double {
          get {
            return snapshot["score"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "score")
          }
        }

        public var diveId: GraphQLID {
          get {
            return snapshot["diveID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncJudgeScoresQuery: GraphQLQuery {
  public static let operationString =
    "query SyncJudgeScores($filter: ModelJudgeScoreFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncJudgeScores(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      score\n      diveID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelJudgeScoreFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelJudgeScoreFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncJudgeScores", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncJudgeScore.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncJudgeScores: SyncJudgeScore? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncJudgeScores": syncJudgeScores.flatMap { $0.snapshot }])
    }

    public var syncJudgeScores: SyncJudgeScore? {
      get {
        return (snapshot["syncJudgeScores"] as? Snapshot).flatMap { SyncJudgeScore(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncJudgeScores")
      }
    }

    public struct SyncJudgeScore: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelJudgeScoreConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["JudgeScore"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("score", type: .nonNull(.scalar(Double.self))),
          GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "JudgeScore", "id": id, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var score: Double {
          get {
            return snapshot["score"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "score")
          }
        }

        public var diveId: GraphQLID {
          get {
            return snapshot["diveID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class JudgeScoresByDiveIdQuery: GraphQLQuery {
  public static let operationString =
    "query JudgeScoresByDiveID($diveID: ID!, $sortDirection: ModelSortDirection, $filter: ModelJudgeScoreFilterInput, $limit: Int, $nextToken: String) {\n  judgeScoresByDiveID(\n    diveID: $diveID\n    sortDirection: $sortDirection\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      score\n      diveID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var diveID: GraphQLID
  public var sortDirection: ModelSortDirection?
  public var filter: ModelJudgeScoreFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(diveID: GraphQLID, sortDirection: ModelSortDirection? = nil, filter: ModelJudgeScoreFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.diveID = diveID
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["diveID": diveID, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("judgeScoresByDiveID", arguments: ["diveID": GraphQLVariable("diveID"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(JudgeScoresByDiveId.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(judgeScoresByDiveId: JudgeScoresByDiveId? = nil) {
      self.init(snapshot: ["__typename": "Query", "judgeScoresByDiveID": judgeScoresByDiveId.flatMap { $0.snapshot }])
    }

    public var judgeScoresByDiveId: JudgeScoresByDiveId? {
      get {
        return (snapshot["judgeScoresByDiveID"] as? Snapshot).flatMap { JudgeScoresByDiveId(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "judgeScoresByDiveID")
      }
    }

    public struct JudgeScoresByDiveId: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelJudgeScoreConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["JudgeScore"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("score", type: .nonNull(.scalar(Double.self))),
          GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "JudgeScore", "id": id, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var score: Double {
          get {
            return snapshot["score"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "score")
          }
        }

        public var diveId: GraphQLID {
          get {
            return snapshot["diveID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetMessageQuery: GraphQLQuery {
  public static let operationString =
    "query GetMessage($id: ID!) {\n  getMessage(id: $id) {\n    __typename\n    id\n    body\n    creationDate\n    MessageNewUsers {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getMessage", arguments: ["id": GraphQLVariable("id")], type: .object(GetMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getMessage: GetMessage? = nil) {
      self.init(snapshot: ["__typename": "Query", "getMessage": getMessage.flatMap { $0.snapshot }])
    }

    public var getMessage: GetMessage? {
      get {
        return (snapshot["getMessage"] as? Snapshot).flatMap { GetMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getMessage")
      }
    }

    public struct GetMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("body", type: .nonNull(.scalar(String.self))),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("MessageNewUsers", type: .object(MessageNewUser.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, body: String, creationDate: String, messageNewUsers: MessageNewUser? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "body": body, "creationDate": creationDate, "MessageNewUsers": messageNewUsers.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var body: String {
        get {
          return snapshot["body"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "body")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var messageNewUsers: MessageNewUser? {
        get {
          return (snapshot["MessageNewUsers"] as? Snapshot).flatMap { MessageNewUser(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MessageNewUsers")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct MessageNewUser: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageNewUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class ListMessagesQuery: GraphQLQuery {
  public static let operationString =
    "query ListMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n  listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      body\n      creationDate\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelMessageFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelMessageFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listMessages", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listMessages: ListMessage? = nil) {
      self.init(snapshot: ["__typename": "Query", "listMessages": listMessages.flatMap { $0.snapshot }])
    }

    public var listMessages: ListMessage? {
      get {
        return (snapshot["listMessages"] as? Snapshot).flatMap { ListMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listMessages")
      }
    }

    public struct ListMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMessageConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("body", type: .nonNull(.scalar(String.self))),
          GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, body: String, creationDate: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "body": body, "creationDate": creationDate, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var body: String {
          get {
            return snapshot["body"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "body")
          }
        }

        public var creationDate: String {
          get {
            return snapshot["creationDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "creationDate")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncMessagesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncMessages(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      body\n      creationDate\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelMessageFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelMessageFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncMessages", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncMessages: SyncMessage? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncMessages": syncMessages.flatMap { $0.snapshot }])
    }

    public var syncMessages: SyncMessage? {
      get {
        return (snapshot["syncMessages"] as? Snapshot).flatMap { SyncMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncMessages")
      }
    }

    public struct SyncMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMessageConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("body", type: .nonNull(.scalar(String.self))),
          GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, body: String, creationDate: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "body": body, "creationDate": creationDate, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var body: String {
          get {
            return snapshot["body"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "body")
          }
        }

        public var creationDate: String {
          get {
            return snapshot["creationDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "creationDate")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetDiveMeetsDiverQuery: GraphQLQuery {
  public static let operationString =
    "query GetDiveMeetsDiver($id: ID!) {\n  getDiveMeetsDiver(id: $id) {\n    __typename\n    id\n    firstName\n    lastName\n    finaAge\n    hsGradYear\n    springboardRating\n    platformRating\n    totalRating\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getDiveMeetsDiver", arguments: ["id": GraphQLVariable("id")], type: .object(GetDiveMeetsDiver.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getDiveMeetsDiver: GetDiveMeetsDiver? = nil) {
      self.init(snapshot: ["__typename": "Query", "getDiveMeetsDiver": getDiveMeetsDiver.flatMap { $0.snapshot }])
    }

    public var getDiveMeetsDiver: GetDiveMeetsDiver? {
      get {
        return (snapshot["getDiveMeetsDiver"] as? Snapshot).flatMap { GetDiveMeetsDiver(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getDiveMeetsDiver")
      }
    }

    public struct GetDiveMeetsDiver: GraphQLSelectionSet {
      public static let possibleTypes = ["DiveMeetsDiver"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("finaAge", type: .scalar(Int.self)),
        GraphQLField("hsGradYear", type: .scalar(Int.self)),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "DiveMeetsDiver", "id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var finaAge: Int? {
        get {
          return snapshot["finaAge"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "finaAge")
        }
      }

      public var hsGradYear: Int? {
        get {
          return snapshot["hsGradYear"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "hsGradYear")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class ListDiveMeetsDiversQuery: GraphQLQuery {
  public static let operationString =
    "query ListDiveMeetsDivers($filter: ModelDiveMeetsDiverFilterInput, $limit: Int, $nextToken: String) {\n  listDiveMeetsDivers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      firstName\n      lastName\n      finaAge\n      hsGradYear\n      springboardRating\n      platformRating\n      totalRating\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelDiveMeetsDiverFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelDiveMeetsDiverFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listDiveMeetsDivers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListDiveMeetsDiver.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listDiveMeetsDivers: ListDiveMeetsDiver? = nil) {
      self.init(snapshot: ["__typename": "Query", "listDiveMeetsDivers": listDiveMeetsDivers.flatMap { $0.snapshot }])
    }

    public var listDiveMeetsDivers: ListDiveMeetsDiver? {
      get {
        return (snapshot["listDiveMeetsDivers"] as? Snapshot).flatMap { ListDiveMeetsDiver(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listDiveMeetsDivers")
      }
    }

    public struct ListDiveMeetsDiver: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelDiveMeetsDiverConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelDiveMeetsDiverConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["DiveMeetsDiver"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("finaAge", type: .scalar(Int.self)),
          GraphQLField("hsGradYear", type: .scalar(Int.self)),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "DiveMeetsDiver", "id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var finaAge: Int? {
          get {
            return snapshot["finaAge"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "finaAge")
          }
        }

        public var hsGradYear: Int? {
          get {
            return snapshot["hsGradYear"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "hsGradYear")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncDiveMeetsDiversQuery: GraphQLQuery {
  public static let operationString =
    "query SyncDiveMeetsDivers($filter: ModelDiveMeetsDiverFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncDiveMeetsDivers(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n    lastSync: $lastSync\n  ) {\n    __typename\n    items {\n      __typename\n      id\n      firstName\n      lastName\n      finaAge\n      hsGradYear\n      springboardRating\n      platformRating\n      totalRating\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelDiveMeetsDiverFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelDiveMeetsDiverFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncDiveMeetsDivers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncDiveMeetsDiver.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncDiveMeetsDivers: SyncDiveMeetsDiver? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncDiveMeetsDivers": syncDiveMeetsDivers.flatMap { $0.snapshot }])
    }

    public var syncDiveMeetsDivers: SyncDiveMeetsDiver? {
      get {
        return (snapshot["syncDiveMeetsDivers"] as? Snapshot).flatMap { SyncDiveMeetsDiver(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncDiveMeetsDivers")
      }
    }

    public struct SyncDiveMeetsDiver: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelDiveMeetsDiverConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelDiveMeetsDiverConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["DiveMeetsDiver"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("finaAge", type: .scalar(Int.self)),
          GraphQLField("hsGradYear", type: .scalar(Int.self)),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "DiveMeetsDiver", "id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var finaAge: Int? {
          get {
            return snapshot["finaAge"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "finaAge")
          }
        }

        public var hsGradYear: Int? {
          get {
            return snapshot["hsGradYear"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "hsGradYear")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateUserSavedPostSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateUserSavedPost($filter: ModelSubscriptionUserSavedPostFilterInput) {\n  onCreateUserSavedPost(filter: $filter) {\n    __typename\n    id\n    newuserID\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionUserSavedPostFilterInput?

  public init(filter: ModelSubscriptionUserSavedPostFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateUserSavedPost", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateUserSavedPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateUserSavedPost: OnCreateUserSavedPost? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateUserSavedPost": onCreateUserSavedPost.flatMap { $0.snapshot }])
    }

    public var onCreateUserSavedPost: OnCreateUserSavedPost? {
      get {
        return (snapshot["onCreateUserSavedPost"] as? Snapshot).flatMap { OnCreateUserSavedPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateUserSavedPost")
      }
    }

    public struct OnCreateUserSavedPost: GraphQLSelectionSet {
      public static let possibleTypes = ["UserSavedPost"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnUpdateUserSavedPostSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateUserSavedPost($filter: ModelSubscriptionUserSavedPostFilterInput) {\n  onUpdateUserSavedPost(filter: $filter) {\n    __typename\n    id\n    newuserID\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionUserSavedPostFilterInput?

  public init(filter: ModelSubscriptionUserSavedPostFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateUserSavedPost", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateUserSavedPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateUserSavedPost: OnUpdateUserSavedPost? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateUserSavedPost": onUpdateUserSavedPost.flatMap { $0.snapshot }])
    }

    public var onUpdateUserSavedPost: OnUpdateUserSavedPost? {
      get {
        return (snapshot["onUpdateUserSavedPost"] as? Snapshot).flatMap { OnUpdateUserSavedPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateUserSavedPost")
      }
    }

    public struct OnUpdateUserSavedPost: GraphQLSelectionSet {
      public static let possibleTypes = ["UserSavedPost"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnDeleteUserSavedPostSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteUserSavedPost($filter: ModelSubscriptionUserSavedPostFilterInput) {\n  onDeleteUserSavedPost(filter: $filter) {\n    __typename\n    id\n    newuserID\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionUserSavedPostFilterInput?

  public init(filter: ModelSubscriptionUserSavedPostFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteUserSavedPost", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteUserSavedPost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteUserSavedPost: OnDeleteUserSavedPost? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteUserSavedPost": onDeleteUserSavedPost.flatMap { $0.snapshot }])
    }

    public var onDeleteUserSavedPost: OnDeleteUserSavedPost? {
      get {
        return (snapshot["onDeleteUserSavedPost"] as? Snapshot).flatMap { OnDeleteUserSavedPost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteUserSavedPost")
      }
    }

    public struct OnDeleteUserSavedPost: GraphQLSelectionSet {
      public static let possibleTypes = ["UserSavedPost"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newuserId: GraphQLID, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "UserSavedPost", "id": id, "newuserID": newuserId, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnCreatePostSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreatePost($filter: ModelSubscriptionPostFilterInput) {\n  onCreatePost(filter: $filter) {\n    __typename\n    id\n    caption\n    creationDate\n    images {\n      __typename\n      nextToken\n      startedAt\n    }\n    videos {\n      __typename\n      nextToken\n      startedAt\n    }\n    newuserID\n    usersSaving {\n      __typename\n      nextToken\n      startedAt\n    }\n    isCoachesOnly\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionPostFilterInput?

  public init(filter: ModelSubscriptionPostFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreatePost", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreatePost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreatePost: OnCreatePost? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreatePost": onCreatePost.flatMap { $0.snapshot }])
    }

    public var onCreatePost: OnCreatePost? {
      get {
        return (snapshot["onCreatePost"] as? Snapshot).flatMap { OnCreatePost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreatePost")
      }
    }

    public struct OnCreatePost: GraphQLSelectionSet {
      public static let possibleTypes = ["Post"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("caption", type: .scalar(String.self)),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("images", type: .object(Image.selections)),
        GraphQLField("videos", type: .object(Video.selections)),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("usersSaving", type: .object(UsersSaving.selections)),
        GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, caption: String? = nil, creationDate: String, images: Image? = nil, videos: Video? = nil, newuserId: GraphQLID, usersSaving: UsersSaving? = nil, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "images": images.flatMap { $0.snapshot }, "videos": videos.flatMap { $0.snapshot }, "newuserID": newuserId, "usersSaving": usersSaving.flatMap { $0.snapshot }, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var caption: String? {
        get {
          return snapshot["caption"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "caption")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var images: Image? {
        get {
          return (snapshot["images"] as? Snapshot).flatMap { Image(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "images")
        }
      }

      public var videos: Video? {
        get {
          return (snapshot["videos"] as? Snapshot).flatMap { Video(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "videos")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var usersSaving: UsersSaving? {
        get {
          return (snapshot["usersSaving"] as? Snapshot).flatMap { UsersSaving(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "usersSaving")
        }
      }

      public var isCoachesOnly: Bool {
        get {
          return snapshot["isCoachesOnly"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCoachesOnly")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewImageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewImageConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVideoConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVideoConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct UsersSaving: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdatePostSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdatePost($filter: ModelSubscriptionPostFilterInput) {\n  onUpdatePost(filter: $filter) {\n    __typename\n    id\n    caption\n    creationDate\n    images {\n      __typename\n      nextToken\n      startedAt\n    }\n    videos {\n      __typename\n      nextToken\n      startedAt\n    }\n    newuserID\n    usersSaving {\n      __typename\n      nextToken\n      startedAt\n    }\n    isCoachesOnly\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionPostFilterInput?

  public init(filter: ModelSubscriptionPostFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdatePost", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdatePost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdatePost: OnUpdatePost? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdatePost": onUpdatePost.flatMap { $0.snapshot }])
    }

    public var onUpdatePost: OnUpdatePost? {
      get {
        return (snapshot["onUpdatePost"] as? Snapshot).flatMap { OnUpdatePost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdatePost")
      }
    }

    public struct OnUpdatePost: GraphQLSelectionSet {
      public static let possibleTypes = ["Post"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("caption", type: .scalar(String.self)),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("images", type: .object(Image.selections)),
        GraphQLField("videos", type: .object(Video.selections)),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("usersSaving", type: .object(UsersSaving.selections)),
        GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, caption: String? = nil, creationDate: String, images: Image? = nil, videos: Video? = nil, newuserId: GraphQLID, usersSaving: UsersSaving? = nil, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "images": images.flatMap { $0.snapshot }, "videos": videos.flatMap { $0.snapshot }, "newuserID": newuserId, "usersSaving": usersSaving.flatMap { $0.snapshot }, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var caption: String? {
        get {
          return snapshot["caption"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "caption")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var images: Image? {
        get {
          return (snapshot["images"] as? Snapshot).flatMap { Image(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "images")
        }
      }

      public var videos: Video? {
        get {
          return (snapshot["videos"] as? Snapshot).flatMap { Video(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "videos")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var usersSaving: UsersSaving? {
        get {
          return (snapshot["usersSaving"] as? Snapshot).flatMap { UsersSaving(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "usersSaving")
        }
      }

      public var isCoachesOnly: Bool {
        get {
          return snapshot["isCoachesOnly"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCoachesOnly")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewImageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewImageConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVideoConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVideoConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct UsersSaving: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnDeletePostSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeletePost($filter: ModelSubscriptionPostFilterInput) {\n  onDeletePost(filter: $filter) {\n    __typename\n    id\n    caption\n    creationDate\n    images {\n      __typename\n      nextToken\n      startedAt\n    }\n    videos {\n      __typename\n      nextToken\n      startedAt\n    }\n    newuserID\n    usersSaving {\n      __typename\n      nextToken\n      startedAt\n    }\n    isCoachesOnly\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionPostFilterInput?

  public init(filter: ModelSubscriptionPostFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeletePost", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeletePost.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeletePost: OnDeletePost? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeletePost": onDeletePost.flatMap { $0.snapshot }])
    }

    public var onDeletePost: OnDeletePost? {
      get {
        return (snapshot["onDeletePost"] as? Snapshot).flatMap { OnDeletePost(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeletePost")
      }
    }

    public struct OnDeletePost: GraphQLSelectionSet {
      public static let possibleTypes = ["Post"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("caption", type: .scalar(String.self)),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("images", type: .object(Image.selections)),
        GraphQLField("videos", type: .object(Video.selections)),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("usersSaving", type: .object(UsersSaving.selections)),
        GraphQLField("isCoachesOnly", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, caption: String? = nil, creationDate: String, images: Image? = nil, videos: Video? = nil, newuserId: GraphQLID, usersSaving: UsersSaving? = nil, isCoachesOnly: Bool, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Post", "id": id, "caption": caption, "creationDate": creationDate, "images": images.flatMap { $0.snapshot }, "videos": videos.flatMap { $0.snapshot }, "newuserID": newuserId, "usersSaving": usersSaving.flatMap { $0.snapshot }, "isCoachesOnly": isCoachesOnly, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var caption: String? {
        get {
          return snapshot["caption"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "caption")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var images: Image? {
        get {
          return (snapshot["images"] as? Snapshot).flatMap { Image(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "images")
        }
      }

      public var videos: Video? {
        get {
          return (snapshot["videos"] as? Snapshot).flatMap { Video(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "videos")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var usersSaving: UsersSaving? {
        get {
          return (snapshot["usersSaving"] as? Snapshot).flatMap { UsersSaving(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "usersSaving")
        }
      }

      public var isCoachesOnly: Bool {
        get {
          return snapshot["isCoachesOnly"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCoachesOnly")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewImageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewImageConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelVideoConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelVideoConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct UsersSaving: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateNewImageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateNewImage($filter: ModelSubscriptionNewImageFilterInput) {\n  onCreateNewImage(filter: $filter) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionNewImageFilterInput?

  public init(filter: ModelSubscriptionNewImageFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateNewImage", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateNewImage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateNewImage: OnCreateNewImage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateNewImage": onCreateNewImage.flatMap { $0.snapshot }])
    }

    public var onCreateNewImage: OnCreateNewImage? {
      get {
        return (snapshot["onCreateNewImage"] as? Snapshot).flatMap { OnCreateNewImage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateNewImage")
      }
    }

    public struct OnCreateNewImage: GraphQLSelectionSet {
      public static let possibleTypes = ["NewImage"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnUpdateNewImageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateNewImage($filter: ModelSubscriptionNewImageFilterInput) {\n  onUpdateNewImage(filter: $filter) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionNewImageFilterInput?

  public init(filter: ModelSubscriptionNewImageFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateNewImage", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateNewImage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateNewImage: OnUpdateNewImage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateNewImage": onUpdateNewImage.flatMap { $0.snapshot }])
    }

    public var onUpdateNewImage: OnUpdateNewImage? {
      get {
        return (snapshot["onUpdateNewImage"] as? Snapshot).flatMap { OnUpdateNewImage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateNewImage")
      }
    }

    public struct OnUpdateNewImage: GraphQLSelectionSet {
      public static let possibleTypes = ["NewImage"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnDeleteNewImageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteNewImage($filter: ModelSubscriptionNewImageFilterInput) {\n  onDeleteNewImage(filter: $filter) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionNewImageFilterInput?

  public init(filter: ModelSubscriptionNewImageFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteNewImage", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteNewImage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteNewImage: OnDeleteNewImage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteNewImage": onDeleteNewImage.flatMap { $0.snapshot }])
    }

    public var onDeleteNewImage: OnDeleteNewImage? {
      get {
        return (snapshot["onDeleteNewImage"] as? Snapshot).flatMap { OnDeleteNewImage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteNewImage")
      }
    }

    public struct OnDeleteNewImage: GraphQLSelectionSet {
      public static let possibleTypes = ["NewImage"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewImage", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnCreateMessageNewUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateMessageNewUser($filter: ModelSubscriptionMessageNewUserFilterInput) {\n  onCreateMessageNewUser(filter: $filter) {\n    __typename\n    id\n    isSender\n    newuserID\n    messageID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMessageNewUserFilterInput?

  public init(filter: ModelSubscriptionMessageNewUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateMessageNewUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateMessageNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateMessageNewUser: OnCreateMessageNewUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateMessageNewUser": onCreateMessageNewUser.flatMap { $0.snapshot }])
    }

    public var onCreateMessageNewUser: OnCreateMessageNewUser? {
      get {
        return (snapshot["onCreateMessageNewUser"] as? Snapshot).flatMap { OnCreateMessageNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateMessageNewUser")
      }
    }

    public struct OnCreateMessageNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["MessageNewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var isSender: Bool {
        get {
          return snapshot["isSender"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSender")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var messageId: GraphQLID {
        get {
          return snapshot["messageID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "messageID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnUpdateMessageNewUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateMessageNewUser($filter: ModelSubscriptionMessageNewUserFilterInput) {\n  onUpdateMessageNewUser(filter: $filter) {\n    __typename\n    id\n    isSender\n    newuserID\n    messageID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMessageNewUserFilterInput?

  public init(filter: ModelSubscriptionMessageNewUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateMessageNewUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateMessageNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateMessageNewUser: OnUpdateMessageNewUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateMessageNewUser": onUpdateMessageNewUser.flatMap { $0.snapshot }])
    }

    public var onUpdateMessageNewUser: OnUpdateMessageNewUser? {
      get {
        return (snapshot["onUpdateMessageNewUser"] as? Snapshot).flatMap { OnUpdateMessageNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateMessageNewUser")
      }
    }

    public struct OnUpdateMessageNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["MessageNewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var isSender: Bool {
        get {
          return snapshot["isSender"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSender")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var messageId: GraphQLID {
        get {
          return snapshot["messageID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "messageID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnDeleteMessageNewUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteMessageNewUser($filter: ModelSubscriptionMessageNewUserFilterInput) {\n  onDeleteMessageNewUser(filter: $filter) {\n    __typename\n    id\n    isSender\n    newuserID\n    messageID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMessageNewUserFilterInput?

  public init(filter: ModelSubscriptionMessageNewUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteMessageNewUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteMessageNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteMessageNewUser: OnDeleteMessageNewUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteMessageNewUser": onDeleteMessageNewUser.flatMap { $0.snapshot }])
    }

    public var onDeleteMessageNewUser: OnDeleteMessageNewUser? {
      get {
        return (snapshot["onDeleteMessageNewUser"] as? Snapshot).flatMap { OnDeleteMessageNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteMessageNewUser")
      }
    }

    public struct OnDeleteMessageNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["MessageNewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSender", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("newuserID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("messageID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, isSender: Bool, newuserId: GraphQLID, messageId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MessageNewUser", "id": id, "isSender": isSender, "newuserID": newuserId, "messageID": messageId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var isSender: Bool {
        get {
          return snapshot["isSender"]! as! Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSender")
        }
      }

      public var newuserId: GraphQLID {
        get {
          return snapshot["newuserID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newuserID")
        }
      }

      public var messageId: GraphQLID {
        get {
          return snapshot["messageID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "messageID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnCreateNewUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateNewUser($filter: ModelSubscriptionNewUserFilterInput) {\n  onCreateNewUser(filter: $filter) {\n    __typename\n    id\n    firstName\n    lastName\n    email\n    phone\n    diveMeetsID\n    accountType\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    posts {\n      __typename\n      nextToken\n      startedAt\n    }\n    tokens\n    savedPosts {\n      __typename\n      nextToken\n      startedAt\n    }\n    favoritesIds\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newUserAthleteId\n    newUserCoachId\n  }\n}"

  public var filter: ModelSubscriptionNewUserFilterInput?

  public init(filter: ModelSubscriptionNewUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateNewUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateNewUser: OnCreateNewUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateNewUser": onCreateNewUser.flatMap { $0.snapshot }])
    }

    public var onCreateNewUser: OnCreateNewUser? {
      get {
        return (snapshot["onCreateNewUser"] as? Snapshot).flatMap { OnCreateNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateNewUser")
      }
    }

    public struct OnCreateNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["NewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("diveMeetsID", type: .scalar(String.self)),
        GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
        GraphQLField("athlete", type: .object(Athlete.selections)),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("posts", type: .object(Post.selections)),
        GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("savedPosts", type: .object(SavedPost.selections)),
        GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
        GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, athlete: Athlete? = nil, coach: Coach? = nil, posts: Post? = nil, tokens: [String], savedPosts: SavedPost? = nil, favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "athlete": athlete.flatMap { $0.snapshot }, "coach": coach.flatMap { $0.snapshot }, "posts": posts.flatMap { $0.snapshot }, "tokens": tokens, "savedPosts": savedPosts.flatMap { $0.snapshot }, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var diveMeetsId: String? {
        get {
          return snapshot["diveMeetsID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveMeetsID")
        }
      }

      public var accountType: String {
        get {
          return snapshot["accountType"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "accountType")
        }
      }

      public var athlete: Athlete? {
        get {
          return (snapshot["athlete"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athlete")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var posts: Post? {
        get {
          return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "posts")
        }
      }

      public var tokens: [String] {
        get {
          return snapshot["tokens"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "tokens")
        }
      }

      public var savedPosts: SavedPost? {
        get {
          return (snapshot["savedPosts"] as? Snapshot).flatMap { SavedPost(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "savedPosts")
        }
      }

      public var favoritesIds: [String] {
        get {
          return snapshot["favoritesIds"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "favoritesIds")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newUserAthleteId: GraphQLID? {
        get {
          return snapshot["newUserAthleteId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserAthleteId")
        }
      }

      public var newUserCoachId: GraphQLID? {
        get {
          return snapshot["newUserCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserCoachId")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Post: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct SavedPost: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdateNewUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateNewUser($filter: ModelSubscriptionNewUserFilterInput) {\n  onUpdateNewUser(filter: $filter) {\n    __typename\n    id\n    firstName\n    lastName\n    email\n    phone\n    diveMeetsID\n    accountType\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    posts {\n      __typename\n      nextToken\n      startedAt\n    }\n    tokens\n    savedPosts {\n      __typename\n      nextToken\n      startedAt\n    }\n    favoritesIds\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newUserAthleteId\n    newUserCoachId\n  }\n}"

  public var filter: ModelSubscriptionNewUserFilterInput?

  public init(filter: ModelSubscriptionNewUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateNewUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateNewUser: OnUpdateNewUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateNewUser": onUpdateNewUser.flatMap { $0.snapshot }])
    }

    public var onUpdateNewUser: OnUpdateNewUser? {
      get {
        return (snapshot["onUpdateNewUser"] as? Snapshot).flatMap { OnUpdateNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateNewUser")
      }
    }

    public struct OnUpdateNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["NewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("diveMeetsID", type: .scalar(String.self)),
        GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
        GraphQLField("athlete", type: .object(Athlete.selections)),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("posts", type: .object(Post.selections)),
        GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("savedPosts", type: .object(SavedPost.selections)),
        GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
        GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, athlete: Athlete? = nil, coach: Coach? = nil, posts: Post? = nil, tokens: [String], savedPosts: SavedPost? = nil, favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "athlete": athlete.flatMap { $0.snapshot }, "coach": coach.flatMap { $0.snapshot }, "posts": posts.flatMap { $0.snapshot }, "tokens": tokens, "savedPosts": savedPosts.flatMap { $0.snapshot }, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var diveMeetsId: String? {
        get {
          return snapshot["diveMeetsID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveMeetsID")
        }
      }

      public var accountType: String {
        get {
          return snapshot["accountType"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "accountType")
        }
      }

      public var athlete: Athlete? {
        get {
          return (snapshot["athlete"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athlete")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var posts: Post? {
        get {
          return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "posts")
        }
      }

      public var tokens: [String] {
        get {
          return snapshot["tokens"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "tokens")
        }
      }

      public var savedPosts: SavedPost? {
        get {
          return (snapshot["savedPosts"] as? Snapshot).flatMap { SavedPost(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "savedPosts")
        }
      }

      public var favoritesIds: [String] {
        get {
          return snapshot["favoritesIds"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "favoritesIds")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newUserAthleteId: GraphQLID? {
        get {
          return snapshot["newUserAthleteId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserAthleteId")
        }
      }

      public var newUserCoachId: GraphQLID? {
        get {
          return snapshot["newUserCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserCoachId")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Post: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct SavedPost: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnDeleteNewUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteNewUser($filter: ModelSubscriptionNewUserFilterInput) {\n  onDeleteNewUser(filter: $filter) {\n    __typename\n    id\n    firstName\n    lastName\n    email\n    phone\n    diveMeetsID\n    accountType\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    posts {\n      __typename\n      nextToken\n      startedAt\n    }\n    tokens\n    savedPosts {\n      __typename\n      nextToken\n      startedAt\n    }\n    favoritesIds\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newUserAthleteId\n    newUserCoachId\n  }\n}"

  public var filter: ModelSubscriptionNewUserFilterInput?

  public init(filter: ModelSubscriptionNewUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteNewUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteNewUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteNewUser: OnDeleteNewUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteNewUser": onDeleteNewUser.flatMap { $0.snapshot }])
    }

    public var onDeleteNewUser: OnDeleteNewUser? {
      get {
        return (snapshot["onDeleteNewUser"] as? Snapshot).flatMap { OnDeleteNewUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteNewUser")
      }
    }

    public struct OnDeleteNewUser: GraphQLSelectionSet {
      public static let possibleTypes = ["NewUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("diveMeetsID", type: .scalar(String.self)),
        GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
        GraphQLField("athlete", type: .object(Athlete.selections)),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("posts", type: .object(Post.selections)),
        GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("savedPosts", type: .object(SavedPost.selections)),
        GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
        GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, athlete: Athlete? = nil, coach: Coach? = nil, posts: Post? = nil, tokens: [String], savedPosts: SavedPost? = nil, favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "athlete": athlete.flatMap { $0.snapshot }, "coach": coach.flatMap { $0.snapshot }, "posts": posts.flatMap { $0.snapshot }, "tokens": tokens, "savedPosts": savedPosts.flatMap { $0.snapshot }, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var diveMeetsId: String? {
        get {
          return snapshot["diveMeetsID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveMeetsID")
        }
      }

      public var accountType: String {
        get {
          return snapshot["accountType"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "accountType")
        }
      }

      public var athlete: Athlete? {
        get {
          return (snapshot["athlete"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athlete")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var posts: Post? {
        get {
          return (snapshot["posts"] as? Snapshot).flatMap { Post(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "posts")
        }
      }

      public var tokens: [String] {
        get {
          return snapshot["tokens"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "tokens")
        }
      }

      public var savedPosts: SavedPost? {
        get {
          return (snapshot["savedPosts"] as? Snapshot).flatMap { SavedPost(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "savedPosts")
        }
      }

      public var favoritesIds: [String] {
        get {
          return snapshot["favoritesIds"]! as! [String]
        }
        set {
          snapshot.updateValue(newValue, forKey: "favoritesIds")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newUserAthleteId: GraphQLID? {
        get {
          return snapshot["newUserAthleteId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserAthleteId")
        }
      }

      public var newUserCoachId: GraphQLID? {
        get {
          return snapshot["newUserCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newUserCoachId")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Post: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }

      public struct SavedPost: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelUserSavedPostConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelUserSavedPostConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateNewAthleteSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateNewAthlete($filter: ModelSubscriptionNewAthleteFilterInput) {\n  onCreateNewAthlete(filter: $filter) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    college {\n      __typename\n      id\n      name\n      imageLink\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    heightFeet\n    heightInches\n    weight\n    weightUnit\n    gender\n    age\n    graduationYear\n    highSchool\n    hometown\n    springboardRating\n    platformRating\n    totalRating\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    collegeID\n    newteamID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newAthleteUserId\n  }\n}"

  public var filter: ModelSubscriptionNewAthleteFilterInput?

  public init(filter: ModelSubscriptionNewAthleteFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateNewAthlete", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateNewAthlete.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateNewAthlete: OnCreateNewAthlete? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateNewAthlete": onCreateNewAthlete.flatMap { $0.snapshot }])
    }

    public var onCreateNewAthlete: OnCreateNewAthlete? {
      get {
        return (snapshot["onCreateNewAthlete"] as? Snapshot).flatMap { OnCreateNewAthlete(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateNewAthlete")
      }
    }

    public struct OnCreateNewAthlete: GraphQLSelectionSet {
      public static let possibleTypes = ["NewAthlete"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("college", type: .object(College.selections)),
        GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
        GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
        GraphQLField("gender", type: .nonNull(.scalar(String.self))),
        GraphQLField("age", type: .nonNull(.scalar(Int.self))),
        GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
        GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
        GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
        GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User, team: Team? = nil, college: College? = nil, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, dives: Dife? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
        self.init(snapshot: ["__typename": "NewAthlete", "id": id, "user": user.snapshot, "team": team.flatMap { $0.snapshot }, "college": college.flatMap { $0.snapshot }, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "dives": dives.flatMap { $0.snapshot }, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var college: College? {
        get {
          return (snapshot["college"] as? Snapshot).flatMap { College(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "college")
        }
      }

      public var heightFeet: Int {
        get {
          return snapshot["heightFeet"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightFeet")
        }
      }

      public var heightInches: Int {
        get {
          return snapshot["heightInches"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightInches")
        }
      }

      public var weight: Int {
        get {
          return snapshot["weight"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "weight")
        }
      }

      public var weightUnit: String {
        get {
          return snapshot["weightUnit"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "weightUnit")
        }
      }

      public var gender: String {
        get {
          return snapshot["gender"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var age: Int {
        get {
          return snapshot["age"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "age")
        }
      }

      public var graduationYear: Int {
        get {
          return snapshot["graduationYear"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "graduationYear")
        }
      }

      public var highSchool: String {
        get {
          return snapshot["highSchool"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "highSchool")
        }
      }

      public var hometown: String {
        get {
          return snapshot["hometown"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hometown")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var collegeId: GraphQLID? {
        get {
          return snapshot["collegeID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collegeID")
        }
      }

      public var newteamId: GraphQLID? {
        get {
          return snapshot["newteamID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newteamID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newAthleteUserId: GraphQLID {
        get {
          return snapshot["newAthleteUserId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newAthleteUserId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }

      public struct College: GraphQLSelectionSet {
        public static let possibleTypes = ["College"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, imageLink: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var imageLink: String {
          get {
            return snapshot["imageLink"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "imageLink")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdateNewAthleteSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateNewAthlete($filter: ModelSubscriptionNewAthleteFilterInput) {\n  onUpdateNewAthlete(filter: $filter) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    college {\n      __typename\n      id\n      name\n      imageLink\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    heightFeet\n    heightInches\n    weight\n    weightUnit\n    gender\n    age\n    graduationYear\n    highSchool\n    hometown\n    springboardRating\n    platformRating\n    totalRating\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    collegeID\n    newteamID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newAthleteUserId\n  }\n}"

  public var filter: ModelSubscriptionNewAthleteFilterInput?

  public init(filter: ModelSubscriptionNewAthleteFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateNewAthlete", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateNewAthlete.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateNewAthlete: OnUpdateNewAthlete? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateNewAthlete": onUpdateNewAthlete.flatMap { $0.snapshot }])
    }

    public var onUpdateNewAthlete: OnUpdateNewAthlete? {
      get {
        return (snapshot["onUpdateNewAthlete"] as? Snapshot).flatMap { OnUpdateNewAthlete(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateNewAthlete")
      }
    }

    public struct OnUpdateNewAthlete: GraphQLSelectionSet {
      public static let possibleTypes = ["NewAthlete"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("college", type: .object(College.selections)),
        GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
        GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
        GraphQLField("gender", type: .nonNull(.scalar(String.self))),
        GraphQLField("age", type: .nonNull(.scalar(Int.self))),
        GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
        GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
        GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
        GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User, team: Team? = nil, college: College? = nil, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, dives: Dife? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
        self.init(snapshot: ["__typename": "NewAthlete", "id": id, "user": user.snapshot, "team": team.flatMap { $0.snapshot }, "college": college.flatMap { $0.snapshot }, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "dives": dives.flatMap { $0.snapshot }, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var college: College? {
        get {
          return (snapshot["college"] as? Snapshot).flatMap { College(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "college")
        }
      }

      public var heightFeet: Int {
        get {
          return snapshot["heightFeet"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightFeet")
        }
      }

      public var heightInches: Int {
        get {
          return snapshot["heightInches"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightInches")
        }
      }

      public var weight: Int {
        get {
          return snapshot["weight"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "weight")
        }
      }

      public var weightUnit: String {
        get {
          return snapshot["weightUnit"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "weightUnit")
        }
      }

      public var gender: String {
        get {
          return snapshot["gender"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var age: Int {
        get {
          return snapshot["age"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "age")
        }
      }

      public var graduationYear: Int {
        get {
          return snapshot["graduationYear"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "graduationYear")
        }
      }

      public var highSchool: String {
        get {
          return snapshot["highSchool"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "highSchool")
        }
      }

      public var hometown: String {
        get {
          return snapshot["hometown"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hometown")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var collegeId: GraphQLID? {
        get {
          return snapshot["collegeID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collegeID")
        }
      }

      public var newteamId: GraphQLID? {
        get {
          return snapshot["newteamID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newteamID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newAthleteUserId: GraphQLID {
        get {
          return snapshot["newAthleteUserId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newAthleteUserId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }

      public struct College: GraphQLSelectionSet {
        public static let possibleTypes = ["College"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, imageLink: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var imageLink: String {
          get {
            return snapshot["imageLink"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "imageLink")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnDeleteNewAthleteSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteNewAthlete($filter: ModelSubscriptionNewAthleteFilterInput) {\n  onDeleteNewAthlete(filter: $filter) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    college {\n      __typename\n      id\n      name\n      imageLink\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    heightFeet\n    heightInches\n    weight\n    weightUnit\n    gender\n    age\n    graduationYear\n    highSchool\n    hometown\n    springboardRating\n    platformRating\n    totalRating\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    collegeID\n    newteamID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newAthleteUserId\n  }\n}"

  public var filter: ModelSubscriptionNewAthleteFilterInput?

  public init(filter: ModelSubscriptionNewAthleteFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteNewAthlete", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteNewAthlete.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteNewAthlete: OnDeleteNewAthlete? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteNewAthlete": onDeleteNewAthlete.flatMap { $0.snapshot }])
    }

    public var onDeleteNewAthlete: OnDeleteNewAthlete? {
      get {
        return (snapshot["onDeleteNewAthlete"] as? Snapshot).flatMap { OnDeleteNewAthlete(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteNewAthlete")
      }
    }

    public struct OnDeleteNewAthlete: GraphQLSelectionSet {
      public static let possibleTypes = ["NewAthlete"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("college", type: .object(College.selections)),
        GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
        GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
        GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
        GraphQLField("gender", type: .nonNull(.scalar(String.self))),
        GraphQLField("age", type: .nonNull(.scalar(Int.self))),
        GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
        GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
        GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
        GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User, team: Team? = nil, college: College? = nil, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, dives: Dife? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
        self.init(snapshot: ["__typename": "NewAthlete", "id": id, "user": user.snapshot, "team": team.flatMap { $0.snapshot }, "college": college.flatMap { $0.snapshot }, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "dives": dives.flatMap { $0.snapshot }, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var college: College? {
        get {
          return (snapshot["college"] as? Snapshot).flatMap { College(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "college")
        }
      }

      public var heightFeet: Int {
        get {
          return snapshot["heightFeet"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightFeet")
        }
      }

      public var heightInches: Int {
        get {
          return snapshot["heightInches"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "heightInches")
        }
      }

      public var weight: Int {
        get {
          return snapshot["weight"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "weight")
        }
      }

      public var weightUnit: String {
        get {
          return snapshot["weightUnit"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "weightUnit")
        }
      }

      public var gender: String {
        get {
          return snapshot["gender"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "gender")
        }
      }

      public var age: Int {
        get {
          return snapshot["age"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "age")
        }
      }

      public var graduationYear: Int {
        get {
          return snapshot["graduationYear"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "graduationYear")
        }
      }

      public var highSchool: String {
        get {
          return snapshot["highSchool"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "highSchool")
        }
      }

      public var hometown: String {
        get {
          return snapshot["hometown"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "hometown")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var collegeId: GraphQLID? {
        get {
          return snapshot["collegeID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "collegeID")
        }
      }

      public var newteamId: GraphQLID? {
        get {
          return snapshot["newteamID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newteamID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newAthleteUserId: GraphQLID {
        get {
          return snapshot["newAthleteUserId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newAthleteUserId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }

      public struct College: GraphQLSelectionSet {
        public static let possibleTypes = ["College"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, imageLink: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var imageLink: String {
          get {
            return snapshot["imageLink"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "imageLink")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateVideoSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateVideo($filter: ModelSubscriptionVideoFilterInput) {\n  onCreateVideo(filter: $filter) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionVideoFilterInput?

  public init(filter: ModelSubscriptionVideoFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateVideo", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateVideo: OnCreateVideo? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateVideo": onCreateVideo.flatMap { $0.snapshot }])
    }

    public var onCreateVideo: OnCreateVideo? {
      get {
        return (snapshot["onCreateVideo"] as? Snapshot).flatMap { OnCreateVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateVideo")
      }
    }

    public struct OnCreateVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["Video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnUpdateVideoSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateVideo($filter: ModelSubscriptionVideoFilterInput) {\n  onUpdateVideo(filter: $filter) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionVideoFilterInput?

  public init(filter: ModelSubscriptionVideoFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateVideo", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateVideo: OnUpdateVideo? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateVideo": onUpdateVideo.flatMap { $0.snapshot }])
    }

    public var onUpdateVideo: OnUpdateVideo? {
      get {
        return (snapshot["onUpdateVideo"] as? Snapshot).flatMap { OnUpdateVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateVideo")
      }
    }

    public struct OnUpdateVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["Video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnDeleteVideoSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteVideo($filter: ModelSubscriptionVideoFilterInput) {\n  onDeleteVideo(filter: $filter) {\n    __typename\n    id\n    s3key\n    uploadDate\n    postID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionVideoFilterInput?

  public init(filter: ModelSubscriptionVideoFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteVideo", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteVideo.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteVideo: OnDeleteVideo? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteVideo": onDeleteVideo.flatMap { $0.snapshot }])
    }

    public var onDeleteVideo: OnDeleteVideo? {
      get {
        return (snapshot["onDeleteVideo"] as? Snapshot).flatMap { OnDeleteVideo(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteVideo")
      }
    }

    public struct OnDeleteVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["Video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("s3key", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("postID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, s3key: String, uploadDate: String, postId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Video", "id": id, "s3key": s3key, "uploadDate": uploadDate, "postID": postId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var s3key: String {
        get {
          return snapshot["s3key"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "s3key")
        }
      }

      public var uploadDate: String {
        get {
          return snapshot["uploadDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "uploadDate")
        }
      }

      public var postId: GraphQLID {
        get {
          return snapshot["postID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "postID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnCreateCoachUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateCoachUser($filter: ModelSubscriptionCoachUserFilterInput) {\n  onCreateCoachUser(filter: $filter) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    coachUserUserId\n    coachUserTeamId\n  }\n}"

  public var filter: ModelSubscriptionCoachUserFilterInput?

  public init(filter: ModelSubscriptionCoachUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateCoachUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateCoachUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateCoachUser: OnCreateCoachUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateCoachUser": onCreateCoachUser.flatMap { $0.snapshot }])
    }

    public var onCreateCoachUser: OnCreateCoachUser? {
      get {
        return (snapshot["onCreateCoachUser"] as? Snapshot).flatMap { OnCreateCoachUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateCoachUser")
      }
    }

    public struct OnCreateCoachUser: GraphQLSelectionSet {
      public static let possibleTypes = ["CoachUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
        GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User? = nil, team: Team? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "CoachUser", "id": id, "user": user.flatMap { $0.snapshot }, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var coachUserUserId: GraphQLID? {
        get {
          return snapshot["coachUserUserId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserUserId")
        }
      }

      public var coachUserTeamId: GraphQLID? {
        get {
          return snapshot["coachUserTeamId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserTeamId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }
    }
  }
}

public final class OnUpdateCoachUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateCoachUser($filter: ModelSubscriptionCoachUserFilterInput) {\n  onUpdateCoachUser(filter: $filter) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    coachUserUserId\n    coachUserTeamId\n  }\n}"

  public var filter: ModelSubscriptionCoachUserFilterInput?

  public init(filter: ModelSubscriptionCoachUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateCoachUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateCoachUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateCoachUser: OnUpdateCoachUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateCoachUser": onUpdateCoachUser.flatMap { $0.snapshot }])
    }

    public var onUpdateCoachUser: OnUpdateCoachUser? {
      get {
        return (snapshot["onUpdateCoachUser"] as? Snapshot).flatMap { OnUpdateCoachUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateCoachUser")
      }
    }

    public struct OnUpdateCoachUser: GraphQLSelectionSet {
      public static let possibleTypes = ["CoachUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
        GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User? = nil, team: Team? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "CoachUser", "id": id, "user": user.flatMap { $0.snapshot }, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var coachUserUserId: GraphQLID? {
        get {
          return snapshot["coachUserUserId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserUserId")
        }
      }

      public var coachUserTeamId: GraphQLID? {
        get {
          return snapshot["coachUserTeamId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserTeamId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }
    }
  }
}

public final class OnDeleteCoachUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteCoachUser($filter: ModelSubscriptionCoachUserFilterInput) {\n  onDeleteCoachUser(filter: $filter) {\n    __typename\n    id\n    user {\n      __typename\n      id\n      firstName\n      lastName\n      email\n      phone\n      diveMeetsID\n      accountType\n      tokens\n      favoritesIds\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newUserAthleteId\n      newUserCoachId\n    }\n    team {\n      __typename\n      id\n      name\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newTeamCoachId\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    coachUserUserId\n    coachUserTeamId\n  }\n}"

  public var filter: ModelSubscriptionCoachUserFilterInput?

  public init(filter: ModelSubscriptionCoachUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteCoachUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteCoachUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteCoachUser: OnDeleteCoachUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteCoachUser": onDeleteCoachUser.flatMap { $0.snapshot }])
    }

    public var onDeleteCoachUser: OnDeleteCoachUser? {
      get {
        return (snapshot["onDeleteCoachUser"] as? Snapshot).flatMap { OnDeleteCoachUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteCoachUser")
      }
    }

    public struct OnDeleteCoachUser: GraphQLSelectionSet {
      public static let possibleTypes = ["CoachUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("team", type: .object(Team.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
        GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, user: User? = nil, team: Team? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "CoachUser", "id": id, "user": user.flatMap { $0.snapshot }, "team": team.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var team: Team? {
        get {
          return (snapshot["team"] as? Snapshot).flatMap { Team(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "team")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var coachUserUserId: GraphQLID? {
        get {
          return snapshot["coachUserUserId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserUserId")
        }
      }

      public var coachUserTeamId: GraphQLID? {
        get {
          return snapshot["coachUserTeamId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "coachUserTeamId")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["NewUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("diveMeetsID", type: .scalar(String.self)),
          GraphQLField("accountType", type: .nonNull(.scalar(String.self))),
          GraphQLField("tokens", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("favoritesIds", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newUserAthleteId", type: .scalar(GraphQLID.self)),
          GraphQLField("newUserCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, firstName: String, lastName: String, email: String, phone: String? = nil, diveMeetsId: String? = nil, accountType: String, tokens: [String], favoritesIds: [String], createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newUserAthleteId: GraphQLID? = nil, newUserCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewUser", "id": id, "firstName": firstName, "lastName": lastName, "email": email, "phone": phone, "diveMeetsID": diveMeetsId, "accountType": accountType, "tokens": tokens, "favoritesIds": favoritesIds, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newUserAthleteId": newUserAthleteId, "newUserCoachId": newUserCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var firstName: String {
          get {
            return snapshot["firstName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String {
          get {
            return snapshot["lastName"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var diveMeetsId: String? {
          get {
            return snapshot["diveMeetsID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "diveMeetsID")
          }
        }

        public var accountType: String {
          get {
            return snapshot["accountType"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "accountType")
          }
        }

        public var tokens: [String] {
          get {
            return snapshot["tokens"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "tokens")
          }
        }

        public var favoritesIds: [String] {
          get {
            return snapshot["favoritesIds"]! as! [String]
          }
          set {
            snapshot.updateValue(newValue, forKey: "favoritesIds")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newUserAthleteId: GraphQLID? {
          get {
            return snapshot["newUserAthleteId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserAthleteId")
          }
        }

        public var newUserCoachId: GraphQLID? {
          get {
            return snapshot["newUserCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newUserCoachId")
          }
        }
      }

      public struct Team: GraphQLSelectionSet {
        public static let possibleTypes = ["NewTeam"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newTeamCoachId: GraphQLID? {
          get {
            return snapshot["newTeamCoachId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newTeamCoachId")
          }
        }
      }
    }
  }
}

public final class OnCreateNewTeamSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateNewTeam($filter: ModelSubscriptionNewTeamFilterInput) {\n  onCreateNewTeam(filter: $filter) {\n    __typename\n    id\n    name\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newTeamCoachId\n  }\n}"

  public var filter: ModelSubscriptionNewTeamFilterInput?

  public init(filter: ModelSubscriptionNewTeamFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateNewTeam", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateNewTeam.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateNewTeam: OnCreateNewTeam? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateNewTeam": onCreateNewTeam.flatMap { $0.snapshot }])
    }

    public var onCreateNewTeam: OnCreateNewTeam? {
      get {
        return (snapshot["onCreateNewTeam"] as? Snapshot).flatMap { OnCreateNewTeam(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateNewTeam")
      }
    }

    public struct OnCreateNewTeam: GraphQLSelectionSet {
      public static let possibleTypes = ["NewTeam"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, coach: Coach? = nil, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "coach": coach.flatMap { $0.snapshot }, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newTeamCoachId: GraphQLID? {
        get {
          return snapshot["newTeamCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newTeamCoachId")
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdateNewTeamSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateNewTeam($filter: ModelSubscriptionNewTeamFilterInput) {\n  onUpdateNewTeam(filter: $filter) {\n    __typename\n    id\n    name\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newTeamCoachId\n  }\n}"

  public var filter: ModelSubscriptionNewTeamFilterInput?

  public init(filter: ModelSubscriptionNewTeamFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateNewTeam", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateNewTeam.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateNewTeam: OnUpdateNewTeam? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateNewTeam": onUpdateNewTeam.flatMap { $0.snapshot }])
    }

    public var onUpdateNewTeam: OnUpdateNewTeam? {
      get {
        return (snapshot["onUpdateNewTeam"] as? Snapshot).flatMap { OnUpdateNewTeam(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateNewTeam")
      }
    }

    public struct OnUpdateNewTeam: GraphQLSelectionSet {
      public static let possibleTypes = ["NewTeam"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, coach: Coach? = nil, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "coach": coach.flatMap { $0.snapshot }, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newTeamCoachId: GraphQLID? {
        get {
          return snapshot["newTeamCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newTeamCoachId")
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnDeleteNewTeamSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteNewTeam($filter: ModelSubscriptionNewTeamFilterInput) {\n  onDeleteNewTeam(filter: $filter) {\n    __typename\n    id\n    name\n    coach {\n      __typename\n      id\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      coachUserUserId\n      coachUserTeamId\n    }\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    newTeamCoachId\n  }\n}"

  public var filter: ModelSubscriptionNewTeamFilterInput?

  public init(filter: ModelSubscriptionNewTeamFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteNewTeam", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteNewTeam.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteNewTeam: OnDeleteNewTeam? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteNewTeam": onDeleteNewTeam.flatMap { $0.snapshot }])
    }

    public var onDeleteNewTeam: OnDeleteNewTeam? {
      get {
        return (snapshot["onDeleteNewTeam"] as? Snapshot).flatMap { OnDeleteNewTeam(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteNewTeam")
      }
    }

    public struct OnDeleteNewTeam: GraphQLSelectionSet {
      public static let possibleTypes = ["NewTeam"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("coach", type: .object(Coach.selections)),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("newTeamCoachId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, coach: Coach? = nil, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newTeamCoachId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "NewTeam", "id": id, "name": name, "coach": coach.flatMap { $0.snapshot }, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newTeamCoachId": newTeamCoachId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var coach: Coach? {
        get {
          return (snapshot["coach"] as? Snapshot).flatMap { Coach(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "coach")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var newTeamCoachId: GraphQLID? {
        get {
          return snapshot["newTeamCoachId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newTeamCoachId")
        }
      }

      public struct Coach: GraphQLSelectionSet {
        public static let possibleTypes = ["CoachUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("coachUserUserId", type: .scalar(GraphQLID.self)),
          GraphQLField("coachUserTeamId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, coachUserUserId: GraphQLID? = nil, coachUserTeamId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "CoachUser", "id": id, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "coachUserUserId": coachUserUserId, "coachUserTeamId": coachUserTeamId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var coachUserUserId: GraphQLID? {
          get {
            return snapshot["coachUserUserId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserUserId")
          }
        }

        public var coachUserTeamId: GraphQLID? {
          get {
            return snapshot["coachUserTeamId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "coachUserTeamId")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateCollegeSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateCollege($filter: ModelSubscriptionCollegeFilterInput) {\n  onCreateCollege(filter: $filter) {\n    __typename\n    id\n    name\n    imageLink\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionCollegeFilterInput?

  public init(filter: ModelSubscriptionCollegeFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateCollege", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateCollege.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateCollege: OnCreateCollege? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateCollege": onCreateCollege.flatMap { $0.snapshot }])
    }

    public var onCreateCollege: OnCreateCollege? {
      get {
        return (snapshot["onCreateCollege"] as? Snapshot).flatMap { OnCreateCollege(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateCollege")
      }
    }

    public struct OnCreateCollege: GraphQLSelectionSet {
      public static let possibleTypes = ["College"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, imageLink: String, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var imageLink: String {
        get {
          return snapshot["imageLink"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "imageLink")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdateCollegeSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateCollege($filter: ModelSubscriptionCollegeFilterInput) {\n  onUpdateCollege(filter: $filter) {\n    __typename\n    id\n    name\n    imageLink\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionCollegeFilterInput?

  public init(filter: ModelSubscriptionCollegeFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateCollege", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateCollege.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateCollege: OnUpdateCollege? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateCollege": onUpdateCollege.flatMap { $0.snapshot }])
    }

    public var onUpdateCollege: OnUpdateCollege? {
      get {
        return (snapshot["onUpdateCollege"] as? Snapshot).flatMap { OnUpdateCollege(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateCollege")
      }
    }

    public struct OnUpdateCollege: GraphQLSelectionSet {
      public static let possibleTypes = ["College"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, imageLink: String, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var imageLink: String {
        get {
          return snapshot["imageLink"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "imageLink")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnDeleteCollegeSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteCollege($filter: ModelSubscriptionCollegeFilterInput) {\n  onDeleteCollege(filter: $filter) {\n    __typename\n    id\n    name\n    imageLink\n    athletes {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionCollegeFilterInput?

  public init(filter: ModelSubscriptionCollegeFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteCollege", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteCollege.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteCollege: OnDeleteCollege? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteCollege": onDeleteCollege.flatMap { $0.snapshot }])
    }

    public var onDeleteCollege: OnDeleteCollege? {
      get {
        return (snapshot["onDeleteCollege"] as? Snapshot).flatMap { OnDeleteCollege(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteCollege")
      }
    }

    public struct OnDeleteCollege: GraphQLSelectionSet {
      public static let possibleTypes = ["College"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("imageLink", type: .nonNull(.scalar(String.self))),
        GraphQLField("athletes", type: .object(Athlete.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, imageLink: String, athletes: Athlete? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "College", "id": id, "name": name, "imageLink": imageLink, "athletes": athletes.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var imageLink: String {
        get {
          return snapshot["imageLink"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "imageLink")
        }
      }

      public var athletes: Athlete? {
        get {
          return (snapshot["athletes"] as? Snapshot).flatMap { Athlete(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "athletes")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewAthleteConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewAthleteConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateNewMeetSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateNewMeet($filter: ModelSubscriptionNewMeetFilterInput) {\n  onCreateNewMeet(filter: $filter) {\n    __typename\n    id\n    meetID\n    name\n    organization\n    startDate\n    endDate\n    city\n    state\n    country\n    link\n    meetType\n    events {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionNewMeetFilterInput?

  public init(filter: ModelSubscriptionNewMeetFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateNewMeet", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateNewMeet.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateNewMeet: OnCreateNewMeet? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateNewMeet": onCreateNewMeet.flatMap { $0.snapshot }])
    }

    public var onCreateNewMeet: OnCreateNewMeet? {
      get {
        return (snapshot["onCreateNewMeet"] as? Snapshot).flatMap { OnCreateNewMeet(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateNewMeet")
      }
    }

    public struct OnCreateNewMeet: GraphQLSelectionSet {
      public static let possibleTypes = ["NewMeet"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("organization", type: .scalar(String.self)),
        GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("state", type: .nonNull(.scalar(String.self))),
        GraphQLField("country", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
        GraphQLField("events", type: .object(Event.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, events: Event? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "events": events.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meetId: Int {
        get {
          return snapshot["meetID"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var organization: String? {
        get {
          return snapshot["organization"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "organization")
        }
      }

      public var startDate: String {
        get {
          return snapshot["startDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "startDate")
        }
      }

      public var endDate: String {
        get {
          return snapshot["endDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "endDate")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var state: String {
        get {
          return snapshot["state"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var country: String {
        get {
          return snapshot["country"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "country")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var meetType: Int {
        get {
          return snapshot["meetType"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetType")
        }
      }

      public var events: Event? {
        get {
          return (snapshot["events"] as? Snapshot).flatMap { Event(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "events")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewEventConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewEventConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdateNewMeetSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateNewMeet($filter: ModelSubscriptionNewMeetFilterInput) {\n  onUpdateNewMeet(filter: $filter) {\n    __typename\n    id\n    meetID\n    name\n    organization\n    startDate\n    endDate\n    city\n    state\n    country\n    link\n    meetType\n    events {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionNewMeetFilterInput?

  public init(filter: ModelSubscriptionNewMeetFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateNewMeet", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateNewMeet.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateNewMeet: OnUpdateNewMeet? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateNewMeet": onUpdateNewMeet.flatMap { $0.snapshot }])
    }

    public var onUpdateNewMeet: OnUpdateNewMeet? {
      get {
        return (snapshot["onUpdateNewMeet"] as? Snapshot).flatMap { OnUpdateNewMeet(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateNewMeet")
      }
    }

    public struct OnUpdateNewMeet: GraphQLSelectionSet {
      public static let possibleTypes = ["NewMeet"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("organization", type: .scalar(String.self)),
        GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("state", type: .nonNull(.scalar(String.self))),
        GraphQLField("country", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
        GraphQLField("events", type: .object(Event.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, events: Event? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "events": events.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meetId: Int {
        get {
          return snapshot["meetID"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var organization: String? {
        get {
          return snapshot["organization"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "organization")
        }
      }

      public var startDate: String {
        get {
          return snapshot["startDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "startDate")
        }
      }

      public var endDate: String {
        get {
          return snapshot["endDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "endDate")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var state: String {
        get {
          return snapshot["state"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var country: String {
        get {
          return snapshot["country"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "country")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var meetType: Int {
        get {
          return snapshot["meetType"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetType")
        }
      }

      public var events: Event? {
        get {
          return (snapshot["events"] as? Snapshot).flatMap { Event(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "events")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewEventConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewEventConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnDeleteNewMeetSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteNewMeet($filter: ModelSubscriptionNewMeetFilterInput) {\n  onDeleteNewMeet(filter: $filter) {\n    __typename\n    id\n    meetID\n    name\n    organization\n    startDate\n    endDate\n    city\n    state\n    country\n    link\n    meetType\n    events {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionNewMeetFilterInput?

  public init(filter: ModelSubscriptionNewMeetFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteNewMeet", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteNewMeet.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteNewMeet: OnDeleteNewMeet? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteNewMeet": onDeleteNewMeet.flatMap { $0.snapshot }])
    }

    public var onDeleteNewMeet: OnDeleteNewMeet? {
      get {
        return (snapshot["onDeleteNewMeet"] as? Snapshot).flatMap { OnDeleteNewMeet(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteNewMeet")
      }
    }

    public struct OnDeleteNewMeet: GraphQLSelectionSet {
      public static let possibleTypes = ["NewMeet"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("organization", type: .scalar(String.self)),
        GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("city", type: .nonNull(.scalar(String.self))),
        GraphQLField("state", type: .nonNull(.scalar(String.self))),
        GraphQLField("country", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
        GraphQLField("events", type: .object(Event.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, events: Event? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "events": events.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meetId: Int {
        get {
          return snapshot["meetID"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetID")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var organization: String? {
        get {
          return snapshot["organization"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "organization")
        }
      }

      public var startDate: String {
        get {
          return snapshot["startDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "startDate")
        }
      }

      public var endDate: String {
        get {
          return snapshot["endDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "endDate")
        }
      }

      public var city: String {
        get {
          return snapshot["city"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "city")
        }
      }

      public var state: String {
        get {
          return snapshot["state"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var country: String {
        get {
          return snapshot["country"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "country")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var meetType: Int {
        get {
          return snapshot["meetType"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "meetType")
        }
      }

      public var events: Event? {
        get {
          return (snapshot["events"] as? Snapshot).flatMap { Event(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "events")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelNewEventConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelNewEventConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateNewEventSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateNewEvent($filter: ModelSubscriptionNewEventFilterInput) {\n  onCreateNewEvent(filter: $filter) {\n    __typename\n    id\n    meet {\n      __typename\n      id\n      meetID\n      name\n      organization\n      startDate\n      endDate\n      city\n      state\n      country\n      link\n      meetType\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    name\n    date\n    link\n    numEntries\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    newmeetID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionNewEventFilterInput?

  public init(filter: ModelSubscriptionNewEventFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateNewEvent", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateNewEvent.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateNewEvent: OnCreateNewEvent? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateNewEvent": onCreateNewEvent.flatMap { $0.snapshot }])
    }

    public var onCreateNewEvent: OnCreateNewEvent? {
      get {
        return (snapshot["onCreateNewEvent"] as? Snapshot).flatMap { OnCreateNewEvent(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateNewEvent")
      }
    }

    public struct OnCreateNewEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["NewEvent"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meet", type: .nonNull(.object(Meet.selections))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("date", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meet: Meet, name: String, date: String, link: String, numEntries: Int, dives: Dife? = nil, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewEvent", "id": id, "meet": meet.snapshot, "name": name, "date": date, "link": link, "numEntries": numEntries, "dives": dives.flatMap { $0.snapshot }, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meet: Meet {
        get {
          return Meet(snapshot: snapshot["meet"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "meet")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var date: String {
        get {
          return snapshot["date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "date")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var numEntries: Int {
        get {
          return snapshot["numEntries"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "numEntries")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var newmeetId: GraphQLID {
        get {
          return snapshot["newmeetID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newmeetID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Meet: GraphQLSelectionSet {
        public static let possibleTypes = ["NewMeet"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("organization", type: .scalar(String.self)),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var meetId: Int {
          get {
            return snapshot["meetID"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var organization: String? {
          get {
            return snapshot["organization"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "organization")
          }
        }

        public var startDate: String {
          get {
            return snapshot["startDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "startDate")
          }
        }

        public var endDate: String {
          get {
            return snapshot["endDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "endDate")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return snapshot["state"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return snapshot["country"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "country")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var meetType: Int {
          get {
            return snapshot["meetType"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetType")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdateNewEventSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateNewEvent($filter: ModelSubscriptionNewEventFilterInput) {\n  onUpdateNewEvent(filter: $filter) {\n    __typename\n    id\n    meet {\n      __typename\n      id\n      meetID\n      name\n      organization\n      startDate\n      endDate\n      city\n      state\n      country\n      link\n      meetType\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    name\n    date\n    link\n    numEntries\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    newmeetID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionNewEventFilterInput?

  public init(filter: ModelSubscriptionNewEventFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateNewEvent", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateNewEvent.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateNewEvent: OnUpdateNewEvent? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateNewEvent": onUpdateNewEvent.flatMap { $0.snapshot }])
    }

    public var onUpdateNewEvent: OnUpdateNewEvent? {
      get {
        return (snapshot["onUpdateNewEvent"] as? Snapshot).flatMap { OnUpdateNewEvent(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateNewEvent")
      }
    }

    public struct OnUpdateNewEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["NewEvent"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meet", type: .nonNull(.object(Meet.selections))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("date", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meet: Meet, name: String, date: String, link: String, numEntries: Int, dives: Dife? = nil, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewEvent", "id": id, "meet": meet.snapshot, "name": name, "date": date, "link": link, "numEntries": numEntries, "dives": dives.flatMap { $0.snapshot }, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meet: Meet {
        get {
          return Meet(snapshot: snapshot["meet"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "meet")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var date: String {
        get {
          return snapshot["date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "date")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var numEntries: Int {
        get {
          return snapshot["numEntries"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "numEntries")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var newmeetId: GraphQLID {
        get {
          return snapshot["newmeetID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newmeetID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Meet: GraphQLSelectionSet {
        public static let possibleTypes = ["NewMeet"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("organization", type: .scalar(String.self)),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var meetId: Int {
          get {
            return snapshot["meetID"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var organization: String? {
          get {
            return snapshot["organization"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "organization")
          }
        }

        public var startDate: String {
          get {
            return snapshot["startDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "startDate")
          }
        }

        public var endDate: String {
          get {
            return snapshot["endDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "endDate")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return snapshot["state"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return snapshot["country"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "country")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var meetType: Int {
          get {
            return snapshot["meetType"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetType")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnDeleteNewEventSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteNewEvent($filter: ModelSubscriptionNewEventFilterInput) {\n  onDeleteNewEvent(filter: $filter) {\n    __typename\n    id\n    meet {\n      __typename\n      id\n      meetID\n      name\n      organization\n      startDate\n      endDate\n      city\n      state\n      country\n      link\n      meetType\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    name\n    date\n    link\n    numEntries\n    dives {\n      __typename\n      nextToken\n      startedAt\n    }\n    newmeetID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionNewEventFilterInput?

  public init(filter: ModelSubscriptionNewEventFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteNewEvent", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteNewEvent.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteNewEvent: OnDeleteNewEvent? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteNewEvent": onDeleteNewEvent.flatMap { $0.snapshot }])
    }

    public var onDeleteNewEvent: OnDeleteNewEvent? {
      get {
        return (snapshot["onDeleteNewEvent"] as? Snapshot).flatMap { OnDeleteNewEvent(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteNewEvent")
      }
    }

    public struct OnDeleteNewEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["NewEvent"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("meet", type: .nonNull(.object(Meet.selections))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("date", type: .nonNull(.scalar(String.self))),
        GraphQLField("link", type: .nonNull(.scalar(String.self))),
        GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
        GraphQLField("dives", type: .object(Dife.selections)),
        GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, meet: Meet, name: String, date: String, link: String, numEntries: Int, dives: Dife? = nil, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "NewEvent", "id": id, "meet": meet.snapshot, "name": name, "date": date, "link": link, "numEntries": numEntries, "dives": dives.flatMap { $0.snapshot }, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var meet: Meet {
        get {
          return Meet(snapshot: snapshot["meet"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "meet")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var date: String {
        get {
          return snapshot["date"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "date")
        }
      }

      public var link: String {
        get {
          return snapshot["link"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "link")
        }
      }

      public var numEntries: Int {
        get {
          return snapshot["numEntries"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "numEntries")
        }
      }

      public var dives: Dife? {
        get {
          return (snapshot["dives"] as? Snapshot).flatMap { Dife(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "dives")
        }
      }

      public var newmeetId: GraphQLID {
        get {
          return snapshot["newmeetID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newmeetID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Meet: GraphQLSelectionSet {
        public static let possibleTypes = ["NewMeet"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("meetID", type: .nonNull(.scalar(Int.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("organization", type: .scalar(String.self)),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("meetType", type: .nonNull(.scalar(Int.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, meetId: Int, name: String, organization: String? = nil, startDate: String, endDate: String, city: String, state: String, country: String, link: String, meetType: Int, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewMeet", "id": id, "meetID": meetId, "name": name, "organization": organization, "startDate": startDate, "endDate": endDate, "city": city, "state": state, "country": country, "link": link, "meetType": meetType, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var meetId: Int {
          get {
            return snapshot["meetID"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetID")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var organization: String? {
          get {
            return snapshot["organization"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "organization")
          }
        }

        public var startDate: String {
          get {
            return snapshot["startDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "startDate")
          }
        }

        public var endDate: String {
          get {
            return snapshot["endDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "endDate")
          }
        }

        public var city: String {
          get {
            return snapshot["city"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return snapshot["state"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return snapshot["country"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "country")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var meetType: Int {
          get {
            return snapshot["meetType"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "meetType")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Dife: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelDiveConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelDiveConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateDiveSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateDive($filter: ModelSubscriptionDiveFilterInput) {\n  onCreateDive(filter: $filter) {\n    __typename\n    id\n    event {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    number\n    name\n    height\n    netScore\n    dd\n    totalScore\n    scores {\n      __typename\n      nextToken\n      startedAt\n    }\n    newathleteID\n    neweventID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionDiveFilterInput?

  public init(filter: ModelSubscriptionDiveFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateDive", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateDive.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateDive: OnCreateDive? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateDive": onCreateDive.flatMap { $0.snapshot }])
    }

    public var onCreateDive: OnCreateDive? {
      get {
        return (snapshot["onCreateDive"] as? Snapshot).flatMap { OnCreateDive(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateDive")
      }
    }

    public struct OnCreateDive: GraphQLSelectionSet {
      public static let possibleTypes = ["Dive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("event", type: .nonNull(.object(Event.selections))),
        GraphQLField("athlete", type: .nonNull(.object(Athlete.selections))),
        GraphQLField("number", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("height", type: .nonNull(.scalar(Double.self))),
        GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
        GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("scores", type: .object(Score.selections)),
        GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, event: Event, athlete: Athlete, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, scores: Score? = nil, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Dive", "id": id, "event": event.snapshot, "athlete": athlete.snapshot, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "scores": scores.flatMap { $0.snapshot }, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var event: Event {
        get {
          return Event(snapshot: snapshot["event"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "event")
        }
      }

      public var athlete: Athlete {
        get {
          return Athlete(snapshot: snapshot["athlete"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "athlete")
        }
      }

      public var number: String {
        get {
          return snapshot["number"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "number")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var height: Double {
        get {
          return snapshot["height"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "height")
        }
      }

      public var netScore: Double {
        get {
          return snapshot["netScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "netScore")
        }
      }

      public var dd: Double {
        get {
          return snapshot["dd"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "dd")
        }
      }

      public var totalScore: Double {
        get {
          return snapshot["totalScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalScore")
        }
      }

      public var scores: Score? {
        get {
          return (snapshot["scores"] as? Snapshot).flatMap { Score(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "scores")
        }
      }

      public var newathleteId: GraphQLID {
        get {
          return snapshot["newathleteID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newathleteID")
        }
      }

      public var neweventId: GraphQLID {
        get {
          return snapshot["neweventID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "neweventID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Score: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelJudgeScoreConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdateDiveSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateDive($filter: ModelSubscriptionDiveFilterInput) {\n  onUpdateDive(filter: $filter) {\n    __typename\n    id\n    event {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    number\n    name\n    height\n    netScore\n    dd\n    totalScore\n    scores {\n      __typename\n      nextToken\n      startedAt\n    }\n    newathleteID\n    neweventID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionDiveFilterInput?

  public init(filter: ModelSubscriptionDiveFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateDive", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateDive.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateDive: OnUpdateDive? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateDive": onUpdateDive.flatMap { $0.snapshot }])
    }

    public var onUpdateDive: OnUpdateDive? {
      get {
        return (snapshot["onUpdateDive"] as? Snapshot).flatMap { OnUpdateDive(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateDive")
      }
    }

    public struct OnUpdateDive: GraphQLSelectionSet {
      public static let possibleTypes = ["Dive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("event", type: .nonNull(.object(Event.selections))),
        GraphQLField("athlete", type: .nonNull(.object(Athlete.selections))),
        GraphQLField("number", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("height", type: .nonNull(.scalar(Double.self))),
        GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
        GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("scores", type: .object(Score.selections)),
        GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, event: Event, athlete: Athlete, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, scores: Score? = nil, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Dive", "id": id, "event": event.snapshot, "athlete": athlete.snapshot, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "scores": scores.flatMap { $0.snapshot }, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var event: Event {
        get {
          return Event(snapshot: snapshot["event"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "event")
        }
      }

      public var athlete: Athlete {
        get {
          return Athlete(snapshot: snapshot["athlete"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "athlete")
        }
      }

      public var number: String {
        get {
          return snapshot["number"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "number")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var height: Double {
        get {
          return snapshot["height"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "height")
        }
      }

      public var netScore: Double {
        get {
          return snapshot["netScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "netScore")
        }
      }

      public var dd: Double {
        get {
          return snapshot["dd"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "dd")
        }
      }

      public var totalScore: Double {
        get {
          return snapshot["totalScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalScore")
        }
      }

      public var scores: Score? {
        get {
          return (snapshot["scores"] as? Snapshot).flatMap { Score(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "scores")
        }
      }

      public var newathleteId: GraphQLID {
        get {
          return snapshot["newathleteID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newathleteID")
        }
      }

      public var neweventId: GraphQLID {
        get {
          return snapshot["neweventID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "neweventID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Score: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelJudgeScoreConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnDeleteDiveSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteDive($filter: ModelSubscriptionDiveFilterInput) {\n  onDeleteDive(filter: $filter) {\n    __typename\n    id\n    event {\n      __typename\n      id\n      name\n      date\n      link\n      numEntries\n      newmeetID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    athlete {\n      __typename\n      id\n      heightFeet\n      heightInches\n      weight\n      weightUnit\n      gender\n      age\n      graduationYear\n      highSchool\n      hometown\n      springboardRating\n      platformRating\n      totalRating\n      collegeID\n      newteamID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      newAthleteUserId\n    }\n    number\n    name\n    height\n    netScore\n    dd\n    totalScore\n    scores {\n      __typename\n      nextToken\n      startedAt\n    }\n    newathleteID\n    neweventID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionDiveFilterInput?

  public init(filter: ModelSubscriptionDiveFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteDive", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteDive.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteDive: OnDeleteDive? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteDive": onDeleteDive.flatMap { $0.snapshot }])
    }

    public var onDeleteDive: OnDeleteDive? {
      get {
        return (snapshot["onDeleteDive"] as? Snapshot).flatMap { OnDeleteDive(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteDive")
      }
    }

    public struct OnDeleteDive: GraphQLSelectionSet {
      public static let possibleTypes = ["Dive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("event", type: .nonNull(.object(Event.selections))),
        GraphQLField("athlete", type: .nonNull(.object(Athlete.selections))),
        GraphQLField("number", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("height", type: .nonNull(.scalar(Double.self))),
        GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
        GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
        GraphQLField("scores", type: .object(Score.selections)),
        GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, event: Event, athlete: Athlete, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, scores: Score? = nil, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Dive", "id": id, "event": event.snapshot, "athlete": athlete.snapshot, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "scores": scores.flatMap { $0.snapshot }, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var event: Event {
        get {
          return Event(snapshot: snapshot["event"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "event")
        }
      }

      public var athlete: Athlete {
        get {
          return Athlete(snapshot: snapshot["athlete"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "athlete")
        }
      }

      public var number: String {
        get {
          return snapshot["number"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "number")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var height: Double {
        get {
          return snapshot["height"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "height")
        }
      }

      public var netScore: Double {
        get {
          return snapshot["netScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "netScore")
        }
      }

      public var dd: Double {
        get {
          return snapshot["dd"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "dd")
        }
      }

      public var totalScore: Double {
        get {
          return snapshot["totalScore"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalScore")
        }
      }

      public var scores: Score? {
        get {
          return (snapshot["scores"] as? Snapshot).flatMap { Score(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "scores")
        }
      }

      public var newathleteId: GraphQLID {
        get {
          return snapshot["newathleteID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "newathleteID")
        }
      }

      public var neweventId: GraphQLID {
        get {
          return snapshot["neweventID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "neweventID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["NewEvent"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("date", type: .nonNull(.scalar(String.self))),
          GraphQLField("link", type: .nonNull(.scalar(String.self))),
          GraphQLField("numEntries", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newmeetID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, date: String, link: String, numEntries: Int, newmeetId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "NewEvent", "id": id, "name": name, "date": date, "link": link, "numEntries": numEntries, "newmeetID": newmeetId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var date: String {
          get {
            return snapshot["date"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "date")
          }
        }

        public var link: String {
          get {
            return snapshot["link"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "link")
          }
        }

        public var numEntries: Int {
          get {
            return snapshot["numEntries"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "numEntries")
          }
        }

        public var newmeetId: GraphQLID {
          get {
            return snapshot["newmeetID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newmeetID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Athlete: GraphQLSelectionSet {
        public static let possibleTypes = ["NewAthlete"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("heightFeet", type: .nonNull(.scalar(Int.self))),
          GraphQLField("heightInches", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weight", type: .nonNull(.scalar(Int.self))),
          GraphQLField("weightUnit", type: .nonNull(.scalar(String.self))),
          GraphQLField("gender", type: .nonNull(.scalar(String.self))),
          GraphQLField("age", type: .nonNull(.scalar(Int.self))),
          GraphQLField("graduationYear", type: .nonNull(.scalar(Int.self))),
          GraphQLField("highSchool", type: .nonNull(.scalar(String.self))),
          GraphQLField("hometown", type: .nonNull(.scalar(String.self))),
          GraphQLField("springboardRating", type: .scalar(Double.self)),
          GraphQLField("platformRating", type: .scalar(Double.self)),
          GraphQLField("totalRating", type: .scalar(Double.self)),
          GraphQLField("collegeID", type: .scalar(GraphQLID.self)),
          GraphQLField("newteamID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("newAthleteUserId", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, heightFeet: Int, heightInches: Int, weight: Int, weightUnit: String, gender: String, age: Int, graduationYear: Int, highSchool: String, hometown: String, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, collegeId: GraphQLID? = nil, newteamId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, newAthleteUserId: GraphQLID) {
          self.init(snapshot: ["__typename": "NewAthlete", "id": id, "heightFeet": heightFeet, "heightInches": heightInches, "weight": weight, "weightUnit": weightUnit, "gender": gender, "age": age, "graduationYear": graduationYear, "highSchool": highSchool, "hometown": hometown, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "collegeID": collegeId, "newteamID": newteamId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "newAthleteUserId": newAthleteUserId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var heightFeet: Int {
          get {
            return snapshot["heightFeet"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightFeet")
          }
        }

        public var heightInches: Int {
          get {
            return snapshot["heightInches"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "heightInches")
          }
        }

        public var weight: Int {
          get {
            return snapshot["weight"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "weight")
          }
        }

        public var weightUnit: String {
          get {
            return snapshot["weightUnit"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "weightUnit")
          }
        }

        public var gender: String {
          get {
            return snapshot["gender"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "gender")
          }
        }

        public var age: Int {
          get {
            return snapshot["age"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "age")
          }
        }

        public var graduationYear: Int {
          get {
            return snapshot["graduationYear"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "graduationYear")
          }
        }

        public var highSchool: String {
          get {
            return snapshot["highSchool"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "highSchool")
          }
        }

        public var hometown: String {
          get {
            return snapshot["hometown"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "hometown")
          }
        }

        public var springboardRating: Double? {
          get {
            return snapshot["springboardRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "springboardRating")
          }
        }

        public var platformRating: Double? {
          get {
            return snapshot["platformRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "platformRating")
          }
        }

        public var totalRating: Double? {
          get {
            return snapshot["totalRating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalRating")
          }
        }

        public var collegeId: GraphQLID? {
          get {
            return snapshot["collegeID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "collegeID")
          }
        }

        public var newteamId: GraphQLID? {
          get {
            return snapshot["newteamID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newteamID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var newAthleteUserId: GraphQLID {
          get {
            return snapshot["newAthleteUserId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newAthleteUserId")
          }
        }
      }

      public struct Score: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelJudgeScoreConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelJudgeScoreConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateJudgeScoreSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateJudgeScore($filter: ModelSubscriptionJudgeScoreFilterInput) {\n  onCreateJudgeScore(filter: $filter) {\n    __typename\n    id\n    dive {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    score\n    diveID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionJudgeScoreFilterInput?

  public init(filter: ModelSubscriptionJudgeScoreFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateJudgeScore", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateJudgeScore.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateJudgeScore: OnCreateJudgeScore? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateJudgeScore": onCreateJudgeScore.flatMap { $0.snapshot }])
    }

    public var onCreateJudgeScore: OnCreateJudgeScore? {
      get {
        return (snapshot["onCreateJudgeScore"] as? Snapshot).flatMap { OnCreateJudgeScore(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateJudgeScore")
      }
    }

    public struct OnCreateJudgeScore: GraphQLSelectionSet {
      public static let possibleTypes = ["JudgeScore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("dive", type: .nonNull(.object(Dive.selections))),
        GraphQLField("score", type: .nonNull(.scalar(Double.self))),
        GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, dive: Dive, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "JudgeScore", "id": id, "dive": dive.snapshot, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var dive: Dive {
        get {
          return Dive(snapshot: snapshot["dive"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "dive")
        }
      }

      public var score: Double {
        get {
          return snapshot["score"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "score")
        }
      }

      public var diveId: GraphQLID {
        get {
          return snapshot["diveID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Dive: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdateJudgeScoreSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateJudgeScore($filter: ModelSubscriptionJudgeScoreFilterInput) {\n  onUpdateJudgeScore(filter: $filter) {\n    __typename\n    id\n    dive {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    score\n    diveID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionJudgeScoreFilterInput?

  public init(filter: ModelSubscriptionJudgeScoreFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateJudgeScore", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateJudgeScore.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateJudgeScore: OnUpdateJudgeScore? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateJudgeScore": onUpdateJudgeScore.flatMap { $0.snapshot }])
    }

    public var onUpdateJudgeScore: OnUpdateJudgeScore? {
      get {
        return (snapshot["onUpdateJudgeScore"] as? Snapshot).flatMap { OnUpdateJudgeScore(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateJudgeScore")
      }
    }

    public struct OnUpdateJudgeScore: GraphQLSelectionSet {
      public static let possibleTypes = ["JudgeScore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("dive", type: .nonNull(.object(Dive.selections))),
        GraphQLField("score", type: .nonNull(.scalar(Double.self))),
        GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, dive: Dive, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "JudgeScore", "id": id, "dive": dive.snapshot, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var dive: Dive {
        get {
          return Dive(snapshot: snapshot["dive"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "dive")
        }
      }

      public var score: Double {
        get {
          return snapshot["score"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "score")
        }
      }

      public var diveId: GraphQLID {
        get {
          return snapshot["diveID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Dive: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class OnDeleteJudgeScoreSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteJudgeScore($filter: ModelSubscriptionJudgeScoreFilterInput) {\n  onDeleteJudgeScore(filter: $filter) {\n    __typename\n    id\n    dive {\n      __typename\n      id\n      number\n      name\n      height\n      netScore\n      dd\n      totalScore\n      newathleteID\n      neweventID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    score\n    diveID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionJudgeScoreFilterInput?

  public init(filter: ModelSubscriptionJudgeScoreFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteJudgeScore", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteJudgeScore.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteJudgeScore: OnDeleteJudgeScore? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteJudgeScore": onDeleteJudgeScore.flatMap { $0.snapshot }])
    }

    public var onDeleteJudgeScore: OnDeleteJudgeScore? {
      get {
        return (snapshot["onDeleteJudgeScore"] as? Snapshot).flatMap { OnDeleteJudgeScore(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteJudgeScore")
      }
    }

    public struct OnDeleteJudgeScore: GraphQLSelectionSet {
      public static let possibleTypes = ["JudgeScore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("dive", type: .nonNull(.object(Dive.selections))),
        GraphQLField("score", type: .nonNull(.scalar(Double.self))),
        GraphQLField("diveID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, dive: Dive, score: Double, diveId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "JudgeScore", "id": id, "dive": dive.snapshot, "score": score, "diveID": diveId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var dive: Dive {
        get {
          return Dive(snapshot: snapshot["dive"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "dive")
        }
      }

      public var score: Double {
        get {
          return snapshot["score"]! as! Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "score")
        }
      }

      public var diveId: GraphQLID {
        get {
          return snapshot["diveID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "diveID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Dive: GraphQLSelectionSet {
        public static let possibleTypes = ["Dive"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("number", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("height", type: .nonNull(.scalar(Double.self))),
          GraphQLField("netScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("dd", type: .nonNull(.scalar(Double.self))),
          GraphQLField("totalScore", type: .nonNull(.scalar(Double.self))),
          GraphQLField("newathleteID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("neweventID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, number: String, name: String, height: Double, netScore: Double, dd: Double, totalScore: Double, newathleteId: GraphQLID, neweventId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Dive", "id": id, "number": number, "name": name, "height": height, "netScore": netScore, "dd": dd, "totalScore": totalScore, "newathleteID": newathleteId, "neweventID": neweventId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var number: String {
          get {
            return snapshot["number"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "number")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var height: Double {
          get {
            return snapshot["height"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "height")
          }
        }

        public var netScore: Double {
          get {
            return snapshot["netScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "netScore")
          }
        }

        public var dd: Double {
          get {
            return snapshot["dd"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "dd")
          }
        }

        public var totalScore: Double {
          get {
            return snapshot["totalScore"]! as! Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalScore")
          }
        }

        public var newathleteId: GraphQLID {
          get {
            return snapshot["newathleteID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "newathleteID")
          }
        }

        public var neweventId: GraphQLID {
          get {
            return snapshot["neweventID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "neweventID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateMessageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateMessage($filter: ModelSubscriptionMessageFilterInput) {\n  onCreateMessage(filter: $filter) {\n    __typename\n    id\n    body\n    creationDate\n    MessageNewUsers {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMessageFilterInput?

  public init(filter: ModelSubscriptionMessageFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateMessage", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateMessage: OnCreateMessage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateMessage": onCreateMessage.flatMap { $0.snapshot }])
    }

    public var onCreateMessage: OnCreateMessage? {
      get {
        return (snapshot["onCreateMessage"] as? Snapshot).flatMap { OnCreateMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateMessage")
      }
    }

    public struct OnCreateMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("body", type: .nonNull(.scalar(String.self))),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("MessageNewUsers", type: .object(MessageNewUser.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, body: String, creationDate: String, messageNewUsers: MessageNewUser? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "body": body, "creationDate": creationDate, "MessageNewUsers": messageNewUsers.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var body: String {
        get {
          return snapshot["body"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "body")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var messageNewUsers: MessageNewUser? {
        get {
          return (snapshot["MessageNewUsers"] as? Snapshot).flatMap { MessageNewUser(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MessageNewUsers")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct MessageNewUser: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageNewUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnUpdateMessageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateMessage($filter: ModelSubscriptionMessageFilterInput) {\n  onUpdateMessage(filter: $filter) {\n    __typename\n    id\n    body\n    creationDate\n    MessageNewUsers {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMessageFilterInput?

  public init(filter: ModelSubscriptionMessageFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateMessage", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateMessage: OnUpdateMessage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateMessage": onUpdateMessage.flatMap { $0.snapshot }])
    }

    public var onUpdateMessage: OnUpdateMessage? {
      get {
        return (snapshot["onUpdateMessage"] as? Snapshot).flatMap { OnUpdateMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateMessage")
      }
    }

    public struct OnUpdateMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("body", type: .nonNull(.scalar(String.self))),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("MessageNewUsers", type: .object(MessageNewUser.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, body: String, creationDate: String, messageNewUsers: MessageNewUser? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "body": body, "creationDate": creationDate, "MessageNewUsers": messageNewUsers.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var body: String {
        get {
          return snapshot["body"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "body")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var messageNewUsers: MessageNewUser? {
        get {
          return (snapshot["MessageNewUsers"] as? Snapshot).flatMap { MessageNewUser(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MessageNewUsers")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct MessageNewUser: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageNewUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnDeleteMessageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteMessage($filter: ModelSubscriptionMessageFilterInput) {\n  onDeleteMessage(filter: $filter) {\n    __typename\n    id\n    body\n    creationDate\n    MessageNewUsers {\n      __typename\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMessageFilterInput?

  public init(filter: ModelSubscriptionMessageFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteMessage", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteMessage: OnDeleteMessage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteMessage": onDeleteMessage.flatMap { $0.snapshot }])
    }

    public var onDeleteMessage: OnDeleteMessage? {
      get {
        return (snapshot["onDeleteMessage"] as? Snapshot).flatMap { OnDeleteMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteMessage")
      }
    }

    public struct OnDeleteMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("body", type: .nonNull(.scalar(String.self))),
        GraphQLField("creationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("MessageNewUsers", type: .object(MessageNewUser.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, body: String, creationDate: String, messageNewUsers: MessageNewUser? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "body": body, "creationDate": creationDate, "MessageNewUsers": messageNewUsers.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var body: String {
        get {
          return snapshot["body"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "body")
        }
      }

      public var creationDate: String {
        get {
          return snapshot["creationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "creationDate")
        }
      }

      public var messageNewUsers: MessageNewUser? {
        get {
          return (snapshot["MessageNewUsers"] as? Snapshot).flatMap { MessageNewUser(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MessageNewUsers")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct MessageNewUser: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageNewUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageNewUserConnection", "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }
      }
    }
  }
}

public final class OnCreateDiveMeetsDiverSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateDiveMeetsDiver($filter: ModelSubscriptionDiveMeetsDiverFilterInput) {\n  onCreateDiveMeetsDiver(filter: $filter) {\n    __typename\n    id\n    firstName\n    lastName\n    finaAge\n    hsGradYear\n    springboardRating\n    platformRating\n    totalRating\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionDiveMeetsDiverFilterInput?

  public init(filter: ModelSubscriptionDiveMeetsDiverFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateDiveMeetsDiver", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateDiveMeetsDiver.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateDiveMeetsDiver: OnCreateDiveMeetsDiver? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateDiveMeetsDiver": onCreateDiveMeetsDiver.flatMap { $0.snapshot }])
    }

    public var onCreateDiveMeetsDiver: OnCreateDiveMeetsDiver? {
      get {
        return (snapshot["onCreateDiveMeetsDiver"] as? Snapshot).flatMap { OnCreateDiveMeetsDiver(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateDiveMeetsDiver")
      }
    }

    public struct OnCreateDiveMeetsDiver: GraphQLSelectionSet {
      public static let possibleTypes = ["DiveMeetsDiver"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("finaAge", type: .scalar(Int.self)),
        GraphQLField("hsGradYear", type: .scalar(Int.self)),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "DiveMeetsDiver", "id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var finaAge: Int? {
        get {
          return snapshot["finaAge"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "finaAge")
        }
      }

      public var hsGradYear: Int? {
        get {
          return snapshot["hsGradYear"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "hsGradYear")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnUpdateDiveMeetsDiverSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateDiveMeetsDiver($filter: ModelSubscriptionDiveMeetsDiverFilterInput) {\n  onUpdateDiveMeetsDiver(filter: $filter) {\n    __typename\n    id\n    firstName\n    lastName\n    finaAge\n    hsGradYear\n    springboardRating\n    platformRating\n    totalRating\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionDiveMeetsDiverFilterInput?

  public init(filter: ModelSubscriptionDiveMeetsDiverFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateDiveMeetsDiver", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateDiveMeetsDiver.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateDiveMeetsDiver: OnUpdateDiveMeetsDiver? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateDiveMeetsDiver": onUpdateDiveMeetsDiver.flatMap { $0.snapshot }])
    }

    public var onUpdateDiveMeetsDiver: OnUpdateDiveMeetsDiver? {
      get {
        return (snapshot["onUpdateDiveMeetsDiver"] as? Snapshot).flatMap { OnUpdateDiveMeetsDiver(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateDiveMeetsDiver")
      }
    }

    public struct OnUpdateDiveMeetsDiver: GraphQLSelectionSet {
      public static let possibleTypes = ["DiveMeetsDiver"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("finaAge", type: .scalar(Int.self)),
        GraphQLField("hsGradYear", type: .scalar(Int.self)),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "DiveMeetsDiver", "id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var finaAge: Int? {
        get {
          return snapshot["finaAge"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "finaAge")
        }
      }

      public var hsGradYear: Int? {
        get {
          return snapshot["hsGradYear"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "hsGradYear")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnDeleteDiveMeetsDiverSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteDiveMeetsDiver($filter: ModelSubscriptionDiveMeetsDiverFilterInput) {\n  onDeleteDiveMeetsDiver(filter: $filter) {\n    __typename\n    id\n    firstName\n    lastName\n    finaAge\n    hsGradYear\n    springboardRating\n    platformRating\n    totalRating\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionDiveMeetsDiverFilterInput?

  public init(filter: ModelSubscriptionDiveMeetsDiverFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteDiveMeetsDiver", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteDiveMeetsDiver.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteDiveMeetsDiver: OnDeleteDiveMeetsDiver? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteDiveMeetsDiver": onDeleteDiveMeetsDiver.flatMap { $0.snapshot }])
    }

    public var onDeleteDiveMeetsDiver: OnDeleteDiveMeetsDiver? {
      get {
        return (snapshot["onDeleteDiveMeetsDiver"] as? Snapshot).flatMap { OnDeleteDiveMeetsDiver(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteDiveMeetsDiver")
      }
    }

    public struct OnDeleteDiveMeetsDiver: GraphQLSelectionSet {
      public static let possibleTypes = ["DiveMeetsDiver"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("finaAge", type: .scalar(Int.self)),
        GraphQLField("hsGradYear", type: .scalar(Int.self)),
        GraphQLField("springboardRating", type: .scalar(Double.self)),
        GraphQLField("platformRating", type: .scalar(Double.self)),
        GraphQLField("totalRating", type: .scalar(Double.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, firstName: String, lastName: String, finaAge: Int? = nil, hsGradYear: Int? = nil, springboardRating: Double? = nil, platformRating: Double? = nil, totalRating: Double? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "DiveMeetsDiver", "id": id, "firstName": firstName, "lastName": lastName, "finaAge": finaAge, "hsGradYear": hsGradYear, "springboardRating": springboardRating, "platformRating": platformRating, "totalRating": totalRating, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var firstName: String {
        get {
          return snapshot["firstName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String {
        get {
          return snapshot["lastName"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var finaAge: Int? {
        get {
          return snapshot["finaAge"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "finaAge")
        }
      }

      public var hsGradYear: Int? {
        get {
          return snapshot["hsGradYear"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "hsGradYear")
        }
      }

      public var springboardRating: Double? {
        get {
          return snapshot["springboardRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "springboardRating")
        }
      }

      public var platformRating: Double? {
        get {
          return snapshot["platformRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "platformRating")
        }
      }

      public var totalRating: Double? {
        get {
          return snapshot["totalRating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalRating")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}