type Post @model @auth(rules: [{ allow: private }]) {
  id: ID!
  title: String
  description: String
  creationDate: AWSDateTime!
  images: [NewImage] @hasMany(indexName: "byPost", fields: ["id"])
  videos: [Video] @hasMany(indexName: "byPost", fields: ["id"])
  newuserID: ID! @index(name: "byNewUser")
}

type NewImage @model @auth(rules: [{ allow: private }]) {
  id: ID!
  link: AWSURL!
  uploadDate: AWSDateTime!
  postID: ID! @index(name: "byPost")
}

type MessageNewUser @model @auth(rules: [{ allow: private }]) {
  id: ID!
  isSender: Boolean
  newuserID: ID! @index(name: "byNewUser")
  messageID: ID! @index(name: "byMessage")
}

type NewUser @model @auth(rules: [{ allow: private }]) {
  id: ID!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  phone: AWSPhone
  diveMeetsID: String
  accountType: String!
  athlete: NewAthlete @hasOne
  coach: CoachUser @hasOne
  followed: [NewFollowed!]! @manyToMany(relationName: "NewUserNewFollowed")
  MessageNewUsers: [MessageNewUser] @hasMany(indexName: "byNewUser", fields: ["id"])
  posts: [Post] @hasMany(indexName: "byNewUser", fields: ["id"])
}

type NewAthlete @model @auth(rules: [{ allow: private }]) {
  id: ID!
  user: NewUser! @belongsTo
  team: NewTeam @belongsTo
  college: College @belongsTo
  heightFeet: Int!
  heightInches: Int!
  weight: Int!
  weightUnit: String!
  gender: String!
  age: Int!
  graduationYear: Int!
  highSchool: String!
  hometown: String!
  springboardRating: Float
  platformRating: Float
  totalRating: Float
  dives: [Dive!] @hasMany(indexName: "byNewAthlete", fields: ["id"])
  collegeID: ID! @index(name: "byCollege")
  newteamID: ID! @index(name: "byNewTeam")
}

type Video @model @auth(rules: [{ allow: private }]) {
  id: ID!
  link: AWSURL!
  uploadDate: AWSDateTime!
  postID: ID! @index(name: "byPost")
}

type CoachUser @model @auth(rules: [{ allow: private }]) {
  id: ID!
  user: NewUser @belongsTo
  team: NewTeam @belongsTo
}

type NewFollowed @model @auth(rules: [{ allow: private }]) {
  id: ID!
  email: AWSEmail!
  users: [NewUser!]! @manyToMany(relationName: "NewUserNewFollowed")
}

type NewTeam @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  coach: CoachUser @hasOne
  athletes: [NewAthlete!]! @hasMany(indexName: "byNewTeam", fields: ["id"])
}

type College @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  imageLink: AWSURL!
  athletes: [NewAthlete!]! @hasMany(indexName: "byCollege", fields: ["id"])
}

type NewMeet @model @auth(rules: [{ allow: private }]) {
  id: ID!
  meetID: Int!
  name: String!
  organization: String
  startDate: AWSDate!
  endDate: AWSDate!
  city: String!
  state: String!
  country: String!
  link: AWSURL!
  meetType: Int!
  events: [NewEvent!]! @hasMany(indexName: "byNewMeet", fields: ["id"])
}

type NewEvent @model @auth(rules: [{ allow: private }]) {
  id: ID!
  meet: NewMeet! @belongsTo
  name: String!
  date: AWSDate!
  link: AWSURL!
  numEntries: Int!
  dives: [Dive!]! @hasMany(indexName: "byNewEvent", fields: ["id"])
  newmeetID: ID! @index(name: "byNewMeet")
}

type Dive @model @auth(rules: [{ allow: private }]) {
  id: ID!
  event: NewEvent! @belongsTo
  athlete: NewAthlete! @belongsTo
  number: String!
  name: String!
  height: Float!
  netScore: Float!
  dd: Float!
  totalScore: Float!
  scores: [JudgeScore!]! @hasMany(indexName: "byDive", fields: ["id"])
  newathleteID: ID! @index(name: "byNewAthlete")
  neweventID: ID! @index(name: "byNewEvent")
}

type JudgeScore @model @auth(rules: [{ allow: private }]) {
  id: ID!
  dive: Dive! @belongsTo
  score: Float!
  diveID: ID! @index(name: "byDive")
}

type Message @model @auth(rules: [{ allow: private }]) {
  id: ID!
  body: String!
  creationDate: AWSDate!
  MessageNewUsers: [MessageNewUser] @hasMany(indexName: "byMessage", fields: ["id"])
}
 
