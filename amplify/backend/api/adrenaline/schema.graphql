type UserSavedPost @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  newuserID: ID! @index(name: "byNewUser")
  postID: ID! @index(name: "byPost")
}

type Post @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  caption: String
  creationDate: AWSDateTime!
  images: [NewImage] @hasMany(indexName: "byPost", fields: ["id"])
  videos: [Video] @hasMany(indexName: "byPost", fields: ["id"])
  newuserID: ID! @index(name: "byNewUser")
  usersSaving: [UserSavedPost] @hasMany(indexName: "byPost", fields: ["id"])
  isCoachesOnly: Boolean!
}

type NewImage @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  s3key: String!
  uploadDate: AWSDateTime!
  postID: ID! @index(name: "byPost")
}

type MessageNewUser @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  isSender: Boolean!
  newuserID: ID! @index(name: "byNewUser")
  messageID: ID! @index(name: "byMessage")
}

type NewUser @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  phone: AWSPhone
  diveMeetsID: String
  accountType: String!
  dateOfBirth: AWSDate!
  athlete: NewAthlete @hasOne
  coach: CoachUser @hasOne
  posts: [Post] @hasMany(indexName: "byNewUser", fields: ["id"])
  tokens: [String!]!
  savedPosts: [UserSavedPost] @hasMany(indexName: "byNewUser", fields: ["id"])
  favoritesIds: [String!]!
}

type NewAthlete @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  user: NewUser! @belongsTo
  team: NewTeam @belongsTo(fields: ["newteamID"])
  college: College @belongsTo(fields: ["collegeID"])
  academics: AcademicRecord @hasOne
  heightFeet: Int!
  heightInches: Int!
  weight: Int!
  weightUnit: String!
  gender: String!
  graduationYear: Int!
  highSchool: String!
  hometown: String!
  springboardRating: Float
  platformRating: Float
  totalRating: Float
  dives: [Dive!] @hasMany(indexName: "byNewAthlete", fields: ["id"])
  collegeID: ID @index(name: "byCollege")
  newteamID: ID @index(name: "byNewTeam")
}

type Video @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  s3key: String!
  uploadDate: AWSDateTime!
  postID: ID! @index(name: "byPost")
}

type CoachUser @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  user: NewUser @belongsTo
  team: NewTeam @belongsTo(fields: ["newteamID"])
  college: College @belongsTo(fields: ["collegeID"])
  favoritesOrder: [Int!]!
  collegeID: ID
  newteamID: ID @index(name: "byNewTeam")
}

type NewTeam @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  name: String!
  coach: CoachUser @hasOne
  athletes: [NewAthlete!]! @hasMany(indexName: "byNewTeam", fields: ["id"])
  joinRequests: [TeamJoinRequest!]! @hasMany
}

type College @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  name: String!
  imageLink: AWSURL!
  athletes: [NewAthlete!]! @hasMany(indexName: "byCollege", fields: ["id"])
  coach: CoachUser @hasOne(fields: ["coachID"])
  coachID: ID
}

type NewMeet @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  meetID: Int!
  name: String!
  organization: String
  startDate: AWSDate!
  endDate: AWSDate!
  city: String!
  state: String!
  country: String!
  link: AWSURL!
  meetType: Int!
  events: [NewEvent!]! @hasMany(indexName: "byNewMeet", fields: ["id"])
}

type NewEvent @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  meet: NewMeet! @belongsTo
  name: String!
  date: AWSDate!
  link: AWSURL!
  numEntries: Int!
  dives: [Dive!]! @hasMany(indexName: "byNewEvent", fields: ["id"])
  newmeetID: ID! @index(name: "byNewMeet")
}

type Dive @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  event: NewEvent! @belongsTo
  athlete: NewAthlete! @belongsTo
  number: String!
  name: String!
  height: Float!
  netScore: Float!
  dd: Float!
  totalScore: Float!
  scores: [JudgeScore!]! @hasMany(indexName: "byDive", fields: ["id"])
  newathleteID: ID! @index(name: "byNewAthlete")
  neweventID: ID! @index(name: "byNewEvent")
}

type JudgeScore @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  dive: Dive! @belongsTo
  score: Float!
  diveID: ID! @index(name: "byDive")
}

type Message @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  body: String!
  creationDate: AWSDateTime!
  MessageNewUsers: [MessageNewUser] @hasMany(indexName: "byMessage", fields: ["id"])
}

type DiveMeetsDiver @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  firstName: String!
  lastName: String!
  gender: String!
  finaAge: Int
  hsGradYear: Int
  springboardRating: Float
  platformRating: Float
  totalRating: Float
}

type AcademicRecord @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  athlete: NewAthlete! @belongsTo
  satScore: Int
  actScore: Int
  weightedGPA: Float
  gpaScale: Float
  coursework: String
}

enum TeamJoinRequestStatus {
  REQUESTED_BY_ATHLETE
  REQUESTED_BY_ATHLETE_DENIED_ONCE
  REQUESTED_BY_ATHLETE_DENIED_TWICE
  REQUESTED_BY_COACH
  APPROVED
  DENIED_BY_ATHLETE
  DENIED_BY_COACH_FIRST
  DENIED_BY_COACH_SECOND
  DENIED_BY_COACH_THIRD
}

type TeamJoinRequest @model @auth(rules: [{allow: private}, {allow: public, provider: apiKey}]) {
  id: ID!
  user: NewUser! @hasOne
  team: NewTeam! @belongsTo
  status: TeamJoinRequestStatus!
}
